/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/_proxy/logs/": {
    /** Get caddy proxy logs */
    get: operations["_proxy_logs_list"];
  };
  "/api/archived-projects/": {
    /** List archived projects */
    get: operations["getArchivedProjectList"];
  };
  "/api/auth/login/": {
    /**
     * Login
     * @description Authenticate User, what is returned is a cookie named `sessionid` that will be used for authentication of the next requests.
     */
    post: operations["login"];
  };
  "/api/auth/logout/": {
    /** Logout */
    delete: operations["logout"];
  };
  "/api/auth/me/": {
    /**
     * Get current user
     * @description Get current authenticated user.
     */
    get: operations["getAuthedUser"];
  };
  "/api/csrf/": {
    /**
     * Get CSRF cookie
     * @description CSRF cookie endpoint for retrieving a CSRF token before doing mutative requests (`DELETE`, `POST`, `PUT`, `PATCH`).You need to pass the cookie named `csrftoken` to all requests alongside a `X-CSRFToken` with the value of the token.
     */
    get: operations["getCSRF"];
  };
  "/api/docker/check-port/": {
    /**
     * Check Port
     * @description Check If Port is available on host machine
     */
    post: operations["checkIfPortIsAvailable"];
  };
  "/api/docker/image-search/": {
    /**
     * Search docker hub
     * @description Search a docker Image in docker hub Registry
     */
    get: operations["searchDockerRegistry"];
  };
  "/api/domain/root/": {
    /**
     * Get Root Domain
     * @description Get the root domain used by ZaneOps to generate automatic subdomains for services.
     */
    get: operations["getRootDomain"];
  };
  "/api/ping/": {
    /**
     * Ping
     * @description simple healthcheck endpoint.
     */
    get: operations["ping"];
  };
  "/api/projects/": {
    /** List all active projects */
    get: operations["getProjectList"];
    /** Create a new project */
    post: operations["createProject"];
  };
  "/api/projects/{project_slug}/archive-service/docker/{service_slug}/": {
    /**
     * Archive a docker service
     * @description Archive a service created from a docker image.
     */
    delete: operations["archiveDockerService"];
  };
  "/api/projects/{project_slug}/cancel-deployment/docker/{service_slug}/{deployment_hash}/": {
    /**
     * Cancel deployment
     * @description Cancel a deployment in progress.
     */
    put: operations["cancelDockerServiceDeployment"];
  };
  "/api/projects/{project_slug}/cancel-service-changes/docker/{service_slug}/{change_id}/": {
    /**
     * Cancel a config change
     * @description Cancel a config change that was requested.
     */
    delete: operations["cancelDeploymentChanges"];
  };
  "/api/projects/{project_slug}/create-service/docker/": {
    /**
     * Create a docker service
     * @description Create a service from a docker image.
     */
    post: operations["createDockerService"];
  };
  "/api/projects/{project_slug}/deploy-service/docker/{service_slug}/": {
    /**
     * Deploy a docker service
     * @description Apply all pending changes for the service and trigger a new deployment.
     */
    put: operations["applyDeploymentChanges"];
  };
  "/api/projects/{project_slug}/deploy-service/docker/{service_slug}/{deployment_hash}/": {
    /**
     * Redeploy a docker service
     * @description Revert the service to the state of a previous deployment.
     */
    put: operations["redeployDockerService"];
  };
  "/api/projects/{project_slug}/request-service-changes/docker/{service_slug}/": {
    /**
     * Request config changes
     * @description Request a change to the configuration of a service.
     */
    put: operations["requestDeploymentChanges"];
  };
  "/api/projects/{project_slug}/service-details/docker/{service_slug}/": {
    /**
     * Get single service
     * @description See all the details of a service.
     */
    get: operations["getDockerService"];
  };
  "/api/projects/{project_slug}/service-details/docker/{service_slug}/deployments/": {
    /**
     * List all deployments
     * @description List all deployments for a service, the default order is last created descendant.
     */
    get: operations["projects_service_details_docker_deployments_list"];
  };
  "/api/projects/{project_slug}/service-details/docker/{service_slug}/deployments/{deployment_hash}/": {
    /** Get single deployment */
    get: operations["projects_service_details_docker_deployments_retrieve"];
  };
  "/api/projects/{project_slug}/service-details/docker/{service_slug}/deployments/{deployment_hash}/http-logs/": {
    /** Get deployment HTTP logs */
    get: operations["projects_service_details_docker_deployments_http_logs_list"];
  };
  "/api/projects/{project_slug}/service-details/docker/{service_slug}/deployments/{deployment_hash}/logs/": {
    /** Get deployment logs */
    get: operations["projects_service_details_docker_deployments_logs_list"];
  };
  "/api/projects/{project_slug}/toggle-service/docker/{service_slug}/": {
    /**
     * Stop/Restart a docker service
     * @description Stops a running docker service and restart it if it was stopped.
     */
    put: operations["toggleDockerService"];
  };
  "/api/projects/{slug}/": {
    /** Get single project */
    get: operations["getSingleProject"];
    /** Archive a Project */
    delete: operations["archiveSingleProject"];
    /** Update a project */
    patch: operations["updateProject"];
  };
  "/api/projects/{slug}/service-list/": {
    /**
     * Get service list
     * @description Get all services in a project
     */
    get: operations["projects_service_list_list"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    ApplyDeploymentChangesCommitMessageErrorComponent: {
      /**
       * @description * `commit_message` - commit_message
       * @enum {string}
       */
      attr: "commit_message";
      /**
       * @description * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "invalid" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    ApplyDeploymentChangesError: components["schemas"]["ApplyDeploymentChangesNonFieldErrorsErrorComponent"] | components["schemas"]["ApplyDeploymentChangesCommitMessageErrorComponent"];
    ApplyDeploymentChangesErrorResponse400: components["schemas"]["ApplyDeploymentChangesValidationError"] | components["schemas"]["ParseErrorResponse"];
    ApplyDeploymentChangesNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors
       * @enum {string}
       */
      attr: "non_field_errors";
      /**
       * @description * `invalid` - invalid
       * @enum {string}
       */
      code: "invalid";
      detail: string;
    };
    ApplyDeploymentChangesValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["ApplyDeploymentChangesError"][];
    };
    ArchiveDockerServiceErrorResponse400: components["schemas"]["ParseErrorResponse"];
    ArchiveSingleProjectErrorResponse400: components["schemas"]["ParseErrorResponse"];
    ArchivedProject: {
      id: number;
      slug: string;
      /** Format: date-time */
      archived_at: string;
      description: string | null;
    };
    AuthedSuccessResponse: {
      user: components["schemas"]["User"];
    };
    CancelDeploymentChangesErrorResponse400: components["schemas"]["ParseErrorResponse"];
    CancelDockerServiceDeploymentErrorResponse400: components["schemas"]["ParseErrorResponse"];
    CheckIfPortIsAvailableError: components["schemas"]["CheckIfPortIsAvailableNonFieldErrorsErrorComponent"] | components["schemas"]["CheckIfPortIsAvailablePortErrorComponent"];
    CheckIfPortIsAvailableErrorResponse400: components["schemas"]["CheckIfPortIsAvailableValidationError"] | components["schemas"]["ParseErrorResponse"];
    CheckIfPortIsAvailableNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors
       * @enum {string}
       */
      attr: "non_field_errors";
      /**
       * @description * `invalid` - invalid
       * @enum {string}
       */
      code: "invalid";
      detail: string;
    };
    CheckIfPortIsAvailablePortErrorComponent: {
      /**
       * @description * `port` - port
       * @enum {string}
       */
      attr: "port";
      /**
       * @description * `invalid` - invalid
       * * `max_string_length` - max_string_length
       * * `min_value` - min_value
       * * `null` - null
       * * `required` - required
       * @enum {string}
       */
      code: "invalid" | "max_string_length" | "min_value" | "null" | "required";
      detail: string;
    };
    CheckIfPortIsAvailableValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["CheckIfPortIsAvailableError"][];
    };
    /**
     * @description * `client_error` - Client Error
     * @enum {string}
     */
    ClientErrorEnum: "client_error";
    CreateDockerServiceCredentialsNonFieldErrorsErrorComponent: {
      /**
       * @description * `credentials.non_field_errors` - credentials.non_field_errors
       * @enum {string}
       */
      attr: "credentials.non_field_errors";
      /**
       * @description * `invalid` - invalid
       * * `null` - null
       * @enum {string}
       */
      code: "invalid" | "null";
      detail: string;
    };
    CreateDockerServiceCredentialsPasswordErrorComponent: {
      /**
       * @description * `credentials.password` - credentials.password
       * @enum {string}
       */
      attr: "credentials.password";
      /**
       * @description * `invalid` - invalid
       * * `max_length` - max_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "invalid" | "max_length" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    CreateDockerServiceCredentialsUsernameErrorComponent: {
      /**
       * @description * `credentials.username` - credentials.username
       * @enum {string}
       */
      attr: "credentials.username";
      /**
       * @description * `invalid` - invalid
       * * `max_length` - max_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "invalid" | "max_length" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    CreateDockerServiceError: components["schemas"]["CreateDockerServiceNonFieldErrorsErrorComponent"] | components["schemas"]["CreateDockerServiceSlugErrorComponent"] | components["schemas"]["CreateDockerServiceImageErrorComponent"] | components["schemas"]["CreateDockerServiceCredentialsNonFieldErrorsErrorComponent"] | components["schemas"]["CreateDockerServiceCredentialsUsernameErrorComponent"] | components["schemas"]["CreateDockerServiceCredentialsPasswordErrorComponent"];
    CreateDockerServiceErrorResponse400: components["schemas"]["CreateDockerServiceValidationError"] | components["schemas"]["ParseErrorResponse"];
    CreateDockerServiceImageErrorComponent: {
      /**
       * @description * `image` - image
       * @enum {string}
       */
      attr: "image";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    CreateDockerServiceNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors
       * @enum {string}
       */
      attr: "non_field_errors";
      /**
       * @description * `invalid` - invalid
       * @enum {string}
       */
      code: "invalid";
      detail: string;
    };
    CreateDockerServiceSlugErrorComponent: {
      /**
       * @description * `slug` - slug
       * @enum {string}
       */
      attr: "slug";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `max_length` - max_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "max_length" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    CreateDockerServiceValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["CreateDockerServiceError"][];
    };
    CreateProjectDescriptionErrorComponent: {
      /**
       * @description * `description` - description
       * @enum {string}
       */
      attr: "description";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    CreateProjectError: components["schemas"]["CreateProjectNonFieldErrorsErrorComponent"] | components["schemas"]["CreateProjectSlugErrorComponent"] | components["schemas"]["CreateProjectDescriptionErrorComponent"];
    CreateProjectErrorResponse400: components["schemas"]["CreateProjectValidationError"] | components["schemas"]["ParseErrorResponse"];
    CreateProjectNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors
       * @enum {string}
       */
      attr: "non_field_errors";
      /**
       * @description * `invalid` - invalid
       * @enum {string}
       */
      code: "invalid";
      detail: string;
    };
    CreateProjectSlugErrorComponent: {
      /**
       * @description * `slug` - slug
       * @enum {string}
       */
      attr: "slug";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `max_length` - max_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "max_length" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    CreateProjectValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["CreateProjectError"][];
    };
    DeploymentChangeRequestRequest: components["schemas"]["URLItemChangeRequest"] | components["schemas"]["VolumeItemChangeRequest"] | components["schemas"]["EnvItemChangeRequest"] | components["schemas"]["PortItemChangeRequest"] | components["schemas"]["DockerCredentialsFieldChangeRequest"] | components["schemas"]["DockerCommandFieldChangeRequest"] | components["schemas"]["DockerImageFieldChangeRequest"] | components["schemas"]["HealthcheckFieldChangeRequest"] | components["schemas"]["ResourceLimitChangeRequest"];
    /**
     * @description * `command` - command
     * @enum {string}
     */
    DockerCommandFieldChangeFieldEnum: "command";
    DockerCommandFieldChangeRequest: {
      /** @default UPDATE */
      type?: components["schemas"]["FieldChangeTypeEnum"];
      new_value: string | null;
      field: components["schemas"]["DockerCommandFieldChangeFieldEnum"];
    };
    DockerCredential: {
      username: string;
      password: string;
    };
    /**
     * @description * `credentials` - credentials
     * @enum {string}
     */
    DockerCredentialsFieldChangeFieldEnum: "credentials";
    DockerCredentialsFieldChangeRequest: {
      /** @default UPDATE */
      type?: components["schemas"]["FieldChangeTypeEnum"];
      new_value: components["schemas"]["DockerCredentialsRequestRequest"] | null;
      field: components["schemas"]["DockerCredentialsFieldChangeFieldEnum"];
    };
    DockerCredentialsRequestRequest: {
      username?: string;
      password?: string;
    };
    DockerDeploymentChange: {
      id: string;
      type: components["schemas"]["DockerDeploymentChangeTypeEnum"];
      field: components["schemas"]["DockerDeploymentChangeFieldEnum"];
      new_value: unknown;
      old_value: unknown;
      item_id: string | null;
    };
    /**
     * @description * `image` - image
     * * `command` - command
     * * `credentials` - credentials
     * * `healthcheck` - healthcheck
     * * `volumes` - volumes
     * * `env_variables` - env variables
     * * `urls` - urls
     * * `ports` - ports
     * * `resource_limits` - resource limits
     * @enum {string}
     */
    DockerDeploymentChangeFieldEnum: "image" | "command" | "credentials" | "healthcheck" | "volumes" | "env_variables" | "urls" | "ports" | "resource_limits";
    /**
     * @description * `UPDATE` - update
     * * `DELETE` - delete
     * * `ADD` - add
     * @enum {string}
     */
    DockerDeploymentChangeTypeEnum: "UPDATE" | "DELETE" | "ADD";
    DockerEnvVariable: {
      id: string;
      key: string;
      value: string;
    };
    DockerImage: {
      full_image: string;
      description: string;
    };
    /**
     * @description * `image` - image
     * @enum {string}
     */
    DockerImageFieldChangeFieldEnum: "image";
    DockerImageFieldChangeRequest: {
      /** @default UPDATE */
      type?: components["schemas"]["FieldChangeTypeEnum"];
      new_value: string;
      field: components["schemas"]["DockerImageFieldChangeFieldEnum"];
    };
    DockerImageSearchResponse: {
      images: components["schemas"]["DockerImage"][];
    };
    DockerPortCheckRequestRequest: {
      port: number;
    };
    DockerPortCheckResponse: {
      available: boolean;
    };
    DockerService: {
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      id: string;
      slug: string;
      image: string | null;
      command: string | null;
      healthcheck: components["schemas"]["HealthCheck"] | null;
      project_id: string;
      credentials: components["schemas"]["DockerCredential"] | null;
      urls: readonly components["schemas"]["URLModel"][];
      volumes: readonly components["schemas"]["Volume"][];
      ports: readonly components["schemas"]["PortConfiguration"][];
      env_variables: readonly components["schemas"]["DockerEnvVariable"][];
      network_aliases: readonly string[];
      network_alias: string | null;
      unapplied_changes: readonly components["schemas"]["DockerDeploymentChange"][];
      resource_limits: components["schemas"]["ResourceLimits"] | null;
    };
    DockerServiceCard: {
      /** Format: date-time */
      updated_at: string;
      volume_number: number;
      slug: string;
      /** Format: uri */
      url: string | null;
      status: components["schemas"]["ServiceStatusEnum"];
      id: string;
      /** @default docker */
      type: components["schemas"]["DockerServiceCardTypeEnum"];
      image: string;
      tag: string;
    };
    /**
     * @description * `docker` - docker
     * @enum {string}
     */
    DockerServiceCardTypeEnum: "docker";
    DockerServiceCreateRequestRequest: {
      slug?: string;
      image: string;
      credentials?: components["schemas"]["DockerCredentialsRequestRequest"];
    };
    DockerServiceDeployServiceRequest: {
      commit_message?: string;
    };
    DockerServiceDeployment: {
      is_current_production: boolean;
      slot: components["schemas"]["SlotEnum"];
      /** Format: date-time */
      queued_at: string;
      /** Format: date-time */
      started_at: string | null;
      /** Format: date-time */
      finished_at: string | null;
      redeploy_hash: string | null;
      hash: string;
      status: components["schemas"]["DockerServiceDeploymentStatusEnum"];
      status_reason: string | null;
      /** Format: uri */
      url: string | null;
      network_aliases: readonly string[];
      service_snapshot: components["schemas"]["DockerService"] | null;
      changes: readonly components["schemas"]["DockerDeploymentChange"][];
      commit_message: string;
    };
    /**
     * @description * `QUEUED` - Queued
     * * `CANCELLED` - Cancelled
     * * `FAILED` - Failed
     * * `PREPARING` - Preparing
     * * `STARTING` - Starting
     * * `RESTARTING` - Restarting
     * * `HEALTHY` - Healthy
     * * `UNHEALTHY` - Unhealthy
     * * `REMOVED` - Removed
     * * `SLEEPING` - Sleeping
     * @enum {string}
     */
    DockerServiceDeploymentStatusEnum: "QUEUED" | "CANCELLED" | "FAILED" | "PREPARING" | "STARTING" | "RESTARTING" | "HEALTHY" | "UNHEALTHY" | "REMOVED" | "SLEEPING";
    /**
     * @description * `env_variables` - env_variables
     * @enum {string}
     */
    EnvItemChangeFieldEnum: "env_variables";
    EnvItemChangeRequest: {
      type: components["schemas"]["ItemChangeTypeEnum"];
      item_id?: string;
      new_value?: components["schemas"]["EnvRequestRequest"];
      field: components["schemas"]["EnvItemChangeFieldEnum"];
    };
    EnvRequestRequest: {
      key: string;
      value: string;
    };
    Error401: {
      code: components["schemas"]["ErrorCode401Enum"];
      detail: string;
      attr: string | null;
    };
    Error404: {
      code: components["schemas"]["ErrorCode404Enum"];
      detail: string;
      attr: string | null;
    };
    Error409: {
      code: components["schemas"]["Error409CodeEnum"];
      detail: string;
      attr: string | null;
    };
    /**
     * @description * `resource_conflict` - Resource Conflict
     * @enum {string}
     */
    Error409CodeEnum: "resource_conflict";
    Error429: {
      code: components["schemas"]["ErrorCode429Enum"];
      detail: string;
      attr: string | null;
    };
    /**
     * @description * `authentication_failed` - Authentication Failed
     * * `not_authenticated` - Not Authenticated
     * @enum {string}
     */
    ErrorCode401Enum: "authentication_failed" | "not_authenticated";
    /**
     * @description * `not_found` - Not Found
     * @enum {string}
     */
    ErrorCode404Enum: "not_found";
    /**
     * @description * `throttled` - Throttled
     * @enum {string}
     */
    ErrorCode429Enum: "throttled";
    ErrorResponse401: {
      type: components["schemas"]["ClientErrorEnum"];
      errors: components["schemas"]["Error401"][];
    };
    ErrorResponse404: {
      type: components["schemas"]["ClientErrorEnum"];
      errors: components["schemas"]["Error404"][];
    };
    ErrorResponse409: {
      type: components["schemas"]["ClientErrorEnum"];
      errors: components["schemas"]["Error409"][];
    };
    ErrorResponse429: {
      type: components["schemas"]["ClientErrorEnum"];
      errors: components["schemas"]["Error429"][];
    };
    /**
     * @description * `UPDATE` - Update
     * @enum {string}
     */
    FieldChangeTypeEnum: "UPDATE";
    GetArchivedProjectListError: components["schemas"]["GetArchivedProjectListSlugErrorComponent"] | components["schemas"]["GetArchivedProjectListSortByErrorComponent"];
    GetArchivedProjectListErrorResponse400: components["schemas"]["GetArchivedProjectListValidationError"] | components["schemas"]["ParseErrorResponse"];
    GetArchivedProjectListSlugErrorComponent: {
      /**
       * @description * `slug` - slug
       * @enum {string}
       */
      attr: "slug";
      /**
       * @description * `null_characters_not_allowed` - null_characters_not_allowed
       * @enum {string}
       */
      code: "null_characters_not_allowed";
      detail: string;
    };
    GetArchivedProjectListSortByErrorComponent: {
      /**
       * @description * `sort_by` - sort_by
       * @enum {string}
       */
      attr: "sort_by";
      /**
       * @description * `invalid_choice` - invalid_choice
       * @enum {string}
       */
      code: "invalid_choice";
      detail: string;
    };
    GetArchivedProjectListValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["GetArchivedProjectListError"][];
    };
    GetAuthedUserErrorResponse400: components["schemas"]["ParseErrorResponse"];
    GetCSRFErrorResponse400: components["schemas"]["ParseErrorResponse"];
    GetDockerServiceErrorResponse400: components["schemas"]["ParseErrorResponse"];
    GetProjectListError: components["schemas"]["GetProjectListSlugErrorComponent"] | components["schemas"]["GetProjectListSortByErrorComponent"];
    GetProjectListErrorResponse400: components["schemas"]["GetProjectListValidationError"] | components["schemas"]["ParseErrorResponse"];
    GetProjectListSlugErrorComponent: {
      /**
       * @description * `slug` - slug
       * @enum {string}
       */
      attr: "slug";
      /**
       * @description * `null_characters_not_allowed` - null_characters_not_allowed
       * @enum {string}
       */
      code: "null_characters_not_allowed";
      detail: string;
    };
    GetProjectListSortByErrorComponent: {
      /**
       * @description * `sort_by` - sort_by
       * @enum {string}
       */
      attr: "sort_by";
      /**
       * @description * `invalid_choice` - invalid_choice
       * @enum {string}
       */
      code: "invalid_choice";
      detail: string;
    };
    GetProjectListValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["GetProjectListError"][];
    };
    GetRootDomain: {
      domain: string;
    };
    GetRootDomainErrorResponse400: components["schemas"]["ParseErrorResponse"];
    GetSingleProjectErrorResponse400: components["schemas"]["ParseErrorResponse"];
    GitServiceCard: {
      /** Format: date-time */
      updated_at: string;
      volume_number: number;
      slug: string;
      /** Format: uri */
      url: string | null;
      status: components["schemas"]["ServiceStatusEnum"];
      id: string;
      /** @default git */
      type: components["schemas"]["GitServiceCardTypeEnum"];
      repository: string;
      last_commit_message: string;
      branch: string;
    };
    /**
     * @description * `git` - git
     * @enum {string}
     */
    GitServiceCardTypeEnum: "git";
    HealthCheck: {
      id: string;
      type: components["schemas"]["HealthCheckTypeEnum"];
      value: string;
      timeout_seconds: number;
      interval_seconds: number;
    };
    HealthCheckRequestRequest: {
      type: components["schemas"]["HealthCheckRequestTypeEnum"];
      value: string;
      /** @default 30 */
      timeout_seconds?: number;
      /** @default 30 */
      interval_seconds?: number;
    };
    /**
     * @description * `PATH` - path
     * * `COMMAND` - command
     * @enum {string}
     */
    HealthCheckRequestTypeEnum: "PATH" | "COMMAND";
    /**
     * @description * `COMMAND` - Command
     * * `PATH` - Path
     * @enum {string}
     */
    HealthCheckTypeEnum: "COMMAND" | "PATH";
    /**
     * @description * `healthcheck` - healthcheck
     * @enum {string}
     */
    HealthcheckFieldChangeFieldEnum: "healthcheck";
    HealthcheckFieldChangeRequest: {
      /** @default UPDATE */
      type?: components["schemas"]["FieldChangeTypeEnum"];
      new_value: components["schemas"]["HealthCheckRequestRequest"] | null;
      field: components["schemas"]["HealthcheckFieldChangeFieldEnum"];
    };
    HttpLog: {
      /** Format: uuid */
      id: string;
      status: number;
      /** Format: date-time */
      time: string;
      deployment_id: string | null;
      service_id: string | null;
      request_id: string | null;
      request_ip: string;
      request_path: string;
      request_query: string | null;
      /** Format: uri */
      request_host: string;
      request_protocol: components["schemas"]["RequestProtocolEnum"];
      request_method: components["schemas"]["RequestMethodEnum"];
      /** Format: int64 */
      request_duration_ns: number;
      request_headers: {
        [key: string]: string[];
      };
      response_headers: {
        [key: string]: string[];
      };
    };
    /**
     * @description * `ADD` - Add
     * * `DELETE` - Delete
     * * `UPDATE` - Update
     * @enum {string}
     */
    ItemChangeTypeEnum: "ADD" | "DELETE" | "UPDATE";
    /**
     * @description * `ERROR` - Error
     * * `INFO` - Info
     * @enum {string}
     */
    LevelEnum: "ERROR" | "INFO";
    LoginError: components["schemas"]["LoginNonFieldErrorsErrorComponent"] | components["schemas"]["LoginUsernameErrorComponent"] | components["schemas"]["LoginPasswordErrorComponent"];
    LoginErrorResponse400: components["schemas"]["LoginValidationError"] | components["schemas"]["ParseErrorResponse"];
    LoginNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors
       * @enum {string}
       */
      attr: "non_field_errors";
      /**
       * @description * `invalid` - invalid
       * @enum {string}
       */
      code: "invalid";
      detail: string;
    };
    LoginPasswordErrorComponent: {
      /**
       * @description * `password` - password
       * @enum {string}
       */
      attr: "password";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `max_length` - max_length
       * * `min_length` - min_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "max_length" | "min_length" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    LoginRequestRequest: {
      username: string;
      password: string;
    };
    LoginSuccessResponse: {
      success: boolean;
    };
    LoginUsernameErrorComponent: {
      /**
       * @description * `username` - username
       * @enum {string}
       */
      attr: "username";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `max_length` - max_length
       * * `min_length` - min_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "max_length" | "min_length" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    LoginValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["LoginError"][];
    };
    LogoutErrorResponse400: components["schemas"]["ParseErrorResponse"];
    MemoryLimit: {
      value: number;
      unit: components["schemas"]["UnitEnum"];
    };
    MemoryLimitRequestRequest: {
      value: number;
      /** @default MEGABYTES */
      unit?: components["schemas"]["UnitEnum"];
    };
    PING: {
      ping: components["schemas"]["PingEnum"];
    };
    PaginatedArchivedProjectList: {
      /** @example 123 */
      count: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=4
       */
      next: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=2
       */
      previous: string | null;
      results: components["schemas"]["ArchivedProject"][];
    };
    PaginatedDockerServiceDeploymentList: {
      /** @example 123 */
      count: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=4
       */
      next: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=2
       */
      previous: string | null;
      results: components["schemas"]["DockerServiceDeployment"][];
    };
    PaginatedHttpLogList: {
      next: string | null;
      previous: string | null;
      results: components["schemas"]["HttpLog"][];
    };
    PaginatedProjectList: {
      /** @example 123 */
      count: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=4
       */
      next: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=2
       */
      previous: string | null;
      results: components["schemas"]["Project"][];
    };
    PaginatedSimpleLogList: {
      next: string | null;
      previous: string | null;
      results: components["schemas"]["SimpleLog"][];
    };
    ParseError: {
      code: components["schemas"]["ParseErrorCodeEnum"];
      detail: string;
      attr: string | null;
    };
    /**
     * @description * `parse_error` - Parse Error
     * @enum {string}
     */
    ParseErrorCodeEnum: "parse_error";
    ParseErrorResponse: {
      type: components["schemas"]["ClientErrorEnum"];
      errors: components["schemas"]["ParseError"][];
    };
    PatchedProjectUpdateRequestRequest: {
      slug?: string;
      description?: string;
    };
    /**
     * @description * `pong` - pong
     * @enum {string}
     */
    PingEnum: "pong";
    PingErrorResponse400: components["schemas"]["ParseErrorResponse"];
    PortConfiguration: {
      id: string;
      host: number | null;
      forwarded: number;
    };
    /**
     * @description * `ports` - ports
     * @enum {string}
     */
    PortItemChangeFieldEnum: "ports";
    PortItemChangeRequest: {
      type: components["schemas"]["ItemChangeTypeEnum"];
      item_id?: string;
      new_value?: components["schemas"]["ServicePortsRequestRequest"];
      field: components["schemas"]["PortItemChangeFieldEnum"];
    };
    Project: {
      description: string | null;
      id: string;
      slug: string;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      healthy_services: number;
      total_services: number;
    };
    ProjectCreateRequestRequest: {
      slug?: string;
      description?: string;
    };
    ProjectsServiceDetailsDockerDeploymentsHttpLogsListError: components["schemas"]["ProjectsServiceDetailsDockerDeploymentsHttpLogsListTimeErrorComponent"] | components["schemas"]["ProjectsServiceDetailsDockerDeploymentsHttpLogsListRequestMethodErrorComponent"] | components["schemas"]["ProjectsServiceDetailsDockerDeploymentsHttpLogsListRequestPathErrorComponent"] | components["schemas"]["ProjectsServiceDetailsDockerDeploymentsHttpLogsListRequestHostErrorComponent"] | components["schemas"]["ProjectsServiceDetailsDockerDeploymentsHttpLogsListStatusErrorComponent"] | components["schemas"]["ProjectsServiceDetailsDockerDeploymentsHttpLogsListRequestIpErrorComponent"] | components["schemas"]["ProjectsServiceDetailsDockerDeploymentsHttpLogsListRequestIdErrorComponent"];
    ProjectsServiceDetailsDockerDeploymentsHttpLogsListErrorResponse400: components["schemas"]["ProjectsServiceDetailsDockerDeploymentsHttpLogsListValidationError"] | components["schemas"]["ParseErrorResponse"];
    ProjectsServiceDetailsDockerDeploymentsHttpLogsListRequestHostErrorComponent: {
      /**
       * @description * `request_host` - request_host
       * @enum {string}
       */
      attr: "request_host";
      /**
       * @description * `null_characters_not_allowed` - null_characters_not_allowed
       * @enum {string}
       */
      code: "null_characters_not_allowed";
      detail: string;
    };
    ProjectsServiceDetailsDockerDeploymentsHttpLogsListRequestIdErrorComponent: {
      /**
       * @description * `request_id` - request_id
       * @enum {string}
       */
      attr: "request_id";
      /**
       * @description * `null_characters_not_allowed` - null_characters_not_allowed
       * @enum {string}
       */
      code: "null_characters_not_allowed";
      detail: string;
    };
    ProjectsServiceDetailsDockerDeploymentsHttpLogsListRequestIpErrorComponent: {
      /**
       * @description * `request_ip` - request_ip
       * @enum {string}
       */
      attr: "request_ip";
      /**
       * @description * `null_characters_not_allowed` - null_characters_not_allowed
       * @enum {string}
       */
      code: "null_characters_not_allowed";
      detail: string;
    };
    ProjectsServiceDetailsDockerDeploymentsHttpLogsListRequestMethodErrorComponent: {
      /**
       * @description * `request_method` - request_method
       * @enum {string}
       */
      attr: "request_method";
      /**
       * @description * `invalid_choice` - invalid_choice
       * * `invalid_list` - invalid_list
       * @enum {string}
       */
      code: "invalid_choice" | "invalid_list";
      detail: string;
    };
    ProjectsServiceDetailsDockerDeploymentsHttpLogsListRequestPathErrorComponent: {
      /**
       * @description * `request_path` - request_path
       * @enum {string}
       */
      attr: "request_path";
      /**
       * @description * `null_characters_not_allowed` - null_characters_not_allowed
       * @enum {string}
       */
      code: "null_characters_not_allowed";
      detail: string;
    };
    ProjectsServiceDetailsDockerDeploymentsHttpLogsListStatusErrorComponent: {
      /**
       * @description * `status` - status
       * @enum {string}
       */
      attr: "status";
      /**
       * @description * `invalid` - invalid
       * * `max_value` - max_value
       * @enum {string}
       */
      code: "invalid" | "max_value";
      detail: string;
    };
    ProjectsServiceDetailsDockerDeploymentsHttpLogsListTimeErrorComponent: {
      /**
       * @description * `time` - time
       * @enum {string}
       */
      attr: "time";
      /**
       * @description * `invalid` - invalid
       * @enum {string}
       */
      code: "invalid";
      detail: string;
    };
    ProjectsServiceDetailsDockerDeploymentsHttpLogsListValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["ProjectsServiceDetailsDockerDeploymentsHttpLogsListError"][];
    };
    ProjectsServiceDetailsDockerDeploymentsListError: components["schemas"]["ProjectsServiceDetailsDockerDeploymentsListStatusErrorComponent"] | components["schemas"]["ProjectsServiceDetailsDockerDeploymentsListQueuedAtErrorComponent"];
    ProjectsServiceDetailsDockerDeploymentsListErrorResponse400: components["schemas"]["ProjectsServiceDetailsDockerDeploymentsListValidationError"] | components["schemas"]["ParseErrorResponse"];
    ProjectsServiceDetailsDockerDeploymentsListQueuedAtErrorComponent: {
      /**
       * @description * `queued_at` - queued_at
       * @enum {string}
       */
      attr: "queued_at";
      /**
       * @description * `invalid` - invalid
       * @enum {string}
       */
      code: "invalid";
      detail: string;
    };
    ProjectsServiceDetailsDockerDeploymentsListStatusErrorComponent: {
      /**
       * @description * `status` - status
       * @enum {string}
       */
      attr: "status";
      /**
       * @description * `invalid_choice` - invalid_choice
       * * `invalid_list` - invalid_list
       * @enum {string}
       */
      code: "invalid_choice" | "invalid_list";
      detail: string;
    };
    ProjectsServiceDetailsDockerDeploymentsListValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["ProjectsServiceDetailsDockerDeploymentsListError"][];
    };
    ProjectsServiceDetailsDockerDeploymentsLogsListContentErrorComponent: {
      /**
       * @description * `content` - content
       * @enum {string}
       */
      attr: "content";
      /**
       * @description * `null_characters_not_allowed` - null_characters_not_allowed
       * @enum {string}
       */
      code: "null_characters_not_allowed";
      detail: string;
    };
    ProjectsServiceDetailsDockerDeploymentsLogsListError: components["schemas"]["ProjectsServiceDetailsDockerDeploymentsLogsListLevelErrorComponent"] | components["schemas"]["ProjectsServiceDetailsDockerDeploymentsLogsListContentErrorComponent"] | components["schemas"]["ProjectsServiceDetailsDockerDeploymentsLogsListTimeErrorComponent"] | components["schemas"]["ProjectsServiceDetailsDockerDeploymentsLogsListSourceErrorComponent"];
    ProjectsServiceDetailsDockerDeploymentsLogsListErrorResponse400: components["schemas"]["ProjectsServiceDetailsDockerDeploymentsLogsListValidationError"] | components["schemas"]["ParseErrorResponse"];
    ProjectsServiceDetailsDockerDeploymentsLogsListLevelErrorComponent: {
      /**
       * @description * `level` - level
       * @enum {string}
       */
      attr: "level";
      /**
       * @description * `invalid_choice` - invalid_choice
       * @enum {string}
       */
      code: "invalid_choice";
      detail: string;
    };
    ProjectsServiceDetailsDockerDeploymentsLogsListSourceErrorComponent: {
      /**
       * @description * `source` - source
       * @enum {string}
       */
      attr: "source";
      /**
       * @description * `invalid_choice` - invalid_choice
       * * `invalid_list` - invalid_list
       * @enum {string}
       */
      code: "invalid_choice" | "invalid_list";
      detail: string;
    };
    ProjectsServiceDetailsDockerDeploymentsLogsListTimeErrorComponent: {
      /**
       * @description * `time` - time
       * @enum {string}
       */
      attr: "time";
      /**
       * @description * `invalid` - invalid
       * @enum {string}
       */
      code: "invalid";
      detail: string;
    };
    ProjectsServiceDetailsDockerDeploymentsLogsListValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["ProjectsServiceDetailsDockerDeploymentsLogsListError"][];
    };
    ProjectsServiceDetailsDockerDeploymentsRetrieveErrorResponse400: components["schemas"]["ParseErrorResponse"];
    ProjectsServiceListListErrorResponse400: components["schemas"]["ParseErrorResponse"];
    RedeployDockerServiceErrorResponse400: components["schemas"]["ParseErrorResponse"];
    RequestDeploymentChangesError: components["schemas"]["RequestDeploymentChangesNonFieldErrorsErrorComponent"] | components["schemas"]["RequestDeploymentChangesTypeErrorComponent"] | components["schemas"]["RequestDeploymentChangesItemIdErrorComponent"] | components["schemas"]["RequestDeploymentChangesNewValueNonFieldErrorsErrorComponent"] | components["schemas"]["RequestDeploymentChangesNewValueDomainErrorComponent"] | components["schemas"]["RequestDeploymentChangesNewValueBasePathErrorComponent"] | components["schemas"]["RequestDeploymentChangesNewValueStripPrefixErrorComponent"] | components["schemas"]["RequestDeploymentChangesFieldErrorComponent"] | components["schemas"]["RequestDeploymentChangesNewValueNameErrorComponent"] | components["schemas"]["RequestDeploymentChangesNewValueContainerPathErrorComponent"] | components["schemas"]["RequestDeploymentChangesNewValueHostPathErrorComponent"] | components["schemas"]["RequestDeploymentChangesNewValueModeErrorComponent"] | components["schemas"]["RequestDeploymentChangesNewValueKeyErrorComponent"] | components["schemas"]["RequestDeploymentChangesNewValueValueErrorComponent"] | components["schemas"]["RequestDeploymentChangesNewValueHostErrorComponent"] | components["schemas"]["RequestDeploymentChangesNewValueForwardedErrorComponent"] | components["schemas"]["RequestDeploymentChangesNewValueUsernameErrorComponent"] | components["schemas"]["RequestDeploymentChangesNewValuePasswordErrorComponent"] | components["schemas"]["RequestDeploymentChangesNewValueErrorComponent"] | components["schemas"]["RequestDeploymentChangesNewValueTypeErrorComponent"] | components["schemas"]["RequestDeploymentChangesNewValueTimeoutSecondsErrorComponent"] | components["schemas"]["RequestDeploymentChangesNewValueIntervalSecondsErrorComponent"] | components["schemas"]["RequestDeploymentChangesNewValueCpusErrorComponent"] | components["schemas"]["RequestDeploymentChangesNewValueMemoryNonFieldErrorsErrorComponent"] | components["schemas"]["RequestDeploymentChangesNewValueMemoryValueErrorComponent"] | components["schemas"]["RequestDeploymentChangesNewValueMemoryUnitErrorComponent"];
    RequestDeploymentChangesErrorResponse400: components["schemas"]["RequestDeploymentChangesValidationError"] | components["schemas"]["ParseErrorResponse"];
    RequestDeploymentChangesFieldErrorComponent: {
      /**
       * @description * `field` - field
       * @enum {string}
       */
      attr: "field";
      /**
       * @description * `invalid_choice` - invalid_choice
       * * `null` - null
       * * `required` - required
       * @enum {string}
       */
      code: "invalid_choice" | "null" | "required";
      detail: string;
    };
    RequestDeploymentChangesItemIdErrorComponent: {
      /**
       * @description * `item_id` - item_id
       * @enum {string}
       */
      attr: "item_id";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `max_length` - max_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "max_length" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    RequestDeploymentChangesNewValueBasePathErrorComponent: {
      /**
       * @description * `new_value.base_path` - new_value.base_path
       * @enum {string}
       */
      attr: "new_value.base_path";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    RequestDeploymentChangesNewValueContainerPathErrorComponent: {
      /**
       * @description * `new_value.container_path` - new_value.container_path
       * @enum {string}
       */
      attr: "new_value.container_path";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `max_length` - max_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "max_length" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    RequestDeploymentChangesNewValueCpusErrorComponent: {
      /**
       * @description * `new_value.cpus` - new_value.cpus
       * @enum {string}
       */
      attr: "new_value.cpus";
      /**
       * @description * `invalid` - invalid
       * * `max_string_length` - max_string_length
       * * `min_value` - min_value
       * * `null` - null
       * @enum {string}
       */
      code: "invalid" | "max_string_length" | "min_value" | "null";
      detail: string;
    };
    RequestDeploymentChangesNewValueDomainErrorComponent: {
      /**
       * @description * `new_value.domain` - new_value.domain
       * @enum {string}
       */
      attr: "new_value.domain";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    RequestDeploymentChangesNewValueErrorComponent: {
      /**
       * @description * `new_value` - new_value
       * @enum {string}
       */
      attr: "new_value";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `min_length` - min_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "min_length" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    RequestDeploymentChangesNewValueForwardedErrorComponent: {
      /**
       * @description * `new_value.forwarded` - new_value.forwarded
       * @enum {string}
       */
      attr: "new_value.forwarded";
      /**
       * @description * `invalid` - invalid
       * * `max_string_length` - max_string_length
       * * `null` - null
       * * `required` - required
       * @enum {string}
       */
      code: "invalid" | "max_string_length" | "null" | "required";
      detail: string;
    };
    RequestDeploymentChangesNewValueHostErrorComponent: {
      /**
       * @description * `new_value.host` - new_value.host
       * @enum {string}
       */
      attr: "new_value.host";
      /**
       * @description * `invalid` - invalid
       * * `max_string_length` - max_string_length
       * * `null` - null
       * @enum {string}
       */
      code: "invalid" | "max_string_length" | "null";
      detail: string;
    };
    RequestDeploymentChangesNewValueHostPathErrorComponent: {
      /**
       * @description * `new_value.host_path` - new_value.host_path
       * @enum {string}
       */
      attr: "new_value.host_path";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `max_length` - max_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "max_length" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    RequestDeploymentChangesNewValueIntervalSecondsErrorComponent: {
      /**
       * @description * `new_value.interval_seconds` - new_value.interval_seconds
       * @enum {string}
       */
      attr: "new_value.interval_seconds";
      /**
       * @description * `invalid` - invalid
       * * `max_string_length` - max_string_length
       * * `min_value` - min_value
       * * `null` - null
       * @enum {string}
       */
      code: "invalid" | "max_string_length" | "min_value" | "null";
      detail: string;
    };
    RequestDeploymentChangesNewValueKeyErrorComponent: {
      /**
       * @description * `new_value.key` - new_value.key
       * @enum {string}
       */
      attr: "new_value.key";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    RequestDeploymentChangesNewValueMemoryNonFieldErrorsErrorComponent: {
      /**
       * @description * `new_value.memory.non_field_errors` - new_value.memory.non_field_errors
       * @enum {string}
       */
      attr: "new_value.memory.non_field_errors";
      /**
       * @description * `invalid` - invalid
       * * `null` - null
       * @enum {string}
       */
      code: "invalid" | "null";
      detail: string;
    };
    RequestDeploymentChangesNewValueMemoryUnitErrorComponent: {
      /**
       * @description * `new_value.memory.unit` - new_value.memory.unit
       * @enum {string}
       */
      attr: "new_value.memory.unit";
      /**
       * @description * `invalid_choice` - invalid_choice
       * * `null` - null
       * @enum {string}
       */
      code: "invalid_choice" | "null";
      detail: string;
    };
    RequestDeploymentChangesNewValueMemoryValueErrorComponent: {
      /**
       * @description * `new_value.memory.value` - new_value.memory.value
       * @enum {string}
       */
      attr: "new_value.memory.value";
      /**
       * @description * `invalid` - invalid
       * * `max_string_length` - max_string_length
       * * `min_value` - min_value
       * * `null` - null
       * * `required` - required
       * @enum {string}
       */
      code: "invalid" | "max_string_length" | "min_value" | "null" | "required";
      detail: string;
    };
    RequestDeploymentChangesNewValueModeErrorComponent: {
      /**
       * @description * `new_value.mode` - new_value.mode
       * @enum {string}
       */
      attr: "new_value.mode";
      /**
       * @description * `invalid_choice` - invalid_choice
       * * `null` - null
       * @enum {string}
       */
      code: "invalid_choice" | "null";
      detail: string;
    };
    RequestDeploymentChangesNewValueNameErrorComponent: {
      /**
       * @description * `new_value.name` - new_value.name
       * @enum {string}
       */
      attr: "new_value.name";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `max_length` - max_length
       * * `min_length` - min_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "max_length" | "min_length" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    RequestDeploymentChangesNewValueNonFieldErrorsErrorComponent: {
      /**
       * @description * `new_value.non_field_errors` - new_value.non_field_errors
       * @enum {string}
       */
      attr: "new_value.non_field_errors";
      /**
       * @description * `invalid` - invalid
       * * `null` - null
       * * `required` - required
       * @enum {string}
       */
      code: "invalid" | "null" | "required";
      detail: string;
    };
    RequestDeploymentChangesNewValuePasswordErrorComponent: {
      /**
       * @description * `new_value.password` - new_value.password
       * @enum {string}
       */
      attr: "new_value.password";
      /**
       * @description * `invalid` - invalid
       * * `max_length` - max_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "invalid" | "max_length" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    RequestDeploymentChangesNewValueStripPrefixErrorComponent: {
      /**
       * @description * `new_value.strip_prefix` - new_value.strip_prefix
       * @enum {string}
       */
      attr: "new_value.strip_prefix";
      /**
       * @description * `invalid` - invalid
       * * `null` - null
       * @enum {string}
       */
      code: "invalid" | "null";
      detail: string;
    };
    RequestDeploymentChangesNewValueTimeoutSecondsErrorComponent: {
      /**
       * @description * `new_value.timeout_seconds` - new_value.timeout_seconds
       * @enum {string}
       */
      attr: "new_value.timeout_seconds";
      /**
       * @description * `invalid` - invalid
       * * `max_string_length` - max_string_length
       * * `min_value` - min_value
       * * `null` - null
       * @enum {string}
       */
      code: "invalid" | "max_string_length" | "min_value" | "null";
      detail: string;
    };
    RequestDeploymentChangesNewValueTypeErrorComponent: {
      /**
       * @description * `new_value.type` - new_value.type
       * @enum {string}
       */
      attr: "new_value.type";
      /**
       * @description * `invalid_choice` - invalid_choice
       * * `null` - null
       * * `required` - required
       * @enum {string}
       */
      code: "invalid_choice" | "null" | "required";
      detail: string;
    };
    RequestDeploymentChangesNewValueUsernameErrorComponent: {
      /**
       * @description * `new_value.username` - new_value.username
       * @enum {string}
       */
      attr: "new_value.username";
      /**
       * @description * `invalid` - invalid
       * * `max_length` - max_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "invalid" | "max_length" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    RequestDeploymentChangesNewValueValueErrorComponent: {
      /**
       * @description * `new_value.value` - new_value.value
       * @enum {string}
       */
      attr: "new_value.value";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `max_length` - max_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "max_length" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    RequestDeploymentChangesNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors
       * @enum {string}
       */
      attr: "non_field_errors";
      /**
       * @description * `invalid` - invalid
       * @enum {string}
       */
      code: "invalid";
      detail: string;
    };
    RequestDeploymentChangesTypeErrorComponent: {
      /**
       * @description * `type` - type
       * @enum {string}
       */
      attr: "type";
      /**
       * @description * `invalid_choice` - invalid_choice
       * * `null` - null
       * * `required` - required
       * @enum {string}
       */
      code: "invalid_choice" | "null" | "required";
      detail: string;
    };
    RequestDeploymentChangesValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["RequestDeploymentChangesError"][];
    };
    /**
     * @description * `GET` - GET
     * * `POST` - POST
     * * `PUT` - PUT
     * * `DELETE` - DELETE
     * * `PATCH` - PATCH
     * * `OPTIONS` - OPTIONS
     * * `HEAD` - HEAD
     * @enum {string}
     */
    RequestMethodEnum: "GET" | "POST" | "PUT" | "DELETE" | "PATCH" | "OPTIONS" | "HEAD";
    /**
     * @description * `HTTP/1.0` - HTTP/1.0
     * * `HTTP/1.1` - HTTP/1.1
     * * `HTTP/2.0` - HTTP/2.0
     * * `HTTP/3.0` - HTTP/3.0
     * @enum {string}
     */
    RequestProtocolEnum: "HTTP/1.0" | "HTTP/1.1" | "HTTP/2.0" | "HTTP/3.0";
    /**
     * @description * `resource_limits` - resource_limits
     * @enum {string}
     */
    ResourceLimitChangeFieldEnum: "resource_limits";
    ResourceLimitChangeRequest: {
      /** @default UPDATE */
      type?: components["schemas"]["FieldChangeTypeEnum"];
      new_value: components["schemas"]["ResourceLimitsRequestRequest"] | null;
      field: components["schemas"]["ResourceLimitChangeFieldEnum"];
    };
    ResourceLimits: {
      /** Format: double */
      cpus: number | null;
      memory: components["schemas"]["MemoryLimit"] | null;
    };
    ResourceLimitsRequestRequest: {
      /** Format: double */
      cpus?: number;
      memory?: components["schemas"]["MemoryLimitRequestRequest"];
    };
    SearchDockerRegistryErrorResponse400: components["schemas"]["ParseErrorResponse"];
    ServiceCardResponse: components["schemas"]["DockerServiceCard"] | components["schemas"]["GitServiceCard"];
    ServicePortsRequestRequest: {
      /** @default 80 */
      host?: number;
      forwarded: number;
    };
    /**
     * @description * `HEALTHY` - Healthy
     * * `UNHEALTHY` - Unhealthy
     * * `SLEEPING` - Sleeping
     * * `NOT_DEPLOYED_YET` - Not deployed yet
     * * `DEPLOYING` - Deploying
     * @enum {string}
     */
    ServiceStatusEnum: "HEALTHY" | "UNHEALTHY" | "SLEEPING" | "NOT_DEPLOYED_YET" | "DEPLOYING";
    SimpleLog: {
      /** Format: uuid */
      id: string;
      content: unknown;
      /** Format: date-time */
      time: string;
      level: components["schemas"]["LevelEnum"];
      deployment_id: string | null;
      service_id: string | null;
      source: components["schemas"]["SourceEnum"];
    };
    /**
     * @description * `BLUE` - Blue
     * * `GREEN` - Green
     * @enum {string}
     */
    SlotEnum: "BLUE" | "GREEN";
    /**
     * @description * `SYSTEM` - System Logs
     * * `PROXY` - Proxy Logs
     * * `SERVICE` - Service Logs
     * @enum {string}
     */
    SourceEnum: "SYSTEM" | "PROXY" | "SERVICE";
    ToggleDockerServiceErrorResponse400: components["schemas"]["ParseErrorResponse"];
    /**
     * @description * `urls` - urls
     * @enum {string}
     */
    URLItemChangeFieldEnum: "urls";
    URLItemChangeRequest: {
      type: components["schemas"]["ItemChangeTypeEnum"];
      item_id?: string;
      new_value?: components["schemas"]["URLRequestRequest"];
      field: components["schemas"]["URLItemChangeFieldEnum"];
    };
    URLModel: {
      id: string;
      domain: string | null;
      /** @default / */
      base_path: string;
      strip_prefix: boolean;
    };
    URLRequestRequest: {
      domain: string;
      /** @default / */
      base_path?: string;
      /** @default true */
      strip_prefix?: boolean;
    };
    /**
     * @description * `BYTES` - bytes
     * * `KILOBYTES` - kilobytes
     * * `MEGABYTES` - megabytes
     * * `GIGABYTES` - gigabytes
     * @enum {string}
     */
    UnitEnum: "BYTES" | "KILOBYTES" | "MEGABYTES" | "GIGABYTES";
    UpdateProjectDescriptionErrorComponent: {
      /**
       * @description * `description` - description
       * @enum {string}
       */
      attr: "description";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    UpdateProjectError: components["schemas"]["UpdateProjectNonFieldErrorsErrorComponent"] | components["schemas"]["UpdateProjectSlugErrorComponent"] | components["schemas"]["UpdateProjectDescriptionErrorComponent"];
    UpdateProjectErrorResponse400: components["schemas"]["UpdateProjectValidationError"] | components["schemas"]["ParseErrorResponse"];
    UpdateProjectNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors
       * @enum {string}
       */
      attr: "non_field_errors";
      /**
       * @description * `invalid` - invalid
       * @enum {string}
       */
      code: "invalid";
      detail: string;
    };
    UpdateProjectSlugErrorComponent: {
      /**
       * @description * `slug` - slug
       * @enum {string}
       */
      attr: "slug";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `max_length` - max_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "max_length" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    UpdateProjectValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["UpdateProjectError"][];
    };
    User: {
      /** @description Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. */
      username: string;
      first_name: string;
      last_name: string;
    };
    /**
     * @description * `validation_error` - Validation Error
     * @enum {string}
     */
    ValidationErrorEnum: "validation_error";
    Volume: {
      id: string;
      name: string;
      container_path: string;
      host_path: string | null;
      mode: components["schemas"]["VolumeModeEnum"];
    };
    /**
     * @description * `volumes` - volumes
     * @enum {string}
     */
    VolumeItemChangeFieldEnum: "volumes";
    VolumeItemChangeRequest: {
      type: components["schemas"]["ItemChangeTypeEnum"];
      item_id?: string;
      new_value?: components["schemas"]["VolumeRequestRequest"];
      field: components["schemas"]["VolumeItemChangeFieldEnum"];
    };
    /**
     * @description * `READ_ONLY` - Read-Only
     * * `READ_WRITE` - Read-Write
     * @enum {string}
     */
    VolumeModeEnum: "READ_ONLY" | "READ_WRITE";
    /**
     * @description * `READ_ONLY` - READ_ONLY
     * * `READ_WRITE` - READ_WRITE
     * @enum {string}
     */
    VolumeRequestModeEnum: "READ_ONLY" | "READ_WRITE";
    VolumeRequestRequest: {
      name?: string;
      container_path: string;
      host_path?: string;
      mode?: components["schemas"]["VolumeRequestModeEnum"];
    };
    _proxyLogsListContentErrorComponent: {
      /**
       * @description * `content` - content
       * @enum {string}
       */
      attr: "content";
      /**
       * @description * `null_characters_not_allowed` - null_characters_not_allowed
       * @enum {string}
       */
      code: "null_characters_not_allowed";
      detail: string;
    };
    _proxyLogsListError: components["schemas"]["_proxyLogsListLevelErrorComponent"] | components["schemas"]["_proxyLogsListContentErrorComponent"] | components["schemas"]["_proxyLogsListTimeErrorComponent"];
    _proxyLogsListErrorResponse400: components["schemas"]["_proxyLogsListValidationError"] | components["schemas"]["ParseErrorResponse"];
    _proxyLogsListLevelErrorComponent: {
      /**
       * @description * `level` - level
       * @enum {string}
       */
      attr: "level";
      /**
       * @description * `invalid_choice` - invalid_choice
       * @enum {string}
       */
      code: "invalid_choice";
      detail: string;
    };
    _proxyLogsListTimeErrorComponent: {
      /**
       * @description * `time` - time
       * @enum {string}
       */
      attr: "time";
      /**
       * @description * `invalid` - invalid
       * @enum {string}
       */
      code: "invalid";
      detail: string;
    };
    _proxyLogsListValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["_proxyLogsListError"][];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /** Get caddy proxy logs */
  _proxy_logs_list: {
    parameters: {
      query?: {
        content?: string;
        /** @description The pagination cursor value. */
        cursor?: string;
        /**
         * @description * `ERROR` - Error
         * * `INFO` - Info
         */
        level?: "ERROR" | "INFO";
        /** @description Number of results to return per page. */
        per_page?: number;
        time_after?: string;
        time_before?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedSimpleLogList"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["_proxyLogsListErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /** List archived projects */
  getArchivedProjectList: {
    parameters: {
      query?: {
        /** @description A page number within the paginated result set. */
        page?: number;
        /** @description Number of results to return per page. */
        per_page?: number;
        slug?: string;
        /**
         * @description Ordering
         *
         * * `slug` - name
         * * `-slug` - name (descending)
         * * `archived_at` - Archived at
         * * `-archived_at` - Archived at (descending)
         */
        sort_by?: ("-archived_at" | "-slug" | "archived_at" | "slug")[];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedArchivedProjectList"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["GetArchivedProjectListErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /**
   * Login
   * @description Authenticate User, what is returned is a cookie named `sessionid` that will be used for authentication of the next requests.
   */
  login: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["LoginRequestRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["LoginRequestRequest"];
        "multipart/form-data": components["schemas"]["LoginRequestRequest"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["LoginSuccessResponse"];
        };
      };
      /** @description No response body */
      302: {
        content: never;
      };
      400: {
        content: {
          "application/json": components["schemas"]["LoginErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /** Logout */
  logout: {
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
      400: {
        content: {
          "application/json": components["schemas"]["LogoutErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /**
   * Get current user
   * @description Get current authenticated user.
   */
  getAuthedUser: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["AuthedSuccessResponse"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["GetAuthedUserErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /**
   * Get CSRF cookie
   * @description CSRF cookie endpoint for retrieving a CSRF token before doing mutative requests (`DELETE`, `POST`, `PUT`, `PATCH`).You need to pass the cookie named `csrftoken` to all requests alongside a `X-CSRFToken` with the value of the token.
   */
  getCSRF: {
    responses: {
      400: {
        content: {
          "application/json": components["schemas"]["GetCSRFErrorResponse400"];
        };
      };
      /** @description No response body */
      401: {
        content: never;
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /**
   * Check Port
   * @description Check If Port is available on host machine
   */
  checkIfPortIsAvailable: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["DockerPortCheckRequestRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["DockerPortCheckRequestRequest"];
        "multipart/form-data": components["schemas"]["DockerPortCheckRequestRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DockerPortCheckResponse"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["CheckIfPortIsAvailableErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /**
   * Search docker hub
   * @description Search a docker Image in docker hub Registry
   */
  searchDockerRegistry: {
    parameters: {
      query: {
        q: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DockerImageSearchResponse"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["SearchDockerRegistryErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /**
   * Get Root Domain
   * @description Get the root domain used by ZaneOps to generate automatic subdomains for services.
   */
  getRootDomain: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["GetRootDomain"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["GetRootDomainErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /**
   * Ping
   * @description simple healthcheck endpoint.
   */
  ping: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PING"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["PingErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /** List all active projects */
  getProjectList: {
    parameters: {
      query?: {
        /** @description A page number within the paginated result set. */
        page?: number;
        /** @description Number of results to return per page. */
        per_page?: number;
        slug?: string;
        /**
         * @description Ordering
         *
         * * `slug` - name
         * * `-slug` - name (descending)
         * * `updated_at` - Updated at
         * * `-updated_at` - Updated at (descending)
         */
        sort_by?: ("-slug" | "-updated_at" | "slug" | "updated_at")[];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedProjectList"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["GetProjectListErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /** Create a new project */
  createProject: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ProjectCreateRequestRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["ProjectCreateRequestRequest"];
        "multipart/form-data": components["schemas"]["ProjectCreateRequestRequest"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Project"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["CreateProjectErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponse409"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /**
   * Archive a docker service
   * @description Archive a service created from a docker image.
   */
  archiveDockerService: {
    parameters: {
      path: {
        project_slug: string;
        service_slug: string;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
      400: {
        content: {
          "application/json": components["schemas"]["ArchiveDockerServiceErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /**
   * Cancel deployment
   * @description Cancel a deployment in progress.
   */
  cancelDockerServiceDeployment: {
    parameters: {
      path: {
        deployment_hash: string;
        project_slug: string;
        service_slug: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DockerService"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["CancelDockerServiceDeploymentErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponse409"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /**
   * Cancel a config change
   * @description Cancel a config change that was requested.
   */
  cancelDeploymentChanges: {
    parameters: {
      path: {
        change_id: string;
        project_slug: string;
        service_slug: string;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
      400: {
        content: {
          "application/json": components["schemas"]["CancelDeploymentChangesErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponse409"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /**
   * Create a docker service
   * @description Create a service from a docker image.
   */
  createDockerService: {
    parameters: {
      path: {
        project_slug: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DockerServiceCreateRequestRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["DockerServiceCreateRequestRequest"];
        "multipart/form-data": components["schemas"]["DockerServiceCreateRequestRequest"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["DockerService"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["CreateDockerServiceErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponse409"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /**
   * Deploy a docker service
   * @description Apply all pending changes for the service and trigger a new deployment.
   */
  applyDeploymentChanges: {
    parameters: {
      path: {
        project_slug: string;
        service_slug: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["DockerServiceDeployServiceRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["DockerServiceDeployServiceRequest"];
        "multipart/form-data": components["schemas"]["DockerServiceDeployServiceRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DockerServiceDeployment"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ApplyDeploymentChangesErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /**
   * Redeploy a docker service
   * @description Revert the service to the state of a previous deployment.
   */
  redeployDockerService: {
    parameters: {
      path: {
        deployment_hash: string;
        project_slug: string;
        service_slug: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DockerServiceDeployment"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["RedeployDockerServiceErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /**
   * Request config changes
   * @description Request a change to the configuration of a service.
   */
  requestDeploymentChanges: {
    parameters: {
      path: {
        project_slug: string;
        service_slug: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["DeploymentChangeRequestRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["DeploymentChangeRequestRequest"];
        "multipart/form-data": components["schemas"]["DeploymentChangeRequestRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DockerService"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["RequestDeploymentChangesErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /**
   * Get single service
   * @description See all the details of a service.
   */
  getDockerService: {
    parameters: {
      path: {
        project_slug: string;
        service_slug: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DockerService"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["GetDockerServiceErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /**
   * List all deployments
   * @description List all deployments for a service, the default order is last created descendant.
   */
  projects_service_details_docker_deployments_list: {
    parameters: {
      query?: {
        /** @description A page number within the paginated result set. */
        page?: number;
        /** @description Number of results to return per page. */
        per_page?: number;
        queued_at_after?: string;
        queued_at_before?: string;
        /**
         * @description * `QUEUED` - Queued
         * * `CANCELLED` - Cancelled
         * * `FAILED` - Failed
         * * `PREPARING` - Preparing
         * * `STARTING` - Starting
         * * `RESTARTING` - Restarting
         * * `HEALTHY` - Healthy
         * * `UNHEALTHY` - Unhealthy
         * * `REMOVED` - Removed
         * * `SLEEPING` - Sleeping
         */
        status?: ("CANCELLED" | "FAILED" | "HEALTHY" | "PREPARING" | "QUEUED" | "REMOVED" | "RESTARTING" | "SLEEPING" | "STARTING" | "UNHEALTHY")[];
      };
      path: {
        project_slug: string;
        service_slug: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedDockerServiceDeploymentList"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ProjectsServiceDetailsDockerDeploymentsListErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /** Get single deployment */
  projects_service_details_docker_deployments_retrieve: {
    parameters: {
      path: {
        deployment_hash: string;
        project_slug: string;
        service_slug: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DockerServiceDeployment"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ProjectsServiceDetailsDockerDeploymentsRetrieveErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /** Get deployment HTTP logs */
  projects_service_details_docker_deployments_http_logs_list: {
    parameters: {
      query?: {
        /** @description The pagination cursor value. */
        cursor?: string;
        /** @description Number of results to return per page. */
        per_page?: number;
        request_host?: string;
        request_id?: string;
        request_ip?: string;
        /**
         * @description * `GET` - GET
         * * `POST` - POST
         * * `PUT` - PUT
         * * `DELETE` - DELETE
         * * `PATCH` - PATCH
         * * `OPTIONS` - OPTIONS
         * * `HEAD` - HEAD
         */
        request_method?: ("DELETE" | "GET" | "HEAD" | "OPTIONS" | "PATCH" | "POST" | "PUT")[];
        request_path?: string;
        status?: number;
        time_after?: string;
        time_before?: string;
      };
      path: {
        deployment_hash: string;
        project_slug: string;
        service_slug: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedHttpLogList"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ProjectsServiceDetailsDockerDeploymentsHttpLogsListErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /** Get deployment logs */
  projects_service_details_docker_deployments_logs_list: {
    parameters: {
      query?: {
        content?: string;
        /** @description The pagination cursor value. */
        cursor?: string;
        /**
         * @description * `ERROR` - Error
         * * `INFO` - Info
         */
        level?: "ERROR" | "INFO";
        /** @description Number of results to return per page. */
        per_page?: number;
        /**
         * @description * `SYSTEM` - System Logs
         * * `PROXY` - Proxy Logs
         * * `SERVICE` - Service Logs
         */
        source?: ("PROXY" | "SERVICE" | "SYSTEM")[];
        time_after?: string;
        time_before?: string;
      };
      path: {
        deployment_hash: string;
        project_slug: string;
        service_slug: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedSimpleLogList"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ProjectsServiceDetailsDockerDeploymentsLogsListErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /**
   * Stop/Restart a docker service
   * @description Stops a running docker service and restart it if it was stopped.
   */
  toggleDockerService: {
    parameters: {
      path: {
        project_slug: string;
        service_slug: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DockerServiceDeployment"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ToggleDockerServiceErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponse409"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /** Get single project */
  getSingleProject: {
    parameters: {
      path: {
        slug: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Project"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["GetSingleProjectErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /** Archive a Project */
  archiveSingleProject: {
    parameters: {
      path: {
        slug: string;
      };
    };
    responses: {
      /** @description No response body */
      200: {
        content: never;
      };
      400: {
        content: {
          "application/json": components["schemas"]["ArchiveSingleProjectErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /** Update a project */
  updateProject: {
    parameters: {
      path: {
        slug: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedProjectUpdateRequestRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedProjectUpdateRequestRequest"];
        "multipart/form-data": components["schemas"]["PatchedProjectUpdateRequestRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Project"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["UpdateProjectErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /**
   * Get service list
   * @description Get all services in a project
   */
  projects_service_list_list: {
    parameters: {
      query?: {
        query?: string;
      };
      path: {
        slug: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ServiceCardResponse"][];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ProjectsServiceListListErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
}
