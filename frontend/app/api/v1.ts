/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/auth/change-password/": {
    /**
     * Change user password
     * @description Change the authenticated user's password. Requires current password verification and validates new password strength.
     */
    post: operations["changePassword"];
  };
  "/api/auth/check-user-existence/": {
    /**
     * Check if a user exists
     * @description Returns whether a single user already exists in the system.
     */
    get: operations["auth_check_user_existence_retrieve"];
  };
  "/api/auth/create-initial-user/": {
    /**
     * Create a user
     * @description Creates a new user if no user exists.
     */
    post: operations["auth_create_initial_user_create"];
  };
  "/api/auth/login/": {
    /**
     * Login
     * @description Authenticate User, what is returned is a cookie named `sessionid` that will be used for authentication of the next requests.
     */
    post: operations["login"];
  };
  "/api/auth/logout/": {
    /** Logout */
    delete: operations["logout"];
  };
  "/api/auth/me/": {
    /**
     * Get current user
     * @description Get current authenticated user.
     */
    get: operations["getAuthedUser"];
  };
  "/api/auth/update-profile/": {
    /**
     * Update user profile
     * @description Update the authenticated user's profile information including username, first name, and last name.
     */
    patch: operations["updateProfile"];
  };
  "/api/connectors/{id}/": {
    get: operations["connectors_retrieve"];
    delete: operations["connectors_destroy"];
  };
  "/api/connectors/{id}/paginated-repositories/": {
    /** List all repositories for a git app (paginated) */
    get: operations["listGitAppRepositoriesPaginated"];
  };
  "/api/connectors/{id}/repositories/": {
    /** List all repositories for a git app */
    get: operations["listGitAppRepositories"];
  };
  "/api/connectors/github/{id}/": {
    get: operations["connectors_github_retrieve"];
    patch: operations["connectors_github_partial_update"];
  };
  "/api/connectors/github/{id}/test/": {
    get: operations["testGithubApp"];
  };
  "/api/connectors/github/setup/": {
    /** setup github app */
    get: operations["setupGithubApp"];
  };
  "/api/connectors/gitlab/{id}/": {
    get: operations["connectors_gitlab_retrieve"];
  };
  "/api/connectors/gitlab/{id}/sync-repositories/": {
    /** Sync GitLab repositories for a GitLab application */
    put: operations["syncGitlabRepos"];
  };
  "/api/connectors/gitlab/{id}/test/": {
    get: operations["testGitlabApp"];
  };
  "/api/connectors/gitlab/{id}/update/": {
    put: operations["connectors_gitlab_update_update"];
  };
  "/api/connectors/gitlab/create/": {
    /** create a gitlab app */
    post: operations["createGitlabApp"];
  };
  "/api/connectors/gitlab/setup/": {
    /** Set a gitlab app */
    get: operations["setupGitlabApp"];
  };
  "/api/connectors/list/": {
    /** List all git apps */
    get: operations["listGitApps"];
  };
  "/api/connectors/repository-branches/": {
    /** List all the branches of a repository */
    get: operations["listGitRepoBranches"];
  };
  "/api/csrf/": {
    /**
     * Get CSRF cookie
     * @description CSRF cookie endpoint for retrieving a CSRF token before doing mutative requests (`DELETE`, `POST`, `PUT`, `PATCH`).You need to pass the cookie named `csrftoken` to all requests alongside a `X-CSRFToken` with the value of the token.
     */
    get: operations["getCSRF"];
  };
  "/api/deploy-service/docker/{deploy_token}/": {
    /**
     * Webhook to deploy a docker service
     * @description trigger a new deployment.
     */
    put: operations["webhookDockerDeployService"];
  };
  "/api/deploy-service/git/{deploy_token}/": {
    /**
     * Webhook to deploy a git service
     * @description trigger a new deployment.
     */
    put: operations["webhookGitDeployService"];
  };
  "/api/docker/image-search/": {
    /**
     * Search docker hub
     * @description Search a docker Image in docker hub Registry
     */
    get: operations["searchDockerRegistry"];
  };
  "/api/ping/": {
    /**
     * Ping
     * @description simple healthcheck endpoint.
     */
    get: operations["ping"];
  };
  "/api/projects/": {
    /** List all active projects */
    get: operations["getProjectList"];
    /** Create a new project */
    post: operations["createProject"];
  };
  "/api/projects/{project_slug}/{env_slug}/archive-service/docker/{service_slug}/": {
    /**
     * Archive a service
     * @description Archive a service.
     */
    delete: operations["archiveService"];
  };
  "/api/projects/{project_slug}/{env_slug}/archive-service/git/{service_slug}/": {
    /**
     * Archive a git service
     * @description Archive a git service.
     */
    delete: operations["archiveGitService"];
  };
  "/api/projects/{project_slug}/{env_slug}/bulk-deploy-services/": {
    /**
     * Bulk deploy services
     * @description Deploy all selected services in an environment
     */
    put: operations["bulkDeployServices"];
  };
  "/api/projects/{project_slug}/{env_slug}/bulk-toggle-services/": {
    /**
     * Stop/Restart multiple services
     * @description Stops a running docker service and restart it if it was stopped.
     */
    put: operations["bulkToggleServices"];
  };
  "/api/projects/{project_slug}/{env_slug}/cancel-deployment/{service_slug}/{deployment_hash}/": {
    /**
     * Cancel deployment
     * @description Cancel a deployment in progress.
     */
    put: operations["cancelServiceDeployment"];
  };
  "/api/projects/{project_slug}/{env_slug}/cancel-service-changes/{service_slug}/{change_id}/": {
    /**
     * Cancel a config change
     * @description Cancel a config change that was requested.
     */
    delete: operations["cancelServiceChanges"];
  };
  "/api/projects/{project_slug}/{env_slug}/create-service/docker/": {
    /**
     * Create a docker service
     * @description Create a service from a docker image.
     */
    post: operations["createDockerService"];
  };
  "/api/projects/{project_slug}/{env_slug}/create-service/git/": {
    /**
     * Create a docker service
     * @description Create a service from a docker image.
     */
    post: operations["createGitService"];
  };
  "/api/projects/{project_slug}/{env_slug}/deploy-service/docker/{service_slug}/": {
    /**
     * Deploy a docker service
     * @description Apply all pending changes for the service and trigger a new deployment.
     */
    put: operations["deployDockerService"];
  };
  "/api/projects/{project_slug}/{env_slug}/deploy-service/git/{service_slug}/": {
    /**
     * Deploy a git service
     * @description Apply all pending changes for the service and trigger a new deployment.
     */
    put: operations["deployGitService"];
  };
  "/api/projects/{project_slug}/{env_slug}/redeploy-service/docker/{service_slug}/{deployment_hash}/": {
    /**
     * Redeploy a docker service
     * @description Revert the service to the state of a previous deployment.
     */
    put: operations["redeployDockerService"];
  };
  "/api/projects/{project_slug}/{env_slug}/redeploy-service/git/{service_slug}/{deployment_hash}/": {
    /**
     * Redeploy a git service
     * @description Revert the service to the state of a previous deployment.
     */
    put: operations["reDeployGitService"];
  };
  "/api/projects/{project_slug}/{env_slug}/request-env-changes/{service_slug}/": {
    /**
     * Request env changes
     * @description Request a change to the environments variables of a service.
     */
    put: operations["requestEnvChanges"];
  };
  "/api/projects/{project_slug}/{env_slug}/request-service-changes/{service_slug}/": {
    /**
     * Request config changes
     * @description Request a change to the configuration of a service.
     */
    put: operations["requestServiceChanges"];
  };
  "/api/projects/{project_slug}/{env_slug}/service-details/{service_slug}/cleanup-deployment-queue/": {
    /**
     * Cleanup Deployment queue
     * @description Cleanup the current running deployment queue
     */
    put: operations["cleanupDeploymentQueue"];
  };
  "/api/projects/{project_slug}/{env_slug}/service-details/{service_slug}/deployments/": {
    /**
     * List all deployments
     * @description List all deployments for a service, the default order is last created descendant.
     */
    get: operations["projects_service_details_deployments_list"];
  };
  "/api/projects/{project_slug}/{env_slug}/service-details/{service_slug}/deployments/{deployment_hash}/": {
    /** Get single deployment */
    get: operations["projects_service_details_deployments_retrieve"];
  };
  "/api/projects/{project_slug}/{env_slug}/service-details/{service_slug}/deployments/{deployment_hash}/build-logs/": {
    /** Get deployment build logs */
    get: operations["projects_service_details_deployments_build_logs_retrieve"];
  };
  "/api/projects/{project_slug}/{env_slug}/service-details/{service_slug}/deployments/{deployment_hash}/http-logs/": {
    /** Get deployment HTTP logs */
    get: operations["projects_service_details_deployments_http_logs_list"];
  };
  "/api/projects/{project_slug}/{env_slug}/service-details/{service_slug}/deployments/{deployment_hash}/http-logs/{request_uuid}/": {
    /** Get single deployment http log */
    get: operations["projects_service_details_deployments_http_logs_retrieve"];
  };
  "/api/projects/{project_slug}/{env_slug}/service-details/{service_slug}/deployments/{deployment_hash}/http-logs/fields/": {
    /** Get deployment http logs fields values */
    get: operations["projects_service_details_deployments_http_logs_fields_list"];
  };
  "/api/projects/{project_slug}/{env_slug}/service-details/{service_slug}/deployments/{deployment_hash}/metrics/": {
    /** Get service or deployment metrics */
    get: operations["projects_service_details_deployments_metrics_list"];
  };
  "/api/projects/{project_slug}/{env_slug}/service-details/{service_slug}/deployments/{deployment_hash}/runtime-logs/": {
    /** Get deployment logs */
    get: operations["projects_service_details_deployments_runtime_logs_retrieve"];
  };
  "/api/projects/{project_slug}/{env_slug}/service-details/{service_slug}/http-logs/": {
    /** Get service HTTP logs */
    get: operations["projects_service_details_http_logs_list"];
  };
  "/api/projects/{project_slug}/{env_slug}/service-details/{service_slug}/http-logs/{request_uuid}/": {
    /** Get single service http log */
    get: operations["projects_service_details_http_logs_retrieve"];
  };
  "/api/projects/{project_slug}/{env_slug}/service-details/{service_slug}/http-logs/fields/": {
    /** Get service http logs fields values */
    get: operations["projects_service_details_http_logs_fields_list"];
  };
  "/api/projects/{project_slug}/{env_slug}/service-details/{service_slug}/metrics/": {
    /** Get service or deployment metrics */
    get: operations["projects_service_details_metrics_list"];
  };
  "/api/projects/{project_slug}/{env_slug}/service-details/{service_slug}/regenerate-deploy-token/": {
    /** Regenerate service deploy token */
    patch: operations["regenerateServiceDeployToken"];
  };
  "/api/projects/{project_slug}/{env_slug}/service-details/{slug}/": {
    /**
     * Get single service
     * @description See all the details of a service.
     */
    get: operations["getSingleService"];
    /** Update a service */
    patch: operations["updateService"];
  };
  "/api/projects/{project_slug}/{env_slug}/toggle-service/{service_slug}/": {
    /**
     * Stop/Restart a docker service
     * @description Stops a running docker service and restart it if it was stopped.
     */
    put: operations["toggleService"];
  };
  "/api/projects/{project_slug}/{env_slug}/variables/": {
    get: operations["projects_variables_list"];
    post: operations["projects_variables_create"];
  };
  "/api/projects/{project_slug}/{env_slug}/variables/{id}/": {
    get: operations["projects_variables_retrieve"];
    put: operations["projects_variables_update"];
    delete: operations["projects_variables_destroy"];
    patch: operations["projects_variables_partial_update"];
  };
  "/api/projects/{project_slug}/preview-templates/{template_slug}/": {
    get: operations["projects_preview_templates_retrieve"];
    delete: operations["projects_preview_templates_destroy"];
    patch: operations["projects_preview_templates_partial_update"];
  };
  "/api/projects/{slug}/": {
    /** Get single project */
    get: operations["getSingleProject"];
    /** Archive a Project */
    delete: operations["archiveSingleProject"];
    /** Update a project */
    patch: operations["updateProject"];
  };
  "/api/projects/{slug}/{env_slug}/service-list/": {
    /**
     * Get service list
     * @description Get all services in a project
     */
    get: operations["projects_service_list_list"];
  };
  "/api/projects/{slug}/clone-environment/{env_slug}/": {
    /**
     * Clone environment
     * @description Create new environment from another
     */
    post: operations["cloneEnvironment"];
  };
  "/api/projects/{slug}/create-environment/": {
    /**
     * Create new environment
     * @description Create empty environment with no services in it
     */
    post: operations["createNewEnvironment"];
  };
  "/api/projects/{slug}/environment-details/{env_slug}/": {
    /** Get a single environment */
    get: operations["getEnvironment"];
    /**
     * Archive environment
     * @description Archive environment with the services inside of it
     */
    delete: operations["archiveEnvironment"];
    /** Update an environment */
    patch: operations["updateEnvironment"];
  };
  "/api/projects/{slug}/environment-details/{env_slug}/review-preview-deployment/": {
    /** Get the preview deployment */
    get: operations["getPreviewEnvToReview"];
    /** Approve or Decline the execution of the deployment of a preview environment */
    post: operations["reviewPreviewEnvDeploy"];
  };
  "/api/projects/{slug}/preview-templates/": {
    get: operations["projects_preview_templates_list"];
    post: operations["projects_preview_templates_create"];
  };
  "/api/recent-deployments/": {
    /**
     * List recent deployments
     * @description List the 10 most recent deployments made on this instance.
     */
    get: operations["recent_deployments_list"];
  };
  "/api/search-resources/": {
    /** search for resources (project, service, environment ...) */
    get: operations["searchResources"];
  };
  "/api/server/resource-limits/": {
    /**
     * Get server resource limits
     * @description Get the number of CPUS & memory of the server.
     */
    get: operations["getServerResouceLimits"];
  };
  "/api/settings/": {
    /**
     * Get API settings
     * @description Get the settings of the API.
     */
    get: operations["getAPISettings"];
  };
  "/api/shell/ssh-keys/": {
    /** List all ssh keys */
    get: operations["getSSHKeyList"];
    /** Create a new SSH key */
    post: operations["createSSHKey"];
  };
  "/api/shell/ssh-keys/{slug}/": {
    get: operations["shell_ssh_keys_retrieve"];
    delete: operations["shell_ssh_keys_destroy"];
  };
  "/api/trigger-preview/{deploy_token}/": {
    /** Webhook to trigger a new preview environment */
    post: operations["webhookTriggerPreviewEnv"];
  };
  "/api/trigger-update/": {
    /**
     * Trigger Auto-Update
     * @description Triggers the Docker auto-update workflow using Temporal.
     */
    post: operations["trigger_update_create"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    ArchiveEnvironmentErrorResponse400: components["schemas"]["ParseErrorResponse"];
    ArchiveGitServiceErrorResponse400: components["schemas"]["ParseErrorResponse"];
    ArchiveServiceErrorResponse400: components["schemas"]["ParseErrorResponse"];
    ArchiveSingleProjectErrorResponse400: components["schemas"]["ParseErrorResponse"];
    AuthCheckUserExistenceRetrieveErrorResponse400: components["schemas"]["ParseErrorResponse"];
    AuthCreateInitialUserCreateError: components["schemas"]["AuthCreateInitialUserCreateNonFieldErrorsErrorComponent"] | components["schemas"]["AuthCreateInitialUserCreateUsernameErrorComponent"] | components["schemas"]["AuthCreateInitialUserCreatePasswordErrorComponent"];
    AuthCreateInitialUserCreateErrorResponse400: components["schemas"]["AuthCreateInitialUserCreateValidationError"] | components["schemas"]["ParseErrorResponse"];
    AuthCreateInitialUserCreateNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors
       * @enum {string}
       */
      attr: "non_field_errors";
      /**
       * @description * `invalid` - invalid
       * @enum {string}
       */
      code: "invalid";
      detail: string;
    };
    AuthCreateInitialUserCreatePasswordErrorComponent: {
      /**
       * @description * `password` - password
       * @enum {string}
       */
      attr: "password";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `min_length` - min_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "min_length" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    AuthCreateInitialUserCreateUsernameErrorComponent: {
      /**
       * @description * `username` - username
       * @enum {string}
       */
      attr: "username";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `max_length` - max_length
       * * `min_length` - min_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "max_length" | "min_length" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    AuthCreateInitialUserCreateValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["AuthCreateInitialUserCreateError"][];
    };
    AuthedSuccessResponse: {
      user: components["schemas"]["User"];
    };
    AutoUpdateRequestRequest: {
      desired_version: string;
    };
    AutoUpdateResponse: {
      message: string;
    };
    BuilderRequestRequest: {
      /** @default DOCKERFILE */
      builder?: components["schemas"]["GitServiceBuilderEnum"];
      /** @default ./ */
      build_context_dir?: string;
      /** @default ./Dockerfile */
      dockerfile_path?: string;
      build_stage_target?: string | null;
      /** @default ./ */
      publish_directory?: string;
      /** @default false */
      is_spa?: boolean;
      not_found_page?: string | null;
      /** @default ./index.html */
      index_page?: string;
      /** @default false */
      is_static?: boolean;
      /** @default ./ */
      build_directory?: string;
      custom_install_command?: string | null;
      custom_build_command?: string | null;
      custom_start_command?: string | null;
    };
    BulkDeployServiceRequestRequest: {
      service_ids: string[];
    };
    BulkDeployServicesError: components["schemas"]["BulkDeployServicesNonFieldErrorsErrorComponent"] | components["schemas"]["BulkDeployServicesServiceIdsErrorComponent"] | components["schemas"]["BulkDeployServicesServiceIdsINDEXErrorComponent"];
    BulkDeployServicesErrorResponse400: components["schemas"]["BulkDeployServicesValidationError"] | components["schemas"]["ParseErrorResponse"];
    BulkDeployServicesNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors
       * @enum {string}
       */
      attr: "non_field_errors";
      /**
       * @description * `invalid` - invalid
       * @enum {string}
       */
      code: "invalid";
      detail: string;
    };
    BulkDeployServicesServiceIdsErrorComponent: {
      /**
       * @description * `service_ids` - service_ids
       * @enum {string}
       */
      attr: "service_ids";
      /**
       * @description * `not_a_list` - not_a_list
       * * `null` - null
       * * `required` - required
       * @enum {string}
       */
      code: "not_a_list" | "null" | "required";
      detail: string;
    };
    BulkDeployServicesServiceIdsINDEXErrorComponent: {
      /**
       * @description * `service_ids.INDEX` - service_ids.INDEX
       * @enum {string}
       */
      attr: "service_ids.INDEX";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    BulkDeployServicesValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["BulkDeployServicesError"][];
    };
    BulkToggleServiceStateRequestRequest: {
      desired_state: components["schemas"]["DesiredStateEnum"];
      service_ids: string[];
    };
    BulkToggleServicesDesiredStateErrorComponent: {
      /**
       * @description * `desired_state` - desired_state
       * @enum {string}
       */
      attr: "desired_state";
      /**
       * @description * `invalid_choice` - invalid_choice
       * * `null` - null
       * * `required` - required
       * @enum {string}
       */
      code: "invalid_choice" | "null" | "required";
      detail: string;
    };
    BulkToggleServicesError: components["schemas"]["BulkToggleServicesNonFieldErrorsErrorComponent"] | components["schemas"]["BulkToggleServicesDesiredStateErrorComponent"] | components["schemas"]["BulkToggleServicesServiceIdsErrorComponent"] | components["schemas"]["BulkToggleServicesServiceIdsINDEXErrorComponent"];
    BulkToggleServicesErrorResponse400: components["schemas"]["BulkToggleServicesValidationError"] | components["schemas"]["ParseErrorResponse"];
    BulkToggleServicesNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors
       * @enum {string}
       */
      attr: "non_field_errors";
      /**
       * @description * `invalid` - invalid
       * @enum {string}
       */
      code: "invalid";
      detail: string;
    };
    BulkToggleServicesServiceIdsErrorComponent: {
      /**
       * @description * `service_ids` - service_ids
       * @enum {string}
       */
      attr: "service_ids";
      /**
       * @description * `not_a_list` - not_a_list
       * * `null` - null
       * * `required` - required
       * @enum {string}
       */
      code: "not_a_list" | "null" | "required";
      detail: string;
    };
    BulkToggleServicesServiceIdsINDEXErrorComponent: {
      /**
       * @description * `service_ids.INDEX` - service_ids.INDEX
       * @enum {string}
       */
      attr: "service_ids.INDEX";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    BulkToggleServicesValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["BulkToggleServicesError"][];
    };
    CancelServiceChangesErrorResponse400: components["schemas"]["ParseErrorResponse"];
    CancelServiceDeploymentErrorResponse400: components["schemas"]["ParseErrorResponse"];
    ChangePasswordConfirmPasswordErrorComponent: {
      /**
       * @description * `confirm_password` - confirm_password
       * @enum {string}
       */
      attr: "confirm_password";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `min_length` - min_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "min_length" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    ChangePasswordCurrentPasswordErrorComponent: {
      /**
       * @description * `current_password` - current_password
       * @enum {string}
       */
      attr: "current_password";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `min_length` - min_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "min_length" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    ChangePasswordError: components["schemas"]["ChangePasswordNonFieldErrorsErrorComponent"] | components["schemas"]["ChangePasswordCurrentPasswordErrorComponent"] | components["schemas"]["ChangePasswordNewPasswordErrorComponent"] | components["schemas"]["ChangePasswordConfirmPasswordErrorComponent"];
    ChangePasswordErrorResponse400: components["schemas"]["ChangePasswordValidationError"] | components["schemas"]["ParseErrorResponse"];
    ChangePasswordNewPasswordErrorComponent: {
      /**
       * @description * `new_password` - new_password
       * @enum {string}
       */
      attr: "new_password";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `min_length` - min_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "min_length" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    ChangePasswordNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors
       * @enum {string}
       */
      attr: "non_field_errors";
      /**
       * @description * `invalid` - invalid
       * @enum {string}
       */
      code: "invalid";
      detail: string;
    };
    ChangePasswordRequestRequest: {
      current_password: string;
      new_password: string;
      confirm_password: string;
    };
    ChangePasswordResponse: {
      success: boolean;
    };
    ChangePasswordValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["ChangePasswordError"][];
    };
    CleanupDeploymentQueueCancelRunningDeploymentsErrorComponent: {
      /**
       * @description * `cancel_running_deployments` - cancel_running_deployments
       * @enum {string}
       */
      attr: "cancel_running_deployments";
      /**
       * @description * `invalid` - invalid
       * * `null` - null
       * @enum {string}
       */
      code: "invalid" | "null";
      detail: string;
    };
    CleanupDeploymentQueueError: components["schemas"]["CleanupDeploymentQueueNonFieldErrorsErrorComponent"] | components["schemas"]["CleanupDeploymentQueueCancelRunningDeploymentsErrorComponent"];
    CleanupDeploymentQueueErrorResponse400: components["schemas"]["CleanupDeploymentQueueValidationError"] | components["schemas"]["ParseErrorResponse"];
    CleanupDeploymentQueueNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors
       * @enum {string}
       */
      attr: "non_field_errors";
      /**
       * @description * `invalid` - invalid
       * @enum {string}
       */
      code: "invalid";
      detail: string;
    };
    CleanupDeploymentQueueValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["CleanupDeploymentQueueError"][];
    };
    /**
     * @description * `client_error` - Client Error
     * @enum {string}
     */
    ClientErrorEnum: "client_error";
    CloneEnvironmentDeployServicesErrorComponent: {
      /**
       * @description * `deploy_services` - deploy_services
       * @enum {string}
       */
      attr: "deploy_services";
      /**
       * @description * `invalid` - invalid
       * * `null` - null
       * @enum {string}
       */
      code: "invalid" | "null";
      detail: string;
    };
    CloneEnvironmentError: components["schemas"]["CloneEnvironmentNonFieldErrorsErrorComponent"] | components["schemas"]["CloneEnvironmentDeployServicesErrorComponent"] | components["schemas"]["CloneEnvironmentNameErrorComponent"];
    CloneEnvironmentErrorResponse400: components["schemas"]["CloneEnvironmentValidationError"] | components["schemas"]["ParseErrorResponse"];
    CloneEnvironmentNameErrorComponent: {
      /**
       * @description * `name` - name
       * @enum {string}
       */
      attr: "name";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `max_length` - max_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "max_length" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    CloneEnvironmentNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors
       * @enum {string}
       */
      attr: "non_field_errors";
      /**
       * @description * `invalid` - invalid
       * @enum {string}
       */
      code: "invalid";
      detail: string;
    };
    CloneEnvironmentRequestRequest: {
      /** @default false */
      deploy_services?: boolean;
      name: string;
    };
    CloneEnvironmentValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["CloneEnvironmentError"][];
    };
    /**
     * @description * `ALL` - All services
     * * `ONLY` - Only specific services
     * @enum {string}
     */
    CloneStrategyEnum: "ALL" | "ONLY";
    Config: {
      id: string;
      name: string;
      mount_path: string;
      contents: string;
      language: string;
      version: number;
    };
    /**
     * @description * `configs` - configs
     * @enum {string}
     */
    ConfigItemChangeFieldEnum: "configs";
    ConfigItemChangeRequest: {
      type: components["schemas"]["ItemChangeTypeEnum"];
      item_id?: string;
      new_value?: components["schemas"]["ConfigRequestRequest"];
      field: components["schemas"]["ConfigItemChangeFieldEnum"];
    };
    ConfigRequest: {
      id?: string;
      name: string;
      mount_path: string;
      contents?: string;
      language?: string;
      version?: number;
    };
    ConfigRequestRequest: {
      contents: string;
      name?: string;
      mount_path: string;
      /** @default plaintext */
      language?: string;
    };
    ConnectorsDestroyErrorResponse400: components["schemas"]["ParseErrorResponse"];
    ConnectorsGithubPartialUpdateError: components["schemas"]["ConnectorsGithubPartialUpdateNonFieldErrorsErrorComponent"] | components["schemas"]["ConnectorsGithubPartialUpdateNameErrorComponent"];
    ConnectorsGithubPartialUpdateErrorResponse400: components["schemas"]["ConnectorsGithubPartialUpdateValidationError"] | components["schemas"]["ParseErrorResponse"];
    ConnectorsGithubPartialUpdateNameErrorComponent: {
      /**
       * @description * `name` - name
       * @enum {string}
       */
      attr: "name";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `max_length` - max_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "max_length" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    ConnectorsGithubPartialUpdateNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors
       * @enum {string}
       */
      attr: "non_field_errors";
      /**
       * @description * `invalid` - invalid
       * @enum {string}
       */
      code: "invalid";
      detail: string;
    };
    ConnectorsGithubPartialUpdateValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["ConnectorsGithubPartialUpdateError"][];
    };
    ConnectorsGithubRetrieveErrorResponse400: components["schemas"]["ParseErrorResponse"];
    ConnectorsGitlabRetrieveErrorResponse400: components["schemas"]["ParseErrorResponse"];
    ConnectorsGitlabUpdateUpdateAppSecretErrorComponent: {
      /**
       * @description * `app_secret` - app_secret
       * @enum {string}
       */
      attr: "app_secret";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    ConnectorsGitlabUpdateUpdateError: components["schemas"]["ConnectorsGitlabUpdateUpdateNonFieldErrorsErrorComponent"] | components["schemas"]["ConnectorsGitlabUpdateUpdateNameErrorComponent"] | components["schemas"]["ConnectorsGitlabUpdateUpdateAppSecretErrorComponent"] | components["schemas"]["ConnectorsGitlabUpdateUpdateRedirectUriErrorComponent"];
    ConnectorsGitlabUpdateUpdateErrorResponse400: components["schemas"]["ConnectorsGitlabUpdateUpdateValidationError"] | components["schemas"]["ParseErrorResponse"];
    ConnectorsGitlabUpdateUpdateNameErrorComponent: {
      /**
       * @description * `name` - name
       * @enum {string}
       */
      attr: "name";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    ConnectorsGitlabUpdateUpdateNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors
       * @enum {string}
       */
      attr: "non_field_errors";
      /**
       * @description * `invalid` - invalid
       * @enum {string}
       */
      code: "invalid";
      detail: string;
    };
    ConnectorsGitlabUpdateUpdateRedirectUriErrorComponent: {
      /**
       * @description * `redirect_uri` - redirect_uri
       * @enum {string}
       */
      attr: "redirect_uri";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    ConnectorsGitlabUpdateUpdateValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["ConnectorsGitlabUpdateUpdateError"][];
    };
    ConnectorsRetrieveErrorResponse400: components["schemas"]["ParseErrorResponse"];
    CreateDockerServiceCredentialsNonFieldErrorsErrorComponent: {
      /**
       * @description * `credentials.non_field_errors` - credentials.non_field_errors
       * @enum {string}
       */
      attr: "credentials.non_field_errors";
      /**
       * @description * `invalid` - invalid
       * * `null` - null
       * @enum {string}
       */
      code: "invalid" | "null";
      detail: string;
    };
    CreateDockerServiceCredentialsPasswordErrorComponent: {
      /**
       * @description * `credentials.password` - credentials.password
       * @enum {string}
       */
      attr: "credentials.password";
      /**
       * @description * `invalid` - invalid
       * * `max_length` - max_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "invalid" | "max_length" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    CreateDockerServiceCredentialsUsernameErrorComponent: {
      /**
       * @description * `credentials.username` - credentials.username
       * @enum {string}
       */
      attr: "credentials.username";
      /**
       * @description * `invalid` - invalid
       * * `max_length` - max_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "invalid" | "max_length" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    CreateDockerServiceError: components["schemas"]["CreateDockerServiceNonFieldErrorsErrorComponent"] | components["schemas"]["CreateDockerServiceSlugErrorComponent"] | components["schemas"]["CreateDockerServiceImageErrorComponent"] | components["schemas"]["CreateDockerServiceCredentialsNonFieldErrorsErrorComponent"] | components["schemas"]["CreateDockerServiceCredentialsUsernameErrorComponent"] | components["schemas"]["CreateDockerServiceCredentialsPasswordErrorComponent"];
    CreateDockerServiceErrorResponse400: components["schemas"]["CreateDockerServiceValidationError"] | components["schemas"]["ParseErrorResponse"];
    CreateDockerServiceImageErrorComponent: {
      /**
       * @description * `image` - image
       * @enum {string}
       */
      attr: "image";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    CreateDockerServiceNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors
       * @enum {string}
       */
      attr: "non_field_errors";
      /**
       * @description * `invalid` - invalid
       * @enum {string}
       */
      code: "invalid";
      detail: string;
    };
    CreateDockerServiceSlugErrorComponent: {
      /**
       * @description * `slug` - slug
       * @enum {string}
       */
      attr: "slug";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `max_length` - max_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "max_length" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    CreateDockerServiceValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["CreateDockerServiceError"][];
    };
    CreateEnvironmentRequestRequest: {
      name: string;
    };
    CreateGitServiceBranchNameErrorComponent: {
      /**
       * @description * `branch_name` - branch_name
       * @enum {string}
       */
      attr: "branch_name";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    CreateGitServiceBuildContextDirErrorComponent: {
      /**
       * @description * `build_context_dir` - build_context_dir
       * @enum {string}
       */
      attr: "build_context_dir";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    CreateGitServiceBuildDirectoryErrorComponent: {
      /**
       * @description * `build_directory` - build_directory
       * @enum {string}
       */
      attr: "build_directory";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    CreateGitServiceBuilderErrorComponent: {
      /**
       * @description * `builder` - builder
       * @enum {string}
       */
      attr: "builder";
      /**
       * @description * `invalid_choice` - invalid_choice
       * * `null` - null
       * @enum {string}
       */
      code: "invalid_choice" | "null";
      detail: string;
    };
    CreateGitServiceDockerfilePathErrorComponent: {
      /**
       * @description * `dockerfile_path` - dockerfile_path
       * @enum {string}
       */
      attr: "dockerfile_path";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    CreateGitServiceError: components["schemas"]["CreateGitServiceNonFieldErrorsErrorComponent"] | components["schemas"]["CreateGitServiceSlugErrorComponent"] | components["schemas"]["CreateGitServiceRepositoryUrlErrorComponent"] | components["schemas"]["CreateGitServiceBranchNameErrorComponent"] | components["schemas"]["CreateGitServiceGitAppIdErrorComponent"] | components["schemas"]["CreateGitServiceDockerfilePathErrorComponent"] | components["schemas"]["CreateGitServiceBuildContextDirErrorComponent"] | components["schemas"]["CreateGitServiceBuilderErrorComponent"] | components["schemas"]["CreateGitServicePublishDirectoryErrorComponent"] | components["schemas"]["CreateGitServiceIsSpaErrorComponent"] | components["schemas"]["CreateGitServiceNotFoundPageErrorComponent"] | components["schemas"]["CreateGitServiceIndexPageErrorComponent"] | components["schemas"]["CreateGitServiceBuildDirectoryErrorComponent"] | components["schemas"]["CreateGitServiceIsStaticErrorComponent"] | components["schemas"]["CreateGitServiceExposedPortErrorComponent"];
    CreateGitServiceErrorResponse400: components["schemas"]["CreateGitServiceValidationError"] | components["schemas"]["ParseErrorResponse"];
    CreateGitServiceExposedPortErrorComponent: {
      /**
       * @description * `exposed_port` - exposed_port
       * @enum {string}
       */
      attr: "exposed_port";
      /**
       * @description * `invalid` - invalid
       * * `max_string_length` - max_string_length
       * * `min_value` - min_value
       * * `null` - null
       * @enum {string}
       */
      code: "invalid" | "max_string_length" | "min_value" | "null";
      detail: string;
    };
    CreateGitServiceGitAppIdErrorComponent: {
      /**
       * @description * `git_app_id` - git_app_id
       * @enum {string}
       */
      attr: "git_app_id";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    CreateGitServiceIndexPageErrorComponent: {
      /**
       * @description * `index_page` - index_page
       * @enum {string}
       */
      attr: "index_page";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    CreateGitServiceIsSpaErrorComponent: {
      /**
       * @description * `is_spa` - is_spa
       * @enum {string}
       */
      attr: "is_spa";
      /**
       * @description * `invalid` - invalid
       * * `null` - null
       * @enum {string}
       */
      code: "invalid" | "null";
      detail: string;
    };
    CreateGitServiceIsStaticErrorComponent: {
      /**
       * @description * `is_static` - is_static
       * @enum {string}
       */
      attr: "is_static";
      /**
       * @description * `invalid` - invalid
       * * `null` - null
       * @enum {string}
       */
      code: "invalid" | "null";
      detail: string;
    };
    CreateGitServiceNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors
       * @enum {string}
       */
      attr: "non_field_errors";
      /**
       * @description * `invalid` - invalid
       * @enum {string}
       */
      code: "invalid";
      detail: string;
    };
    CreateGitServiceNotFoundPageErrorComponent: {
      /**
       * @description * `not_found_page` - not_found_page
       * @enum {string}
       */
      attr: "not_found_page";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    CreateGitServicePublishDirectoryErrorComponent: {
      /**
       * @description * `publish_directory` - publish_directory
       * @enum {string}
       */
      attr: "publish_directory";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    CreateGitServiceRepositoryUrlErrorComponent: {
      /**
       * @description * `repository_url` - repository_url
       * @enum {string}
       */
      attr: "repository_url";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    CreateGitServiceRequestRequest: components["schemas"]["GitServiceDockerfileBuilderRequestRequest"] | components["schemas"]["GitServiceStaticDirBuilderRequestRequest"] | components["schemas"]["GitServiceNixpacksBuilderRequestRequest"] | components["schemas"]["GitServiceRailpackBuilderRequestRequest"];
    CreateGitServiceSlugErrorComponent: {
      /**
       * @description * `slug` - slug
       * @enum {string}
       */
      attr: "slug";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `max_length` - max_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "max_length" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    CreateGitServiceValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["CreateGitServiceError"][];
    };
    CreateGitlabAppAppIdErrorComponent: {
      /**
       * @description * `app_id` - app_id
       * @enum {string}
       */
      attr: "app_id";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    CreateGitlabAppAppSecretErrorComponent: {
      /**
       * @description * `app_secret` - app_secret
       * @enum {string}
       */
      attr: "app_secret";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    CreateGitlabAppError: components["schemas"]["CreateGitlabAppNonFieldErrorsErrorComponent"] | components["schemas"]["CreateGitlabAppAppIdErrorComponent"] | components["schemas"]["CreateGitlabAppAppSecretErrorComponent"] | components["schemas"]["CreateGitlabAppRedirectUriErrorComponent"] | components["schemas"]["CreateGitlabAppGitlabUrlErrorComponent"] | components["schemas"]["CreateGitlabAppNameErrorComponent"];
    CreateGitlabAppErrorResponse400: components["schemas"]["CreateGitlabAppValidationError"] | components["schemas"]["ParseErrorResponse"];
    CreateGitlabAppGitlabUrlErrorComponent: {
      /**
       * @description * `gitlab_url` - gitlab_url
       * @enum {string}
       */
      attr: "gitlab_url";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    CreateGitlabAppNameErrorComponent: {
      /**
       * @description * `name` - name
       * @enum {string}
       */
      attr: "name";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    CreateGitlabAppNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors
       * @enum {string}
       */
      attr: "non_field_errors";
      /**
       * @description * `invalid` - invalid
       * @enum {string}
       */
      code: "invalid";
      detail: string;
    };
    CreateGitlabAppRedirectUriErrorComponent: {
      /**
       * @description * `redirect_uri` - redirect_uri
       * @enum {string}
       */
      attr: "redirect_uri";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    CreateGitlabAppRequestRequest: {
      app_id: string;
      app_secret: string;
      /** Format: uri */
      redirect_uri: string;
      /**
       * Format: uri
       * @default https://gitlab.com
       */
      gitlab_url?: string;
      name: string;
    };
    CreateGitlabAppResponse: {
      state: string;
    };
    CreateGitlabAppValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["CreateGitlabAppError"][];
    };
    CreateNewEnvironmentError: components["schemas"]["CreateNewEnvironmentNonFieldErrorsErrorComponent"] | components["schemas"]["CreateNewEnvironmentNameErrorComponent"];
    CreateNewEnvironmentErrorResponse400: components["schemas"]["CreateNewEnvironmentValidationError"] | components["schemas"]["ParseErrorResponse"];
    CreateNewEnvironmentNameErrorComponent: {
      /**
       * @description * `name` - name
       * @enum {string}
       */
      attr: "name";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `max_length` - max_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "max_length" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    CreateNewEnvironmentNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors
       * @enum {string}
       */
      attr: "non_field_errors";
      /**
       * @description * `invalid` - invalid
       * @enum {string}
       */
      code: "invalid";
      detail: string;
    };
    CreateNewEnvironmentValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["CreateNewEnvironmentError"][];
    };
    CreateProjectDescriptionErrorComponent: {
      /**
       * @description * `description` - description
       * @enum {string}
       */
      attr: "description";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    CreateProjectError: components["schemas"]["CreateProjectNonFieldErrorsErrorComponent"] | components["schemas"]["CreateProjectSlugErrorComponent"] | components["schemas"]["CreateProjectDescriptionErrorComponent"];
    CreateProjectErrorResponse400: components["schemas"]["CreateProjectValidationError"] | components["schemas"]["ParseErrorResponse"];
    CreateProjectNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors
       * @enum {string}
       */
      attr: "non_field_errors";
      /**
       * @description * `invalid` - invalid
       * @enum {string}
       */
      code: "invalid";
      detail: string;
    };
    CreateProjectSlugErrorComponent: {
      /**
       * @description * `slug` - slug
       * @enum {string}
       */
      attr: "slug";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `max_length` - max_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "max_length" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    CreateProjectValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["CreateProjectError"][];
    };
    CreateSSHKeyError: components["schemas"]["CreateSSHKeyNonFieldErrorsErrorComponent"] | components["schemas"]["CreateSSHKeyUserErrorComponent"] | components["schemas"]["CreateSSHKeySlugErrorComponent"];
    CreateSSHKeyErrorResponse400: components["schemas"]["CreateSSHKeyValidationError"] | components["schemas"]["ParseErrorResponse"];
    CreateSSHKeyNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors
       * @enum {string}
       */
      attr: "non_field_errors";
      /**
       * @description * `invalid` - invalid
       * @enum {string}
       */
      code: "invalid";
      detail: string;
    };
    CreateSSHKeyRequestRequest: {
      user: string;
      slug: string;
    };
    CreateSSHKeySlugErrorComponent: {
      /**
       * @description * `slug` - slug
       * @enum {string}
       */
      attr: "slug";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    CreateSSHKeyUserErrorComponent: {
      /**
       * @description * `user` - user
       * @enum {string}
       */
      attr: "user";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    CreateSSHKeyValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["CreateSSHKeyError"][];
    };
    /**
     * @description * `APPROVE` - APPROVE
     * * `DECLINE` - DECLINE
     * @enum {string}
     */
    DecisionEnum: "APPROVE" | "DECLINE";
    DeployDockerServiceCleanupQueueErrorComponent: {
      /**
       * @description * `cleanup_queue` - cleanup_queue
       * @enum {string}
       */
      attr: "cleanup_queue";
      /**
       * @description * `invalid` - invalid
       * * `null` - null
       * @enum {string}
       */
      code: "invalid" | "null";
      detail: string;
    };
    DeployDockerServiceCommitMessageErrorComponent: {
      /**
       * @description * `commit_message` - commit_message
       * @enum {string}
       */
      attr: "commit_message";
      /**
       * @description * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "invalid" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    DeployDockerServiceError: components["schemas"]["DeployDockerServiceNonFieldErrorsErrorComponent"] | components["schemas"]["DeployDockerServiceCommitMessageErrorComponent"] | components["schemas"]["DeployDockerServiceCleanupQueueErrorComponent"];
    DeployDockerServiceErrorResponse400: components["schemas"]["DeployDockerServiceValidationError"] | components["schemas"]["ParseErrorResponse"];
    DeployDockerServiceNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors
       * @enum {string}
       */
      attr: "non_field_errors";
      /**
       * @description * `invalid` - invalid
       * @enum {string}
       */
      code: "invalid";
      detail: string;
    };
    DeployDockerServiceValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["DeployDockerServiceError"][];
    };
    DeployGitServiceCleanupQueueErrorComponent: {
      /**
       * @description * `cleanup_queue` - cleanup_queue
       * @enum {string}
       */
      attr: "cleanup_queue";
      /**
       * @description * `invalid` - invalid
       * * `null` - null
       * @enum {string}
       */
      code: "invalid" | "null";
      detail: string;
    };
    DeployGitServiceError: components["schemas"]["DeployGitServiceNonFieldErrorsErrorComponent"] | components["schemas"]["DeployGitServiceIgnoreBuildCacheErrorComponent"] | components["schemas"]["DeployGitServiceCleanupQueueErrorComponent"];
    DeployGitServiceErrorResponse400: components["schemas"]["DeployGitServiceValidationError"] | components["schemas"]["ParseErrorResponse"];
    DeployGitServiceIgnoreBuildCacheErrorComponent: {
      /**
       * @description * `ignore_build_cache` - ignore_build_cache
       * @enum {string}
       */
      attr: "ignore_build_cache";
      /**
       * @description * `invalid` - invalid
       * * `null` - null
       * @enum {string}
       */
      code: "invalid" | "null";
      detail: string;
    };
    DeployGitServiceNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors
       * @enum {string}
       */
      attr: "non_field_errors";
      /**
       * @description * `invalid` - invalid
       * @enum {string}
       */
      code: "invalid";
      detail: string;
    };
    DeployGitServiceValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["DeployGitServiceError"][];
    };
    /**
     * @description * `APPROVED` - Approved
     * * `PENDING` - Pending
     * @enum {string}
     */
    DeployStateEnum: "APPROVED" | "PENDING";
    DeploymentChange: {
      id: string;
      type: components["schemas"]["DeploymentChangeTypeEnum"];
      field: components["schemas"]["DeploymentChangeFieldEnum"];
      new_value: unknown;
      old_value: unknown;
      item_id: string | null;
    };
    /**
     * @description * `source` - source
     * * `git_source` - git_source
     * * `builder` - builder
     * * `command` - command
     * * `healthcheck` - healthcheck
     * * `volumes` - volumes
     * * `env_variables` - env variables
     * * `urls` - urls
     * * `ports` - ports
     * * `resource_limits` - resource limits
     * * `configs` - configs
     * @enum {string}
     */
    DeploymentChangeFieldEnum: "source" | "git_source" | "builder" | "command" | "healthcheck" | "volumes" | "env_variables" | "urls" | "ports" | "resource_limits" | "configs";
    DeploymentChangeRequest: {
      id?: string;
      type: components["schemas"]["DeploymentChangeTypeEnum"];
      field: components["schemas"]["DeploymentChangeFieldEnum"];
      new_value?: unknown;
      old_value?: unknown;
      item_id?: string | null;
    };
    DeploymentChangeRequestRequest: components["schemas"]["URLItemChangeRequest"] | components["schemas"]["VolumeItemChangeRequest"] | components["schemas"]["EnvItemChangeRequest"] | components["schemas"]["PortItemChangeRequest"] | components["schemas"]["DockerSourceFieldChangeRequest"] | components["schemas"]["DockerCommandFieldChangeRequest"] | components["schemas"]["HealthcheckFieldChangeRequest"] | components["schemas"]["ResourceLimitChangeRequest"] | components["schemas"]["ConfigItemChangeRequest"] | components["schemas"]["GitSourceFieldChangeRequest"] | components["schemas"]["GitBuilderFieldChangeRequest"];
    /**
     * @description * `UPDATE` - update
     * * `DELETE` - delete
     * * `ADD` - add
     * @enum {string}
     */
    DeploymentChangeTypeEnum: "UPDATE" | "DELETE" | "ADD";
    DeploymentCleanupQueueRequest: {
      /** @default false */
      cancel_running_deployments?: boolean;
    };
    DeploymentDocker: {
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      id: string;
      slug: string;
      type: components["schemas"]["ServiceTypeEnum"];
      image: string;
      command: string | null;
      builder: components["schemas"]["GitServiceBuilderEnum"] | components["schemas"]["NullEnum"] | null;
      /** Format: uri */
      repository_url: string | null;
      branch_name: string | null;
      commit_sha: string | null;
      dockerfile_builder_options: components["schemas"]["DockerfileBuilderOptions"] | null;
      static_dir_builder_options: components["schemas"]["StaticDirectoryBuilderOptions"] | null;
      nixpacks_builder_options: components["schemas"]["NixpacksBuilderOptions"] | null;
      railpack_builder_options: components["schemas"]["RailpackBuilderOptions"] | null;
      healthcheck: components["schemas"]["HealthCheck"] | null;
      project_id: string;
      environment: components["schemas"]["Environment"];
      credentials: components["schemas"]["DockerCredential"] | null;
      urls: readonly components["schemas"]["URLModel"][];
      volumes: readonly components["schemas"]["Volume"][];
      deploy_token: string | null;
      ports: readonly components["schemas"]["PortConfiguration"][];
      env_variables: readonly components["schemas"]["EnvVariable"][];
      network_aliases: readonly string[];
      network_alias: string | null;
      global_network_alias: string;
      unapplied_changes: readonly components["schemas"]["DeploymentChange"][];
      resource_limits: components["schemas"]["ResourceLimits"] | null;
      /** @default [] */
      system_env_variables: readonly components["schemas"]["SystemEnvVariables"][];
      configs: readonly components["schemas"]["Config"][];
      git_app: components["schemas"]["GitApp"] | null;
      git_repository: components["schemas"]["GitRepository"] | null;
      next_git_repository: components["schemas"]["GitRepository"] | null;
      auto_deploy_enabled: boolean;
      watch_paths: string | null;
      cleanup_queue_on_auto_deploy: boolean;
      pr_preview_envs_enabled: boolean;
    };
    /**
     * @description * `QUEUED` - Queued
     * * `CANCELLED` - Cancelled
     * * `CANCELLING` - Cancelling
     * * `FAILED` - Failed
     * * `PREPARING` - Preparing
     * * `BUILDING` - Building
     * * `STARTING` - Starting
     * * `RESTARTING` - Restarting
     * * `HEALTHY` - Healthy
     * * `UNHEALTHY` - Unhealthy
     * * `REMOVED` - Removed
     * * `SLEEPING` - Sleeping
     * @enum {string}
     */
    DeploymentStatusEnum: "QUEUED" | "CANCELLED" | "CANCELLING" | "FAILED" | "PREPARING" | "BUILDING" | "STARTING" | "RESTARTING" | "HEALTHY" | "UNHEALTHY" | "REMOVED" | "SLEEPING";
    /**
     * @description * `start` - start
     * * `stop` - stop
     * @enum {string}
     */
    DesiredStateEnum: "start" | "stop";
    /**
     * @description * `command` - command
     * @enum {string}
     */
    DockerCommandFieldChangeFieldEnum: "command";
    DockerCommandFieldChangeRequest: {
      /** @default UPDATE */
      type?: components["schemas"]["FieldChangeTypeEnum"];
      new_value: string | null;
      field: components["schemas"]["DockerCommandFieldChangeFieldEnum"];
    };
    DockerCredential: {
      username: string;
      password: string;
    };
    DockerCredentialRequest: {
      username: string;
      password: string;
    };
    DockerCredentialsRequestRequest: {
      username?: string;
      password?: string;
    };
    DockerImage: {
      full_image: string;
      description: string;
    };
    DockerImageSearchResponse: {
      images: components["schemas"]["DockerImage"][];
    };
    DockerServiceCard: {
      /** Format: date-time */
      updated_at: string;
      volume_number: number;
      slug: string;
      /** Format: uri */
      url: string | null;
      status: components["schemas"]["ServiceStatusEnum"];
      id: string;
      /** @default docker */
      type: components["schemas"]["DockerServiceCardTypeEnum"];
      image: string;
      tag: string;
    };
    /**
     * @description * `docker` - docker
     * @enum {string}
     */
    DockerServiceCardTypeEnum: "docker";
    DockerServiceCreateRequestRequest: {
      slug?: string;
      image: string;
      credentials?: components["schemas"]["DockerCredentialsRequestRequest"];
    };
    DockerServiceDeployRequestRequest: {
      commit_message?: string;
      /** @default false */
      cleanup_queue?: boolean;
    };
    DockerServiceWebhookDeployRequestRequest: {
      commit_message?: string;
      new_image?: string;
      cleanup_queue?: boolean;
    };
    /**
     * @description * `source` - source
     * @enum {string}
     */
    DockerSourceFieldChangeFieldEnum: "source";
    DockerSourceFieldChangeRequest: {
      /** @default UPDATE */
      type?: components["schemas"]["FieldChangeTypeEnum"];
      new_value: components["schemas"]["DockerSourceRequestRequest"];
      field: components["schemas"]["DockerSourceFieldChangeFieldEnum"];
    };
    DockerSourceRequestRequest: {
      image: string;
      credentials?: components["schemas"]["DockerCredentialsRequestRequest"];
    };
    DockerfileBuilderOptions: {
      dockerfile_path: string;
      build_context_dir: string;
      build_stage_target: string | null;
    };
    DockerfileBuilderOptionsRequest: {
      dockerfile_path: string;
      build_context_dir: string;
      build_stage_target: string | null;
    };
    /**
     * @description * `env_variables` - env_variables
     * @enum {string}
     */
    EnvItemChangeFieldEnum: "env_variables";
    EnvItemChangeRequest: {
      type: components["schemas"]["ItemChangeTypeEnum"];
      item_id?: string;
      new_value?: components["schemas"]["EnvRequestRequest"];
      field: components["schemas"]["EnvItemChangeFieldEnum"];
    };
    EnvRequestRequest: {
      key: string;
      value: string;
    };
    EnvStringChangeRequest: {
      new_value: string;
    };
    EnvVariable: {
      id: string;
      key: string;
      value: string;
    };
    EnvVariableRequest: {
      id?: string;
      key: string;
      value?: string;
    };
    Environment: {
      id: string;
      is_preview: boolean;
      name: string;
      variables: readonly components["schemas"]["SharedEnvVariable"][];
      preview_metadata: components["schemas"]["SimplePreviewMetadata"];
    };
    EnvironmentRequest: {
      id?: string;
      is_preview?: boolean;
      name: string;
    };
    EnvironmentSearchResponse: {
      id: string;
      /** Format: date-time */
      created_at: string;
      project_slug: string;
      name: string;
      /** @default environment */
      type: components["schemas"]["EnvironmentSearchResponseTypeEnum"];
    };
    /**
     * @description * `environment` - environment
     * @enum {string}
     */
    EnvironmentSearchResponseTypeEnum: "environment";
    EnvironmentWithVariables: {
      id: string;
      is_preview: boolean;
      name: string;
      preview_metadata: components["schemas"]["PreviewMetadata"] | null;
      variables: readonly components["schemas"]["SharedEnvVariable"][];
    };
    Error401: {
      code: components["schemas"]["ErrorCode401Enum"];
      detail: string;
      attr: string | null;
    };
    Error404: {
      code: components["schemas"]["ErrorCode404Enum"];
      detail: string;
      attr: string | null;
    };
    Error409: {
      code: components["schemas"]["Error409CodeEnum"];
      detail: string;
      attr: string | null;
    };
    /**
     * @description * `resource_conflict` - Resource Conflict
     * @enum {string}
     */
    Error409CodeEnum: "resource_conflict";
    Error429: {
      code: components["schemas"]["ErrorCode429Enum"];
      detail: string;
      attr: string | null;
    };
    /**
     * @description * `authentication_failed` - Authentication Failed
     * * `not_authenticated` - Not Authenticated
     * @enum {string}
     */
    ErrorCode401Enum: "authentication_failed" | "not_authenticated";
    /**
     * @description * `not_found` - Not Found
     * @enum {string}
     */
    ErrorCode404Enum: "not_found";
    /**
     * @description * `throttled` - Throttled
     * @enum {string}
     */
    ErrorCode429Enum: "throttled";
    ErrorResponse401: {
      type: components["schemas"]["ClientErrorEnum"];
      errors: components["schemas"]["Error401"][];
    };
    ErrorResponse404: {
      type: components["schemas"]["ClientErrorEnum"];
      errors: components["schemas"]["Error404"][];
    };
    ErrorResponse409: {
      type: components["schemas"]["ClientErrorEnum"];
      errors: components["schemas"]["Error409"][];
    };
    ErrorResponse429: {
      type: components["schemas"]["ClientErrorEnum"];
      errors: components["schemas"]["Error429"][];
    };
    /**
     * @description * `UPDATE` - Update
     * @enum {string}
     */
    FieldChangeTypeEnum: "UPDATE";
    GetAPISettingsErrorResponse400: components["schemas"]["ParseErrorResponse"];
    GetAuthedUserErrorResponse400: components["schemas"]["ParseErrorResponse"];
    GetCSRFErrorResponse400: components["schemas"]["ParseErrorResponse"];
    GetEnvironmentErrorResponse400: components["schemas"]["ParseErrorResponse"];
    GetPreviewEnvToReviewErrorResponse400: components["schemas"]["ParseErrorResponse"];
    GetProjectListError: components["schemas"]["GetProjectListSlugErrorComponent"] | components["schemas"]["GetProjectListSortByErrorComponent"];
    GetProjectListErrorResponse400: components["schemas"]["GetProjectListValidationError"] | components["schemas"]["ParseErrorResponse"];
    GetProjectListSlugErrorComponent: {
      /**
       * @description * `slug` - slug
       * @enum {string}
       */
      attr: "slug";
      /**
       * @description * `null_characters_not_allowed` - null_characters_not_allowed
       * @enum {string}
       */
      code: "null_characters_not_allowed";
      detail: string;
    };
    GetProjectListSortByErrorComponent: {
      /**
       * @description * `sort_by` - sort_by
       * @enum {string}
       */
      attr: "sort_by";
      /**
       * @description * `invalid_choice` - invalid_choice
       * @enum {string}
       */
      code: "invalid_choice";
      detail: string;
    };
    GetProjectListValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["GetProjectListError"][];
    };
    GetSSHKeyListErrorResponse400: components["schemas"]["ParseErrorResponse"];
    GetServerResouceLimitsErrorResponse400: components["schemas"]["ParseErrorResponse"];
    GetSingleProjectErrorResponse400: components["schemas"]["ParseErrorResponse"];
    GetSingleServiceErrorResponse400: components["schemas"]["ParseErrorResponse"];
    GitApp: {
      id: string;
      github: components["schemas"]["GithubApp"] | null;
      gitlab: components["schemas"]["GitlabApp"] | null;
    };
    GitAppRequest: {
      id?: string;
      github: components["schemas"]["GithubAppRequest"] | null;
      gitlab: components["schemas"]["GitlabAppRequest"] | null;
    };
    /**
     * @description * `builder` - builder
     * @enum {string}
     */
    GitBuilderFieldChangeFieldEnum: "builder";
    GitBuilderFieldChangeRequest: {
      /** @default UPDATE */
      type?: components["schemas"]["FieldChangeTypeEnum"];
      new_value: components["schemas"]["BuilderRequestRequest"];
      field: components["schemas"]["GitBuilderFieldChangeFieldEnum"];
    };
    GitRepository: {
      id: string;
      path: string;
      /** Format: uri */
      url: string;
      private: boolean;
    };
    GitRepositoryRequest: {
      id?: string;
      path?: string;
      /** Format: uri */
      url: string;
      private: boolean;
    };
    /**
     * @description * `DOCKERFILE` - Dockerfile
     * * `STATIC_DIR` - Static directory
     * * `NIXPACKS` - Nixpacks
     * * `RAILPACK` - Railpack
     * @enum {string}
     */
    GitServiceBuilderEnum: "DOCKERFILE" | "STATIC_DIR" | "NIXPACKS" | "RAILPACK";
    GitServiceCard: {
      /** Format: date-time */
      updated_at: string;
      volume_number: number;
      slug: string;
      /** Format: uri */
      url: string | null;
      status: components["schemas"]["ServiceStatusEnum"];
      id: string;
      /** @default git */
      type: components["schemas"]["GitServiceCardTypeEnum"];
      repository: string;
      last_commit_message: string;
      branch: string;
      git_provider: components["schemas"]["GitServiceCardGitProviderEnum"] | components["schemas"]["NullEnum"] | null;
    };
    /**
     * @description * `gitlab` - gitlab
     * * `github` - github
     * @enum {string}
     */
    GitServiceCardGitProviderEnum: "gitlab" | "github";
    /**
     * @description * `git` - git
     * @enum {string}
     */
    GitServiceCardTypeEnum: "git";
    GitServiceDeployRequestRequest: {
      /** @default false */
      ignore_build_cache?: boolean;
      /** @default false */
      cleanup_queue?: boolean;
    };
    /**
     * @description * `DOCKERFILE` - DOCKERFILE
     * @enum {string}
     */
    GitServiceDockerfileBuilderRequestBuilderEnum: "DOCKERFILE";
    GitServiceDockerfileBuilderRequestRequest: {
      slug?: string;
      /** Format: uri */
      repository_url: string;
      branch_name: string;
      git_app_id?: string;
      /** @default ./Dockerfile */
      dockerfile_path?: string;
      /** @default ./ */
      build_context_dir?: string;
      /** @default DOCKERFILE */
      builder?: components["schemas"]["GitServiceDockerfileBuilderRequestBuilderEnum"];
    };
    /**
     * @description * `NIXPACKS` - NIXPACKS
     * @enum {string}
     */
    GitServiceNixpacksBuilderRequestBuilderEnum: "NIXPACKS";
    GitServiceNixpacksBuilderRequestRequest: {
      slug?: string;
      /** Format: uri */
      repository_url: string;
      branch_name: string;
      git_app_id?: string;
      /** @default ./ */
      build_directory?: string;
      /** @default false */
      is_static?: boolean;
      /** @default false */
      is_spa?: boolean;
      /** @default ./dist */
      publish_directory?: string;
      /** @default 80 */
      exposed_port?: number;
      /** @default NIXPACKS */
      builder?: components["schemas"]["GitServiceNixpacksBuilderRequestBuilderEnum"];
    };
    /**
     * @description * `RAILPACK` - RAILPACK
     * @enum {string}
     */
    GitServiceRailpackBuilderRequestBuilderEnum: "RAILPACK";
    GitServiceRailpackBuilderRequestRequest: {
      slug?: string;
      /** Format: uri */
      repository_url: string;
      branch_name: string;
      git_app_id?: string;
      /** @default ./ */
      build_directory?: string;
      /** @default false */
      is_static?: boolean;
      /** @default false */
      is_spa?: boolean;
      /** @default ./dist */
      publish_directory?: string;
      /** @default 80 */
      exposed_port?: number;
      /** @default RAILPACK */
      builder?: components["schemas"]["GitServiceRailpackBuilderRequestBuilderEnum"];
    };
    GitServiceReDeployRequestRequest: {
      /** @default true */
      ignore_build_cache?: boolean;
    };
    /**
     * @description * `STATIC_DIR` - STATIC_DIR
     * @enum {string}
     */
    GitServiceStaticDirBuilderRequestBuilderEnum: "STATIC_DIR";
    GitServiceStaticDirBuilderRequestRequest: {
      slug?: string;
      /** Format: uri */
      repository_url: string;
      branch_name: string;
      git_app_id?: string;
      /** @default ./ */
      publish_directory?: string;
      /** @default false */
      is_spa?: boolean;
      not_found_page?: string | null;
      /** @default ./index.html */
      index_page?: string;
      /** @default STATIC_DIR */
      builder?: components["schemas"]["GitServiceStaticDirBuilderRequestBuilderEnum"];
    };
    GitServiceWebhookDeployRequestRequest: {
      /** @default false */
      ignore_build_cache?: boolean;
      /** @default HEAD */
      commit_sha?: string;
      cleanup_queue?: boolean;
    };
    /**
     * @description * `git_source` - git_source
     * @enum {string}
     */
    GitSourceFieldChangeFieldEnum: "git_source";
    GitSourceFieldChangeRequest: {
      /** @default UPDATE */
      type?: components["schemas"]["FieldChangeTypeEnum"];
      new_value: components["schemas"]["GitSourceRequestRequest"];
      field: components["schemas"]["GitSourceFieldChangeFieldEnum"];
    };
    GitSourceRequestRequest: {
      /** Format: uri */
      repository_url: string;
      branch_name: string;
      /** @default HEAD */
      commit_sha?: string;
      git_app_id?: string | null;
    };
    GithubApp: {
      id: string;
      name: string;
      installation_id: number;
      /** Format: uri */
      app_url: string;
      app_id: number;
      is_installed: boolean;
      /** Format: date-time */
      created_at: string;
    };
    GithubAppRequest: {
      name: string;
    };
    GitlabApp: {
      id: string;
      name: string;
      app_id: string;
      /** Format: uri */
      gitlab_url: string;
      secret: string;
      is_installed: boolean;
      /** Format: date-time */
      created_at: string;
      /** Format: uri */
      redirect_uri: string;
    };
    GitlabAppRequest: {
      name: string;
      secret: string;
      /** Format: uri */
      redirect_uri?: string;
    };
    GitlabAppUpdateRequestRequest: {
      name: string;
      app_secret: string;
      /** Format: uri */
      redirect_uri: string;
    };
    GitlabAppUpdateResponse: {
      state: string;
    };
    HealthCheck: {
      id: string;
      type: components["schemas"]["HealthCheckTypeEnum"];
      value: string;
      timeout_seconds: number;
      interval_seconds: number;
      associated_port: number | null;
    };
    HealthCheckRequest: {
      id?: string;
      type?: components["schemas"]["HealthCheckTypeEnum"];
      value?: string;
      timeout_seconds?: number;
      interval_seconds?: number;
      associated_port?: number | null;
    };
    HealthCheckRequestRequest: {
      type: components["schemas"]["HealthCheckRequestTypeEnum"];
      value: string;
      /** @default 30 */
      timeout_seconds?: number;
      /** @default 30 */
      interval_seconds?: number;
      associated_port?: number;
    };
    /**
     * @description * `PATH` - path
     * * `COMMAND` - command
     * @enum {string}
     */
    HealthCheckRequestTypeEnum: "PATH" | "COMMAND";
    /**
     * @description * `COMMAND` - Command
     * * `PATH` - Path
     * @enum {string}
     */
    HealthCheckTypeEnum: "COMMAND" | "PATH";
    /**
     * @description * `healthcheck` - healthcheck
     * @enum {string}
     */
    HealthcheckFieldChangeFieldEnum: "healthcheck";
    HealthcheckFieldChangeRequest: {
      /** @default UPDATE */
      type?: components["schemas"]["FieldChangeTypeEnum"];
      new_value: components["schemas"]["HealthCheckRequestRequest"] | null;
      field: components["schemas"]["HealthcheckFieldChangeFieldEnum"];
    };
    HttpLog: {
      /** Format: uuid */
      id: string;
      status: number;
      /** Format: date-time */
      time: string;
      deployment_id: string | null;
      service_id: string | null;
      request_id: string | null;
      request_ip: string;
      request_path: string;
      request_query: string | null;
      /** Format: uri */
      request_host: string;
      request_protocol: components["schemas"]["RequestProtocolEnum"];
      request_method: components["schemas"]["RequestMethodEnum"];
      /** Format: int64 */
      request_duration_ns: number;
      request_headers: {
        [key: string]: string[];
      };
      response_headers: {
        [key: string]: string[];
      };
      request_user_agent: string | null;
    };
    /**
     * @description * `ADD` - Add
     * * `DELETE` - Delete
     * * `UPDATE` - Update
     * @enum {string}
     */
    ItemChangeTypeEnum: "ADD" | "DELETE" | "UPDATE";
    /**
     * @description * `ERROR` - Error
     * * `INFO` - Info
     * @enum {string}
     */
    LevelEnum: "ERROR" | "INFO";
    ListGitAppRepositoriesError: components["schemas"]["ListGitAppRepositoriesQueryErrorComponent"];
    ListGitAppRepositoriesErrorResponse400: components["schemas"]["ListGitAppRepositoriesValidationError"] | components["schemas"]["ParseErrorResponse"];
    ListGitAppRepositoriesPaginatedError: components["schemas"]["ListGitAppRepositoriesPaginatedQueryErrorComponent"];
    ListGitAppRepositoriesPaginatedErrorResponse400: components["schemas"]["ListGitAppRepositoriesPaginatedValidationError"] | components["schemas"]["ParseErrorResponse"];
    ListGitAppRepositoriesPaginatedQueryErrorComponent: {
      /**
       * @description * `query` - query
       * @enum {string}
       */
      attr: "query";
      /**
       * @description * `null_characters_not_allowed` - null_characters_not_allowed
       * @enum {string}
       */
      code: "null_characters_not_allowed";
      detail: string;
    };
    ListGitAppRepositoriesPaginatedValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["ListGitAppRepositoriesPaginatedError"][];
    };
    ListGitAppRepositoriesQueryErrorComponent: {
      /**
       * @description * `query` - query
       * @enum {string}
       */
      attr: "query";
      /**
       * @description * `null_characters_not_allowed` - null_characters_not_allowed
       * @enum {string}
       */
      code: "null_characters_not_allowed";
      detail: string;
    };
    ListGitAppRepositoriesValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["ListGitAppRepositoriesError"][];
    };
    ListGitAppsErrorResponse400: components["schemas"]["ParseErrorResponse"];
    ListGitRepoBranchesErrorResponse400: components["schemas"]["ParseErrorResponse"];
    LoginError: components["schemas"]["LoginNonFieldErrorsErrorComponent"] | components["schemas"]["LoginUsernameErrorComponent"] | components["schemas"]["LoginPasswordErrorComponent"];
    LoginErrorResponse400: components["schemas"]["LoginValidationError"] | components["schemas"]["ParseErrorResponse"];
    LoginNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors
       * @enum {string}
       */
      attr: "non_field_errors";
      /**
       * @description * `invalid` - invalid
       * @enum {string}
       */
      code: "invalid";
      detail: string;
    };
    LoginPasswordErrorComponent: {
      /**
       * @description * `password` - password
       * @enum {string}
       */
      attr: "password";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `max_length` - max_length
       * * `min_length` - min_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "max_length" | "min_length" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    LoginRequestRequest: {
      username: string;
      password: string;
    };
    LoginSuccessResponse: {
      success: boolean;
    };
    LoginUsernameErrorComponent: {
      /**
       * @description * `username` - username
       * @enum {string}
       */
      attr: "username";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `max_length` - max_length
       * * `min_length` - min_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "max_length" | "min_length" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    LoginValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["LoginError"][];
    };
    LogoutErrorResponse400: components["schemas"]["ParseErrorResponse"];
    MemoryLimit: {
      value: number;
      unit: components["schemas"]["UnitEnum"];
    };
    MemoryLimitRequest: {
      value: number;
      unit: components["schemas"]["UnitEnum"];
    };
    MemoryLimitRequestRequest: {
      value: number;
      /** @default MEGABYTES */
      unit?: components["schemas"]["UnitEnum"];
    };
    NixpacksBuilderOptions: {
      publish_directory: string;
      is_spa: boolean;
      not_found_page: string | null;
      index_page: string;
      generated_caddyfile: string | null;
      build_directory: string | null;
      custom_install_command: string | null;
      custom_build_command: string | null;
      custom_start_command: string | null;
      is_static: boolean;
    };
    NixpacksBuilderOptionsRequest: {
      publish_directory: string;
      is_spa: boolean;
      not_found_page: string | null;
      index_page: string;
      build_directory: string | null;
      custom_install_command: string | null;
      custom_build_command: string | null;
      custom_start_command: string | null;
      is_static: boolean;
    };
    /** @enum {unknown} */
    NullEnum: "";
    PING: {
      ping: components["schemas"]["PingEnum"];
    };
    PaginatedGitRepositoryList: {
      /** @example 123 */
      count: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=4
       */
      next: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=2
       */
      previous: string | null;
      results: components["schemas"]["GitRepository"][];
    };
    PaginatedHttpLogList: {
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?cursor=cD00ODY%3D"
       */
      next: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?cursor=cj0xJnA9NDg3
       */
      previous: string | null;
      results: components["schemas"]["HttpLog"][];
    };
    PaginatedServiceDeploymentList: {
      /** @example 123 */
      count: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=4
       */
      next: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=2
       */
      previous: string | null;
      results: components["schemas"]["ServiceDeployment"][];
    };
    ParseError: {
      code: components["schemas"]["ParseErrorCodeEnum"];
      detail: string;
      attr: string | null;
    };
    /**
     * @description * `parse_error` - Parse Error
     * @enum {string}
     */
    ParseErrorCodeEnum: "parse_error";
    ParseErrorResponse: {
      type: components["schemas"]["ClientErrorEnum"];
      errors: components["schemas"]["ParseError"][];
    };
    PatchedGithubAppRequest: {
      name?: string;
    };
    PatchedPreviewEnvTemplateRequest: {
      slug?: string;
      /** @default [] */
      services_to_clone_ids?: string[];
      base_environment_id?: string;
      clone_strategy?: components["schemas"]["CloneStrategyEnum"];
      ttl_seconds?: number | null;
      auto_teardown?: boolean;
      is_default?: boolean;
      preview_env_limit?: number;
      preview_root_domain?: string | null;
      auth_enabled?: boolean;
      auth_user?: string | null;
      auth_password?: string | null;
      env_variables?: string;
    };
    PatchedProjectUpdateRequestRequest: {
      slug?: string;
      description?: string;
    };
    PatchedServiceRequest: {
      slug?: string;
      auto_deploy_enabled?: boolean;
      watch_paths?: string | null;
      cleanup_queue_on_auto_deploy?: boolean;
      pr_preview_envs_enabled?: boolean;
    };
    PatchedSharedEnvVariableRequest: {
      key?: string;
      value?: string;
    };
    PatchedUpdateEnvironmentRequestRequest: {
      name?: string;
    };
    PatchedUpdateProfileRequest: {
      username?: string;
      first_name?: string;
      last_name?: string;
    };
    /**
     * @description * `pong` - pong
     * @enum {string}
     */
    PingEnum: "pong";
    PingErrorResponse400: components["schemas"]["ParseErrorResponse"];
    PortConfiguration: {
      id: string;
      host: number;
      forwarded: number;
    };
    PortConfigurationRequest: {
      id?: string;
      host?: number;
      forwarded: number;
    };
    /**
     * @description * `ports` - ports
     * @enum {string}
     */
    PortItemChangeFieldEnum: "ports";
    PortItemChangeRequest: {
      type: components["schemas"]["ItemChangeTypeEnum"];
      item_id?: string;
      new_value?: components["schemas"]["ServicePortsRequestRequest"];
      field: components["schemas"]["PortItemChangeFieldEnum"];
    };
    PreviewEnvTemplate: {
      id: number;
      slug: string;
      services_to_clone: readonly components["schemas"]["SimpleTemplateService"][];
      base_environment: components["schemas"]["Environment"];
      /** @default [] */
      variables: readonly components["schemas"]["SharedEnvTemplate"][];
      clone_strategy: components["schemas"]["CloneStrategyEnum"];
      ttl_seconds: number | null;
      auto_teardown: boolean;
      is_default: boolean;
      preview_env_limit: number;
      preview_root_domain: string | null;
      auth_enabled: boolean;
      auth_user: string | null;
      auth_password: string | null;
    };
    PreviewEnvTemplateRequest: {
      slug: string;
      /** @default [] */
      services_to_clone_ids?: string[];
      base_environment_id: string;
      clone_strategy?: components["schemas"]["CloneStrategyEnum"];
      ttl_seconds?: number | null;
      auto_teardown?: boolean;
      is_default?: boolean;
      preview_env_limit?: number;
      preview_root_domain?: string | null;
      auth_enabled?: boolean;
      auth_user?: string | null;
      auth_password?: string | null;
      env_variables?: string;
    };
    PreviewMetadata: {
      id: number;
      auth_enabled: boolean;
      auth_user: string | null;
      auth_password: string | null;
      source_trigger: components["schemas"]["SourceTriggerEnum"];
      /** Format: uri */
      head_repository_url: string;
      branch_name: string;
      commit_sha: string;
      /** Format: uri */
      external_url: string;
      pr_number: number | null;
      pr_title: string | null;
      pr_author: string | null;
      /** Format: uri */
      pr_base_repo_url: string | null;
      /** Format: uri */
      pr_base_branch_name: string | null;
      service: components["schemas"]["SimpleService"];
      ttl_seconds: number | null;
      auto_teardown: boolean;
      git_app: components["schemas"]["GitApp"];
      deploy_state: components["schemas"]["DeployStateEnum"];
    };
    PreviewService: {
      id: string;
      slug: string;
      network_alias: string | null;
    };
    PreviewServiceRequest: {
      id?: string;
      slug: string;
      network_alias?: string | null;
    };
    Project: {
      environments: readonly components["schemas"]["SimpleEnvironment"][];
      description: string | null;
      id: string;
      slug: string;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      healthy_services: number;
      total_services: number;
    };
    ProjectCreateRequestRequest: {
      slug?: string;
      description?: string;
    };
    ProjectSearchResponse: {
      id: string;
      /** Format: date-time */
      created_at: string;
      slug: string;
      /** @default project */
      type: components["schemas"]["ProjectSearchResponseTypeEnum"];
    };
    /**
     * @description * `project` - project
     * @enum {string}
     */
    ProjectSearchResponseTypeEnum: "project";
    ProjectsPreviewTemplatesCreateAuthEnabledErrorComponent: {
      /**
       * @description * `auth_enabled` - auth_enabled
       * @enum {string}
       */
      attr: "auth_enabled";
      /**
       * @description * `invalid` - invalid
       * * `null` - null
       * @enum {string}
       */
      code: "invalid" | "null";
      detail: string;
    };
    ProjectsPreviewTemplatesCreateAuthPasswordErrorComponent: {
      /**
       * @description * `auth_password` - auth_password
       * @enum {string}
       */
      attr: "auth_password";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    ProjectsPreviewTemplatesCreateAuthUserErrorComponent: {
      /**
       * @description * `auth_user` - auth_user
       * @enum {string}
       */
      attr: "auth_user";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    ProjectsPreviewTemplatesCreateAutoTeardownErrorComponent: {
      /**
       * @description * `auto_teardown` - auto_teardown
       * @enum {string}
       */
      attr: "auto_teardown";
      /**
       * @description * `invalid` - invalid
       * * `null` - null
       * @enum {string}
       */
      code: "invalid" | "null";
      detail: string;
    };
    ProjectsPreviewTemplatesCreateBaseEnvironmentIdErrorComponent: {
      /**
       * @description * `base_environment_id` - base_environment_id
       * @enum {string}
       */
      attr: "base_environment_id";
      /**
       * @description * `does_not_exist` - does_not_exist
       * * `incorrect_type` - incorrect_type
       * * `null` - null
       * * `required` - required
       * @enum {string}
       */
      code: "does_not_exist" | "incorrect_type" | "null" | "required";
      detail: string;
    };
    ProjectsPreviewTemplatesCreateCloneStrategyErrorComponent: {
      /**
       * @description * `clone_strategy` - clone_strategy
       * @enum {string}
       */
      attr: "clone_strategy";
      /**
       * @description * `invalid_choice` - invalid_choice
       * * `null` - null
       * @enum {string}
       */
      code: "invalid_choice" | "null";
      detail: string;
    };
    ProjectsPreviewTemplatesCreateEnvVariablesErrorComponent: {
      /**
       * @description * `env_variables` - env_variables
       * @enum {string}
       */
      attr: "env_variables";
      /**
       * @description * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "invalid" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    ProjectsPreviewTemplatesCreateError: components["schemas"]["ProjectsPreviewTemplatesCreateNonFieldErrorsErrorComponent"] | components["schemas"]["ProjectsPreviewTemplatesCreateSlugErrorComponent"] | components["schemas"]["ProjectsPreviewTemplatesCreateServicesToCloneIdsErrorComponent"] | components["schemas"]["ProjectsPreviewTemplatesCreateBaseEnvironmentIdErrorComponent"] | components["schemas"]["ProjectsPreviewTemplatesCreateCloneStrategyErrorComponent"] | components["schemas"]["ProjectsPreviewTemplatesCreateTtlSecondsErrorComponent"] | components["schemas"]["ProjectsPreviewTemplatesCreateAutoTeardownErrorComponent"] | components["schemas"]["ProjectsPreviewTemplatesCreateIsDefaultErrorComponent"] | components["schemas"]["ProjectsPreviewTemplatesCreatePreviewEnvLimitErrorComponent"] | components["schemas"]["ProjectsPreviewTemplatesCreatePreviewRootDomainErrorComponent"] | components["schemas"]["ProjectsPreviewTemplatesCreateAuthEnabledErrorComponent"] | components["schemas"]["ProjectsPreviewTemplatesCreateAuthUserErrorComponent"] | components["schemas"]["ProjectsPreviewTemplatesCreateAuthPasswordErrorComponent"] | components["schemas"]["ProjectsPreviewTemplatesCreateEnvVariablesErrorComponent"];
    ProjectsPreviewTemplatesCreateErrorResponse400: components["schemas"]["ProjectsPreviewTemplatesCreateValidationError"] | components["schemas"]["ParseErrorResponse"];
    ProjectsPreviewTemplatesCreateIsDefaultErrorComponent: {
      /**
       * @description * `is_default` - is_default
       * @enum {string}
       */
      attr: "is_default";
      /**
       * @description * `invalid` - invalid
       * * `null` - null
       * @enum {string}
       */
      code: "invalid" | "null";
      detail: string;
    };
    ProjectsPreviewTemplatesCreateNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors
       * @enum {string}
       */
      attr: "non_field_errors";
      /**
       * @description * `invalid` - invalid
       * @enum {string}
       */
      code: "invalid";
      detail: string;
    };
    ProjectsPreviewTemplatesCreatePreviewEnvLimitErrorComponent: {
      /**
       * @description * `preview_env_limit` - preview_env_limit
       * @enum {string}
       */
      attr: "preview_env_limit";
      /**
       * @description * `invalid` - invalid
       * * `max_string_length` - max_string_length
       * * `max_value` - max_value
       * * `min_value` - min_value
       * * `null` - null
       * @enum {string}
       */
      code: "invalid" | "max_string_length" | "max_value" | "min_value" | "null";
      detail: string;
    };
    ProjectsPreviewTemplatesCreatePreviewRootDomainErrorComponent: {
      /**
       * @description * `preview_root_domain` - preview_root_domain
       * @enum {string}
       */
      attr: "preview_root_domain";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `max_length` - max_length
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "max_length" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    ProjectsPreviewTemplatesCreateServicesToCloneIdsErrorComponent: {
      /**
       * @description * `services_to_clone_ids` - services_to_clone_ids
       * @enum {string}
       */
      attr: "services_to_clone_ids";
      /**
       * @description * `does_not_exist` - does_not_exist
       * * `incorrect_type` - incorrect_type
       * * `not_a_list` - not_a_list
       * * `null` - null
       * @enum {string}
       */
      code: "does_not_exist" | "incorrect_type" | "not_a_list" | "null";
      detail: string;
    };
    ProjectsPreviewTemplatesCreateSlugErrorComponent: {
      /**
       * @description * `slug` - slug
       * @enum {string}
       */
      attr: "slug";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `max_length` - max_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "max_length" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    ProjectsPreviewTemplatesCreateTtlSecondsErrorComponent: {
      /**
       * @description * `ttl_seconds` - ttl_seconds
       * @enum {string}
       */
      attr: "ttl_seconds";
      /**
       * @description * `invalid` - invalid
       * * `max_string_length` - max_string_length
       * * `max_value` - max_value
       * * `min_value` - min_value
       * @enum {string}
       */
      code: "invalid" | "max_string_length" | "max_value" | "min_value";
      detail: string;
    };
    ProjectsPreviewTemplatesCreateValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["ProjectsPreviewTemplatesCreateError"][];
    };
    ProjectsPreviewTemplatesDestroyErrorResponse400: components["schemas"]["ParseErrorResponse"];
    ProjectsPreviewTemplatesListErrorResponse400: components["schemas"]["ParseErrorResponse"];
    ProjectsPreviewTemplatesPartialUpdateAuthEnabledErrorComponent: {
      /**
       * @description * `auth_enabled` - auth_enabled
       * @enum {string}
       */
      attr: "auth_enabled";
      /**
       * @description * `invalid` - invalid
       * * `null` - null
       * @enum {string}
       */
      code: "invalid" | "null";
      detail: string;
    };
    ProjectsPreviewTemplatesPartialUpdateAuthPasswordErrorComponent: {
      /**
       * @description * `auth_password` - auth_password
       * @enum {string}
       */
      attr: "auth_password";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    ProjectsPreviewTemplatesPartialUpdateAuthUserErrorComponent: {
      /**
       * @description * `auth_user` - auth_user
       * @enum {string}
       */
      attr: "auth_user";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    ProjectsPreviewTemplatesPartialUpdateAutoTeardownErrorComponent: {
      /**
       * @description * `auto_teardown` - auto_teardown
       * @enum {string}
       */
      attr: "auto_teardown";
      /**
       * @description * `invalid` - invalid
       * * `null` - null
       * @enum {string}
       */
      code: "invalid" | "null";
      detail: string;
    };
    ProjectsPreviewTemplatesPartialUpdateBaseEnvironmentIdErrorComponent: {
      /**
       * @description * `base_environment_id` - base_environment_id
       * @enum {string}
       */
      attr: "base_environment_id";
      /**
       * @description * `does_not_exist` - does_not_exist
       * * `incorrect_type` - incorrect_type
       * * `null` - null
       * * `required` - required
       * @enum {string}
       */
      code: "does_not_exist" | "incorrect_type" | "null" | "required";
      detail: string;
    };
    ProjectsPreviewTemplatesPartialUpdateCloneStrategyErrorComponent: {
      /**
       * @description * `clone_strategy` - clone_strategy
       * @enum {string}
       */
      attr: "clone_strategy";
      /**
       * @description * `invalid_choice` - invalid_choice
       * * `null` - null
       * @enum {string}
       */
      code: "invalid_choice" | "null";
      detail: string;
    };
    ProjectsPreviewTemplatesPartialUpdateEnvVariablesErrorComponent: {
      /**
       * @description * `env_variables` - env_variables
       * @enum {string}
       */
      attr: "env_variables";
      /**
       * @description * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "invalid" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    ProjectsPreviewTemplatesPartialUpdateError: components["schemas"]["ProjectsPreviewTemplatesPartialUpdateNonFieldErrorsErrorComponent"] | components["schemas"]["ProjectsPreviewTemplatesPartialUpdateSlugErrorComponent"] | components["schemas"]["ProjectsPreviewTemplatesPartialUpdateServicesToCloneIdsErrorComponent"] | components["schemas"]["ProjectsPreviewTemplatesPartialUpdateBaseEnvironmentIdErrorComponent"] | components["schemas"]["ProjectsPreviewTemplatesPartialUpdateCloneStrategyErrorComponent"] | components["schemas"]["ProjectsPreviewTemplatesPartialUpdateTtlSecondsErrorComponent"] | components["schemas"]["ProjectsPreviewTemplatesPartialUpdateAutoTeardownErrorComponent"] | components["schemas"]["ProjectsPreviewTemplatesPartialUpdateIsDefaultErrorComponent"] | components["schemas"]["ProjectsPreviewTemplatesPartialUpdatePreviewEnvLimitErrorComponent"] | components["schemas"]["ProjectsPreviewTemplatesPartialUpdatePreviewRootDomainErrorComponent"] | components["schemas"]["ProjectsPreviewTemplatesPartialUpdateAuthEnabledErrorComponent"] | components["schemas"]["ProjectsPreviewTemplatesPartialUpdateAuthUserErrorComponent"] | components["schemas"]["ProjectsPreviewTemplatesPartialUpdateAuthPasswordErrorComponent"] | components["schemas"]["ProjectsPreviewTemplatesPartialUpdateEnvVariablesErrorComponent"];
    ProjectsPreviewTemplatesPartialUpdateErrorResponse400: components["schemas"]["ProjectsPreviewTemplatesPartialUpdateValidationError"] | components["schemas"]["ParseErrorResponse"];
    ProjectsPreviewTemplatesPartialUpdateIsDefaultErrorComponent: {
      /**
       * @description * `is_default` - is_default
       * @enum {string}
       */
      attr: "is_default";
      /**
       * @description * `invalid` - invalid
       * * `null` - null
       * @enum {string}
       */
      code: "invalid" | "null";
      detail: string;
    };
    ProjectsPreviewTemplatesPartialUpdateNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors
       * @enum {string}
       */
      attr: "non_field_errors";
      /**
       * @description * `invalid` - invalid
       * @enum {string}
       */
      code: "invalid";
      detail: string;
    };
    ProjectsPreviewTemplatesPartialUpdatePreviewEnvLimitErrorComponent: {
      /**
       * @description * `preview_env_limit` - preview_env_limit
       * @enum {string}
       */
      attr: "preview_env_limit";
      /**
       * @description * `invalid` - invalid
       * * `max_string_length` - max_string_length
       * * `max_value` - max_value
       * * `min_value` - min_value
       * * `null` - null
       * @enum {string}
       */
      code: "invalid" | "max_string_length" | "max_value" | "min_value" | "null";
      detail: string;
    };
    ProjectsPreviewTemplatesPartialUpdatePreviewRootDomainErrorComponent: {
      /**
       * @description * `preview_root_domain` - preview_root_domain
       * @enum {string}
       */
      attr: "preview_root_domain";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `max_length` - max_length
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "max_length" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    ProjectsPreviewTemplatesPartialUpdateServicesToCloneIdsErrorComponent: {
      /**
       * @description * `services_to_clone_ids` - services_to_clone_ids
       * @enum {string}
       */
      attr: "services_to_clone_ids";
      /**
       * @description * `does_not_exist` - does_not_exist
       * * `incorrect_type` - incorrect_type
       * * `not_a_list` - not_a_list
       * * `null` - null
       * @enum {string}
       */
      code: "does_not_exist" | "incorrect_type" | "not_a_list" | "null";
      detail: string;
    };
    ProjectsPreviewTemplatesPartialUpdateSlugErrorComponent: {
      /**
       * @description * `slug` - slug
       * @enum {string}
       */
      attr: "slug";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `max_length` - max_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "max_length" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    ProjectsPreviewTemplatesPartialUpdateTtlSecondsErrorComponent: {
      /**
       * @description * `ttl_seconds` - ttl_seconds
       * @enum {string}
       */
      attr: "ttl_seconds";
      /**
       * @description * `invalid` - invalid
       * * `max_string_length` - max_string_length
       * * `max_value` - max_value
       * * `min_value` - min_value
       * @enum {string}
       */
      code: "invalid" | "max_string_length" | "max_value" | "min_value";
      detail: string;
    };
    ProjectsPreviewTemplatesPartialUpdateValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["ProjectsPreviewTemplatesPartialUpdateError"][];
    };
    ProjectsPreviewTemplatesRetrieveErrorResponse400: components["schemas"]["ParseErrorResponse"];
    ProjectsServiceDetailsDeploymentsBuildLogsRetrieveErrorResponse400: components["schemas"]["ParseErrorResponse"];
    ProjectsServiceDetailsDeploymentsHttpLogsFieldsListErrorResponse400: components["schemas"]["ParseErrorResponse"];
    ProjectsServiceDetailsDeploymentsHttpLogsListError: components["schemas"]["ProjectsServiceDetailsDeploymentsHttpLogsListTimeErrorComponent"] | components["schemas"]["ProjectsServiceDetailsDeploymentsHttpLogsListRequestMethodErrorComponent"] | components["schemas"]["ProjectsServiceDetailsDeploymentsHttpLogsListRequestQueryErrorComponent"] | components["schemas"]["ProjectsServiceDetailsDeploymentsHttpLogsListRequestIdErrorComponent"] | components["schemas"]["ProjectsServiceDetailsDeploymentsHttpLogsListSortByErrorComponent"];
    ProjectsServiceDetailsDeploymentsHttpLogsListErrorResponse400: components["schemas"]["ProjectsServiceDetailsDeploymentsHttpLogsListValidationError"] | components["schemas"]["ParseErrorResponse"];
    ProjectsServiceDetailsDeploymentsHttpLogsListRequestIdErrorComponent: {
      /**
       * @description * `request_id` - request_id
       * @enum {string}
       */
      attr: "request_id";
      /**
       * @description * `null_characters_not_allowed` - null_characters_not_allowed
       * @enum {string}
       */
      code: "null_characters_not_allowed";
      detail: string;
    };
    ProjectsServiceDetailsDeploymentsHttpLogsListRequestMethodErrorComponent: {
      /**
       * @description * `request_method` - request_method
       * @enum {string}
       */
      attr: "request_method";
      /**
       * @description * `invalid_choice` - invalid_choice
       * * `invalid_list` - invalid_list
       * @enum {string}
       */
      code: "invalid_choice" | "invalid_list";
      detail: string;
    };
    ProjectsServiceDetailsDeploymentsHttpLogsListRequestQueryErrorComponent: {
      /**
       * @description * `request_query` - request_query
       * @enum {string}
       */
      attr: "request_query";
      /**
       * @description * `null_characters_not_allowed` - null_characters_not_allowed
       * @enum {string}
       */
      code: "null_characters_not_allowed";
      detail: string;
    };
    ProjectsServiceDetailsDeploymentsHttpLogsListSortByErrorComponent: {
      /**
       * @description * `sort_by` - sort_by
       * @enum {string}
       */
      attr: "sort_by";
      /**
       * @description * `invalid_choice` - invalid_choice
       * @enum {string}
       */
      code: "invalid_choice";
      detail: string;
    };
    ProjectsServiceDetailsDeploymentsHttpLogsListTimeErrorComponent: {
      /**
       * @description * `time` - time
       * @enum {string}
       */
      attr: "time";
      /**
       * @description * `invalid` - invalid
       * @enum {string}
       */
      code: "invalid";
      detail: string;
    };
    ProjectsServiceDetailsDeploymentsHttpLogsListValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["ProjectsServiceDetailsDeploymentsHttpLogsListError"][];
    };
    ProjectsServiceDetailsDeploymentsHttpLogsRetrieveErrorResponse400: components["schemas"]["ParseErrorResponse"];
    ProjectsServiceDetailsDeploymentsListError: components["schemas"]["ProjectsServiceDetailsDeploymentsListStatusErrorComponent"] | components["schemas"]["ProjectsServiceDetailsDeploymentsListQueuedAtErrorComponent"];
    ProjectsServiceDetailsDeploymentsListErrorResponse400: components["schemas"]["ProjectsServiceDetailsDeploymentsListValidationError"] | components["schemas"]["ParseErrorResponse"];
    ProjectsServiceDetailsDeploymentsListQueuedAtErrorComponent: {
      /**
       * @description * `queued_at` - queued_at
       * @enum {string}
       */
      attr: "queued_at";
      /**
       * @description * `invalid` - invalid
       * @enum {string}
       */
      code: "invalid";
      detail: string;
    };
    ProjectsServiceDetailsDeploymentsListStatusErrorComponent: {
      /**
       * @description * `status` - status
       * @enum {string}
       */
      attr: "status";
      /**
       * @description * `invalid_choice` - invalid_choice
       * * `invalid_list` - invalid_list
       * @enum {string}
       */
      code: "invalid_choice" | "invalid_list";
      detail: string;
    };
    ProjectsServiceDetailsDeploymentsListValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["ProjectsServiceDetailsDeploymentsListError"][];
    };
    ProjectsServiceDetailsDeploymentsMetricsListErrorResponse400: components["schemas"]["ParseErrorResponse"];
    ProjectsServiceDetailsDeploymentsRetrieveErrorResponse400: components["schemas"]["ParseErrorResponse"];
    ProjectsServiceDetailsDeploymentsRuntimeLogsRetrieveErrorResponse400: components["schemas"]["ParseErrorResponse"];
    ProjectsServiceDetailsHttpLogsFieldsListErrorResponse400: components["schemas"]["ParseErrorResponse"];
    ProjectsServiceDetailsHttpLogsListError: components["schemas"]["ProjectsServiceDetailsHttpLogsListTimeErrorComponent"] | components["schemas"]["ProjectsServiceDetailsHttpLogsListRequestMethodErrorComponent"] | components["schemas"]["ProjectsServiceDetailsHttpLogsListRequestQueryErrorComponent"] | components["schemas"]["ProjectsServiceDetailsHttpLogsListRequestIdErrorComponent"] | components["schemas"]["ProjectsServiceDetailsHttpLogsListSortByErrorComponent"];
    ProjectsServiceDetailsHttpLogsListErrorResponse400: components["schemas"]["ProjectsServiceDetailsHttpLogsListValidationError"] | components["schemas"]["ParseErrorResponse"];
    ProjectsServiceDetailsHttpLogsListRequestIdErrorComponent: {
      /**
       * @description * `request_id` - request_id
       * @enum {string}
       */
      attr: "request_id";
      /**
       * @description * `null_characters_not_allowed` - null_characters_not_allowed
       * @enum {string}
       */
      code: "null_characters_not_allowed";
      detail: string;
    };
    ProjectsServiceDetailsHttpLogsListRequestMethodErrorComponent: {
      /**
       * @description * `request_method` - request_method
       * @enum {string}
       */
      attr: "request_method";
      /**
       * @description * `invalid_choice` - invalid_choice
       * * `invalid_list` - invalid_list
       * @enum {string}
       */
      code: "invalid_choice" | "invalid_list";
      detail: string;
    };
    ProjectsServiceDetailsHttpLogsListRequestQueryErrorComponent: {
      /**
       * @description * `request_query` - request_query
       * @enum {string}
       */
      attr: "request_query";
      /**
       * @description * `null_characters_not_allowed` - null_characters_not_allowed
       * @enum {string}
       */
      code: "null_characters_not_allowed";
      detail: string;
    };
    ProjectsServiceDetailsHttpLogsListSortByErrorComponent: {
      /**
       * @description * `sort_by` - sort_by
       * @enum {string}
       */
      attr: "sort_by";
      /**
       * @description * `invalid_choice` - invalid_choice
       * @enum {string}
       */
      code: "invalid_choice";
      detail: string;
    };
    ProjectsServiceDetailsHttpLogsListTimeErrorComponent: {
      /**
       * @description * `time` - time
       * @enum {string}
       */
      attr: "time";
      /**
       * @description * `invalid` - invalid
       * @enum {string}
       */
      code: "invalid";
      detail: string;
    };
    ProjectsServiceDetailsHttpLogsListValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["ProjectsServiceDetailsHttpLogsListError"][];
    };
    ProjectsServiceDetailsHttpLogsRetrieveErrorResponse400: components["schemas"]["ParseErrorResponse"];
    ProjectsServiceDetailsMetricsListErrorResponse400: components["schemas"]["ParseErrorResponse"];
    ProjectsServiceListListErrorResponse400: components["schemas"]["ParseErrorResponse"];
    ProjectsVariablesCreateError: components["schemas"]["ProjectsVariablesCreateNonFieldErrorsErrorComponent"] | components["schemas"]["ProjectsVariablesCreateKeyErrorComponent"] | components["schemas"]["ProjectsVariablesCreateValueErrorComponent"];
    ProjectsVariablesCreateErrorResponse400: components["schemas"]["ProjectsVariablesCreateValidationError"] | components["schemas"]["ParseErrorResponse"];
    ProjectsVariablesCreateKeyErrorComponent: {
      /**
       * @description * `key` - key
       * @enum {string}
       */
      attr: "key";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    ProjectsVariablesCreateNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors
       * @enum {string}
       */
      attr: "non_field_errors";
      /**
       * @description * `invalid` - invalid
       * @enum {string}
       */
      code: "invalid";
      detail: string;
    };
    ProjectsVariablesCreateValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["ProjectsVariablesCreateError"][];
    };
    ProjectsVariablesCreateValueErrorComponent: {
      /**
       * @description * `value` - value
       * @enum {string}
       */
      attr: "value";
      /**
       * @description * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "invalid" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    ProjectsVariablesDestroyErrorResponse400: components["schemas"]["ParseErrorResponse"];
    ProjectsVariablesListErrorResponse400: components["schemas"]["ParseErrorResponse"];
    ProjectsVariablesPartialUpdateError: components["schemas"]["ProjectsVariablesPartialUpdateNonFieldErrorsErrorComponent"] | components["schemas"]["ProjectsVariablesPartialUpdateKeyErrorComponent"] | components["schemas"]["ProjectsVariablesPartialUpdateValueErrorComponent"];
    ProjectsVariablesPartialUpdateErrorResponse400: components["schemas"]["ProjectsVariablesPartialUpdateValidationError"] | components["schemas"]["ParseErrorResponse"];
    ProjectsVariablesPartialUpdateKeyErrorComponent: {
      /**
       * @description * `key` - key
       * @enum {string}
       */
      attr: "key";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    ProjectsVariablesPartialUpdateNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors
       * @enum {string}
       */
      attr: "non_field_errors";
      /**
       * @description * `invalid` - invalid
       * @enum {string}
       */
      code: "invalid";
      detail: string;
    };
    ProjectsVariablesPartialUpdateValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["ProjectsVariablesPartialUpdateError"][];
    };
    ProjectsVariablesPartialUpdateValueErrorComponent: {
      /**
       * @description * `value` - value
       * @enum {string}
       */
      attr: "value";
      /**
       * @description * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "invalid" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    ProjectsVariablesRetrieveErrorResponse400: components["schemas"]["ParseErrorResponse"];
    ProjectsVariablesUpdateError: components["schemas"]["ProjectsVariablesUpdateNonFieldErrorsErrorComponent"] | components["schemas"]["ProjectsVariablesUpdateKeyErrorComponent"] | components["schemas"]["ProjectsVariablesUpdateValueErrorComponent"];
    ProjectsVariablesUpdateErrorResponse400: components["schemas"]["ProjectsVariablesUpdateValidationError"] | components["schemas"]["ParseErrorResponse"];
    ProjectsVariablesUpdateKeyErrorComponent: {
      /**
       * @description * `key` - key
       * @enum {string}
       */
      attr: "key";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    ProjectsVariablesUpdateNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors
       * @enum {string}
       */
      attr: "non_field_errors";
      /**
       * @description * `invalid` - invalid
       * @enum {string}
       */
      code: "invalid";
      detail: string;
    };
    ProjectsVariablesUpdateValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["ProjectsVariablesUpdateError"][];
    };
    ProjectsVariablesUpdateValueErrorComponent: {
      /**
       * @description * `value` - value
       * @enum {string}
       */
      attr: "value";
      /**
       * @description * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "invalid" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    RailpackBuilderOptions: {
      publish_directory: string;
      is_spa: boolean;
      not_found_page: string | null;
      index_page: string;
      generated_caddyfile: string | null;
      build_directory: string | null;
      custom_install_command: string | null;
      custom_build_command: string | null;
      custom_start_command: string | null;
      is_static: boolean;
    };
    RailpackBuilderOptionsRequest: {
      publish_directory: string;
      is_spa: boolean;
      not_found_page: string | null;
      index_page: string;
      build_directory: string | null;
      custom_install_command: string | null;
      custom_build_command: string | null;
      custom_start_command: string | null;
      is_static: boolean;
    };
    ReDeployGitServiceError: components["schemas"]["ReDeployGitServiceNonFieldErrorsErrorComponent"] | components["schemas"]["ReDeployGitServiceIgnoreBuildCacheErrorComponent"];
    ReDeployGitServiceErrorResponse400: components["schemas"]["ReDeployGitServiceValidationError"] | components["schemas"]["ParseErrorResponse"];
    ReDeployGitServiceIgnoreBuildCacheErrorComponent: {
      /**
       * @description * `ignore_build_cache` - ignore_build_cache
       * @enum {string}
       */
      attr: "ignore_build_cache";
      /**
       * @description * `invalid` - invalid
       * * `null` - null
       * @enum {string}
       */
      code: "invalid" | "null";
      detail: string;
    };
    ReDeployGitServiceNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors
       * @enum {string}
       */
      attr: "non_field_errors";
      /**
       * @description * `invalid` - invalid
       * @enum {string}
       */
      code: "invalid";
      detail: string;
    };
    ReDeployGitServiceValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["ReDeployGitServiceError"][];
    };
    RecentDeploymentsListErrorResponse400: components["schemas"]["ParseErrorResponse"];
    RedeployDockerServiceErrorResponse400: components["schemas"]["ParseErrorResponse"];
    RegenerateServiceDeployTokenAutoDeployEnabledErrorComponent: {
      /**
       * @description * `auto_deploy_enabled` - auto_deploy_enabled
       * @enum {string}
       */
      attr: "auto_deploy_enabled";
      /**
       * @description * `invalid` - invalid
       * * `null` - null
       * @enum {string}
       */
      code: "invalid" | "null";
      detail: string;
    };
    RegenerateServiceDeployTokenCleanupQueueOnAutoDeployErrorComponent: {
      /**
       * @description * `cleanup_queue_on_auto_deploy` - cleanup_queue_on_auto_deploy
       * @enum {string}
       */
      attr: "cleanup_queue_on_auto_deploy";
      /**
       * @description * `invalid` - invalid
       * * `null` - null
       * @enum {string}
       */
      code: "invalid" | "null";
      detail: string;
    };
    RegenerateServiceDeployTokenError: components["schemas"]["RegenerateServiceDeployTokenNonFieldErrorsErrorComponent"] | components["schemas"]["RegenerateServiceDeployTokenSlugErrorComponent"] | components["schemas"]["RegenerateServiceDeployTokenAutoDeployEnabledErrorComponent"] | components["schemas"]["RegenerateServiceDeployTokenWatchPathsErrorComponent"] | components["schemas"]["RegenerateServiceDeployTokenCleanupQueueOnAutoDeployErrorComponent"] | components["schemas"]["RegenerateServiceDeployTokenPrPreviewEnvsEnabledErrorComponent"];
    RegenerateServiceDeployTokenErrorResponse400: components["schemas"]["RegenerateServiceDeployTokenValidationError"] | components["schemas"]["ParseErrorResponse"];
    RegenerateServiceDeployTokenNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors
       * @enum {string}
       */
      attr: "non_field_errors";
      /**
       * @description * `invalid` - invalid
       * @enum {string}
       */
      code: "invalid";
      detail: string;
    };
    RegenerateServiceDeployTokenPrPreviewEnvsEnabledErrorComponent: {
      /**
       * @description * `pr_preview_envs_enabled` - pr_preview_envs_enabled
       * @enum {string}
       */
      attr: "pr_preview_envs_enabled";
      /**
       * @description * `invalid` - invalid
       * * `null` - null
       * @enum {string}
       */
      code: "invalid" | "null";
      detail: string;
    };
    RegenerateServiceDeployTokenSlugErrorComponent: {
      /**
       * @description * `slug` - slug
       * @enum {string}
       */
      attr: "slug";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `max_length` - max_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "max_length" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    RegenerateServiceDeployTokenValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["RegenerateServiceDeployTokenError"][];
    };
    RegenerateServiceDeployTokenWatchPathsErrorComponent: {
      /**
       * @description * `watch_paths` - watch_paths
       * @enum {string}
       */
      attr: "watch_paths";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `max_length` - max_length
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "max_length" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    RequestEnvChangesError: components["schemas"]["RequestEnvChangesNonFieldErrorsErrorComponent"] | components["schemas"]["RequestEnvChangesNewValueErrorComponent"];
    RequestEnvChangesErrorResponse400: components["schemas"]["RequestEnvChangesValidationError"] | components["schemas"]["ParseErrorResponse"];
    RequestEnvChangesNewValueErrorComponent: {
      /**
       * @description * `new_value` - new_value
       * @enum {string}
       */
      attr: "new_value";
      /**
       * @description * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "invalid" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    RequestEnvChangesNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors
       * @enum {string}
       */
      attr: "non_field_errors";
      /**
       * @description * `invalid` - invalid
       * @enum {string}
       */
      code: "invalid";
      detail: string;
    };
    RequestEnvChangesValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["RequestEnvChangesError"][];
    };
    /**
     * @description * `GET` - GET
     * * `POST` - POST
     * * `PUT` - PUT
     * * `DELETE` - DELETE
     * * `PATCH` - PATCH
     * * `OPTIONS` - OPTIONS
     * * `HEAD` - HEAD
     * @enum {string}
     */
    RequestMethodEnum: "GET" | "POST" | "PUT" | "DELETE" | "PATCH" | "OPTIONS" | "HEAD";
    /**
     * @description * `HTTP/1.0` - HTTP/1.0
     * * `HTTP/1.1` - HTTP/1.1
     * * `HTTP/2.0` - HTTP/2.0
     * * `HTTP/3.0` - HTTP/3.0
     * @enum {string}
     */
    RequestProtocolEnum: "HTTP/1.0" | "HTTP/1.1" | "HTTP/2.0" | "HTTP/3.0";
    RequestServiceChangesError: components["schemas"]["RequestServiceChangesNonFieldErrorsErrorComponent"] | components["schemas"]["RequestServiceChangesTypeErrorComponent"] | components["schemas"]["RequestServiceChangesItemIdErrorComponent"] | components["schemas"]["RequestServiceChangesNewValueNonFieldErrorsErrorComponent"] | components["schemas"]["RequestServiceChangesNewValueDomainErrorComponent"] | components["schemas"]["RequestServiceChangesNewValueBasePathErrorComponent"] | components["schemas"]["RequestServiceChangesNewValueStripPrefixErrorComponent"] | components["schemas"]["RequestServiceChangesNewValueRedirectToNonFieldErrorsErrorComponent"] | components["schemas"]["RequestServiceChangesNewValueRedirectToUrlErrorComponent"] | components["schemas"]["RequestServiceChangesNewValueRedirectToPermanentErrorComponent"] | components["schemas"]["RequestServiceChangesNewValueAssociatedPortErrorComponent"] | components["schemas"]["RequestServiceChangesFieldErrorComponent"] | components["schemas"]["RequestServiceChangesNewValueNameErrorComponent"] | components["schemas"]["RequestServiceChangesNewValueContainerPathErrorComponent"] | components["schemas"]["RequestServiceChangesNewValueHostPathErrorComponent"] | components["schemas"]["RequestServiceChangesNewValueModeErrorComponent"] | components["schemas"]["RequestServiceChangesNewValueKeyErrorComponent"] | components["schemas"]["RequestServiceChangesNewValueValueErrorComponent"] | components["schemas"]["RequestServiceChangesNewValueHostErrorComponent"] | components["schemas"]["RequestServiceChangesNewValueForwardedErrorComponent"] | components["schemas"]["RequestServiceChangesNewValueImageErrorComponent"] | components["schemas"]["RequestServiceChangesNewValueCredentialsNonFieldErrorsErrorComponent"] | components["schemas"]["RequestServiceChangesNewValueCredentialsUsernameErrorComponent"] | components["schemas"]["RequestServiceChangesNewValueCredentialsPasswordErrorComponent"] | components["schemas"]["RequestServiceChangesNewValueErrorComponent"] | components["schemas"]["RequestServiceChangesNewValueTypeErrorComponent"] | components["schemas"]["RequestServiceChangesNewValueTimeoutSecondsErrorComponent"] | components["schemas"]["RequestServiceChangesNewValueIntervalSecondsErrorComponent"] | components["schemas"]["RequestServiceChangesNewValueCpusErrorComponent"] | components["schemas"]["RequestServiceChangesNewValueMemoryNonFieldErrorsErrorComponent"] | components["schemas"]["RequestServiceChangesNewValueMemoryValueErrorComponent"] | components["schemas"]["RequestServiceChangesNewValueMemoryUnitErrorComponent"] | components["schemas"]["RequestServiceChangesNewValueContentsErrorComponent"] | components["schemas"]["RequestServiceChangesNewValueMountPathErrorComponent"] | components["schemas"]["RequestServiceChangesNewValueLanguageErrorComponent"] | components["schemas"]["RequestServiceChangesNewValueRepositoryUrlErrorComponent"] | components["schemas"]["RequestServiceChangesNewValueBranchNameErrorComponent"] | components["schemas"]["RequestServiceChangesNewValueCommitShaErrorComponent"] | components["schemas"]["RequestServiceChangesNewValueGitAppIdErrorComponent"] | components["schemas"]["RequestServiceChangesNewValueBuilderErrorComponent"] | components["schemas"]["RequestServiceChangesNewValueBuildContextDirErrorComponent"] | components["schemas"]["RequestServiceChangesNewValueDockerfilePathErrorComponent"] | components["schemas"]["RequestServiceChangesNewValueBuildStageTargetErrorComponent"] | components["schemas"]["RequestServiceChangesNewValuePublishDirectoryErrorComponent"] | components["schemas"]["RequestServiceChangesNewValueIsSpaErrorComponent"] | components["schemas"]["RequestServiceChangesNewValueNotFoundPageErrorComponent"] | components["schemas"]["RequestServiceChangesNewValueIndexPageErrorComponent"] | components["schemas"]["RequestServiceChangesNewValueIsStaticErrorComponent"] | components["schemas"]["RequestServiceChangesNewValueBuildDirectoryErrorComponent"] | components["schemas"]["RequestServiceChangesNewValueCustomInstallCommandErrorComponent"] | components["schemas"]["RequestServiceChangesNewValueCustomBuildCommandErrorComponent"] | components["schemas"]["RequestServiceChangesNewValueCustomStartCommandErrorComponent"];
    RequestServiceChangesErrorResponse400: components["schemas"]["RequestServiceChangesValidationError"] | components["schemas"]["ParseErrorResponse"];
    RequestServiceChangesFieldErrorComponent: {
      /**
       * @description * `field` - field
       * @enum {string}
       */
      attr: "field";
      /**
       * @description * `invalid_choice` - invalid_choice
       * * `null` - null
       * * `required` - required
       * @enum {string}
       */
      code: "invalid_choice" | "null" | "required";
      detail: string;
    };
    RequestServiceChangesItemIdErrorComponent: {
      /**
       * @description * `item_id` - item_id
       * @enum {string}
       */
      attr: "item_id";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `max_length` - max_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "max_length" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    RequestServiceChangesNewValueAssociatedPortErrorComponent: {
      /**
       * @description * `new_value.associated_port` - new_value.associated_port
       * @enum {string}
       */
      attr: "new_value.associated_port";
      /**
       * @description * `invalid` - invalid
       * * `max_string_length` - max_string_length
       * * `min_value` - min_value
       * * `null` - null
       * @enum {string}
       */
      code: "invalid" | "max_string_length" | "min_value" | "null";
      detail: string;
    };
    RequestServiceChangesNewValueBasePathErrorComponent: {
      /**
       * @description * `new_value.base_path` - new_value.base_path
       * @enum {string}
       */
      attr: "new_value.base_path";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    RequestServiceChangesNewValueBranchNameErrorComponent: {
      /**
       * @description * `new_value.branch_name` - new_value.branch_name
       * @enum {string}
       */
      attr: "new_value.branch_name";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    RequestServiceChangesNewValueBuildContextDirErrorComponent: {
      /**
       * @description * `new_value.build_context_dir` - new_value.build_context_dir
       * @enum {string}
       */
      attr: "new_value.build_context_dir";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    RequestServiceChangesNewValueBuildDirectoryErrorComponent: {
      /**
       * @description * `new_value.build_directory` - new_value.build_directory
       * @enum {string}
       */
      attr: "new_value.build_directory";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    RequestServiceChangesNewValueBuildStageTargetErrorComponent: {
      /**
       * @description * `new_value.build_stage_target` - new_value.build_stage_target
       * @enum {string}
       */
      attr: "new_value.build_stage_target";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    RequestServiceChangesNewValueBuilderErrorComponent: {
      /**
       * @description * `new_value.builder` - new_value.builder
       * @enum {string}
       */
      attr: "new_value.builder";
      /**
       * @description * `invalid_choice` - invalid_choice
       * * `null` - null
       * @enum {string}
       */
      code: "invalid_choice" | "null";
      detail: string;
    };
    RequestServiceChangesNewValueCommitShaErrorComponent: {
      /**
       * @description * `new_value.commit_sha` - new_value.commit_sha
       * @enum {string}
       */
      attr: "new_value.commit_sha";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    RequestServiceChangesNewValueContainerPathErrorComponent: {
      /**
       * @description * `new_value.container_path` - new_value.container_path
       * @enum {string}
       */
      attr: "new_value.container_path";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `max_length` - max_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "max_length" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    RequestServiceChangesNewValueContentsErrorComponent: {
      /**
       * @description * `new_value.contents` - new_value.contents
       * @enum {string}
       */
      attr: "new_value.contents";
      /**
       * @description * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "invalid" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    RequestServiceChangesNewValueCpusErrorComponent: {
      /**
       * @description * `new_value.cpus` - new_value.cpus
       * @enum {string}
       */
      attr: "new_value.cpus";
      /**
       * @description * `invalid` - invalid
       * * `max_string_length` - max_string_length
       * * `min_value` - min_value
       * * `null` - null
       * @enum {string}
       */
      code: "invalid" | "max_string_length" | "min_value" | "null";
      detail: string;
    };
    RequestServiceChangesNewValueCredentialsNonFieldErrorsErrorComponent: {
      /**
       * @description * `new_value.credentials.non_field_errors` - new_value.credentials.non_field_errors
       * @enum {string}
       */
      attr: "new_value.credentials.non_field_errors";
      /**
       * @description * `invalid` - invalid
       * * `null` - null
       * @enum {string}
       */
      code: "invalid" | "null";
      detail: string;
    };
    RequestServiceChangesNewValueCredentialsPasswordErrorComponent: {
      /**
       * @description * `new_value.credentials.password` - new_value.credentials.password
       * @enum {string}
       */
      attr: "new_value.credentials.password";
      /**
       * @description * `invalid` - invalid
       * * `max_length` - max_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "invalid" | "max_length" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    RequestServiceChangesNewValueCredentialsUsernameErrorComponent: {
      /**
       * @description * `new_value.credentials.username` - new_value.credentials.username
       * @enum {string}
       */
      attr: "new_value.credentials.username";
      /**
       * @description * `invalid` - invalid
       * * `max_length` - max_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "invalid" | "max_length" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    RequestServiceChangesNewValueCustomBuildCommandErrorComponent: {
      /**
       * @description * `new_value.custom_build_command` - new_value.custom_build_command
       * @enum {string}
       */
      attr: "new_value.custom_build_command";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    RequestServiceChangesNewValueCustomInstallCommandErrorComponent: {
      /**
       * @description * `new_value.custom_install_command` - new_value.custom_install_command
       * @enum {string}
       */
      attr: "new_value.custom_install_command";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    RequestServiceChangesNewValueCustomStartCommandErrorComponent: {
      /**
       * @description * `new_value.custom_start_command` - new_value.custom_start_command
       * @enum {string}
       */
      attr: "new_value.custom_start_command";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    RequestServiceChangesNewValueDockerfilePathErrorComponent: {
      /**
       * @description * `new_value.dockerfile_path` - new_value.dockerfile_path
       * @enum {string}
       */
      attr: "new_value.dockerfile_path";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    RequestServiceChangesNewValueDomainErrorComponent: {
      /**
       * @description * `new_value.domain` - new_value.domain
       * @enum {string}
       */
      attr: "new_value.domain";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    RequestServiceChangesNewValueErrorComponent: {
      /**
       * @description * `new_value` - new_value
       * @enum {string}
       */
      attr: "new_value";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    RequestServiceChangesNewValueForwardedErrorComponent: {
      /**
       * @description * `new_value.forwarded` - new_value.forwarded
       * @enum {string}
       */
      attr: "new_value.forwarded";
      /**
       * @description * `invalid` - invalid
       * * `max_string_length` - max_string_length
       * * `min_value` - min_value
       * * `null` - null
       * * `required` - required
       * @enum {string}
       */
      code: "invalid" | "max_string_length" | "min_value" | "null" | "required";
      detail: string;
    };
    RequestServiceChangesNewValueGitAppIdErrorComponent: {
      /**
       * @description * `new_value.git_app_id` - new_value.git_app_id
       * @enum {string}
       */
      attr: "new_value.git_app_id";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    RequestServiceChangesNewValueHostErrorComponent: {
      /**
       * @description * `new_value.host` - new_value.host
       * @enum {string}
       */
      attr: "new_value.host";
      /**
       * @description * `invalid` - invalid
       * * `max_string_length` - max_string_length
       * * `min_value` - min_value
       * * `null` - null
       * * `required` - required
       * @enum {string}
       */
      code: "invalid" | "max_string_length" | "min_value" | "null" | "required";
      detail: string;
    };
    RequestServiceChangesNewValueHostPathErrorComponent: {
      /**
       * @description * `new_value.host_path` - new_value.host_path
       * @enum {string}
       */
      attr: "new_value.host_path";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `max_length` - max_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "max_length" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    RequestServiceChangesNewValueImageErrorComponent: {
      /**
       * @description * `new_value.image` - new_value.image
       * @enum {string}
       */
      attr: "new_value.image";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    RequestServiceChangesNewValueIndexPageErrorComponent: {
      /**
       * @description * `new_value.index_page` - new_value.index_page
       * @enum {string}
       */
      attr: "new_value.index_page";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    RequestServiceChangesNewValueIntervalSecondsErrorComponent: {
      /**
       * @description * `new_value.interval_seconds` - new_value.interval_seconds
       * @enum {string}
       */
      attr: "new_value.interval_seconds";
      /**
       * @description * `invalid` - invalid
       * * `max_string_length` - max_string_length
       * * `min_value` - min_value
       * * `null` - null
       * @enum {string}
       */
      code: "invalid" | "max_string_length" | "min_value" | "null";
      detail: string;
    };
    RequestServiceChangesNewValueIsSpaErrorComponent: {
      /**
       * @description * `new_value.is_spa` - new_value.is_spa
       * @enum {string}
       */
      attr: "new_value.is_spa";
      /**
       * @description * `invalid` - invalid
       * * `null` - null
       * @enum {string}
       */
      code: "invalid" | "null";
      detail: string;
    };
    RequestServiceChangesNewValueIsStaticErrorComponent: {
      /**
       * @description * `new_value.is_static` - new_value.is_static
       * @enum {string}
       */
      attr: "new_value.is_static";
      /**
       * @description * `invalid` - invalid
       * * `null` - null
       * @enum {string}
       */
      code: "invalid" | "null";
      detail: string;
    };
    RequestServiceChangesNewValueKeyErrorComponent: {
      /**
       * @description * `new_value.key` - new_value.key
       * @enum {string}
       */
      attr: "new_value.key";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    RequestServiceChangesNewValueLanguageErrorComponent: {
      /**
       * @description * `new_value.language` - new_value.language
       * @enum {string}
       */
      attr: "new_value.language";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    RequestServiceChangesNewValueMemoryNonFieldErrorsErrorComponent: {
      /**
       * @description * `new_value.memory.non_field_errors` - new_value.memory.non_field_errors
       * @enum {string}
       */
      attr: "new_value.memory.non_field_errors";
      /**
       * @description * `invalid` - invalid
       * * `null` - null
       * @enum {string}
       */
      code: "invalid" | "null";
      detail: string;
    };
    RequestServiceChangesNewValueMemoryUnitErrorComponent: {
      /**
       * @description * `new_value.memory.unit` - new_value.memory.unit
       * @enum {string}
       */
      attr: "new_value.memory.unit";
      /**
       * @description * `invalid_choice` - invalid_choice
       * * `null` - null
       * @enum {string}
       */
      code: "invalid_choice" | "null";
      detail: string;
    };
    RequestServiceChangesNewValueMemoryValueErrorComponent: {
      /**
       * @description * `new_value.memory.value` - new_value.memory.value
       * @enum {string}
       */
      attr: "new_value.memory.value";
      /**
       * @description * `invalid` - invalid
       * * `max_string_length` - max_string_length
       * * `min_value` - min_value
       * * `null` - null
       * * `required` - required
       * @enum {string}
       */
      code: "invalid" | "max_string_length" | "min_value" | "null" | "required";
      detail: string;
    };
    RequestServiceChangesNewValueModeErrorComponent: {
      /**
       * @description * `new_value.mode` - new_value.mode
       * @enum {string}
       */
      attr: "new_value.mode";
      /**
       * @description * `invalid_choice` - invalid_choice
       * * `null` - null
       * @enum {string}
       */
      code: "invalid_choice" | "null";
      detail: string;
    };
    RequestServiceChangesNewValueMountPathErrorComponent: {
      /**
       * @description * `new_value.mount_path` - new_value.mount_path
       * @enum {string}
       */
      attr: "new_value.mount_path";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    RequestServiceChangesNewValueNameErrorComponent: {
      /**
       * @description * `new_value.name` - new_value.name
       * @enum {string}
       */
      attr: "new_value.name";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `max_length` - max_length
       * * `min_length` - min_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "max_length" | "min_length" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    RequestServiceChangesNewValueNonFieldErrorsErrorComponent: {
      /**
       * @description * `new_value.non_field_errors` - new_value.non_field_errors
       * @enum {string}
       */
      attr: "new_value.non_field_errors";
      /**
       * @description * `invalid` - invalid
       * * `null` - null
       * * `required` - required
       * @enum {string}
       */
      code: "invalid" | "null" | "required";
      detail: string;
    };
    RequestServiceChangesNewValueNotFoundPageErrorComponent: {
      /**
       * @description * `new_value.not_found_page` - new_value.not_found_page
       * @enum {string}
       */
      attr: "new_value.not_found_page";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    RequestServiceChangesNewValuePublishDirectoryErrorComponent: {
      /**
       * @description * `new_value.publish_directory` - new_value.publish_directory
       * @enum {string}
       */
      attr: "new_value.publish_directory";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    RequestServiceChangesNewValueRedirectToNonFieldErrorsErrorComponent: {
      /**
       * @description * `new_value.redirect_to.non_field_errors` - new_value.redirect_to.non_field_errors
       * @enum {string}
       */
      attr: "new_value.redirect_to.non_field_errors";
      /**
       * @description * `invalid` - invalid
       * * `null` - null
       * @enum {string}
       */
      code: "invalid" | "null";
      detail: string;
    };
    RequestServiceChangesNewValueRedirectToPermanentErrorComponent: {
      /**
       * @description * `new_value.redirect_to.permanent` - new_value.redirect_to.permanent
       * @enum {string}
       */
      attr: "new_value.redirect_to.permanent";
      /**
       * @description * `invalid` - invalid
       * * `null` - null
       * @enum {string}
       */
      code: "invalid" | "null";
      detail: string;
    };
    RequestServiceChangesNewValueRedirectToUrlErrorComponent: {
      /**
       * @description * `new_value.redirect_to.url` - new_value.redirect_to.url
       * @enum {string}
       */
      attr: "new_value.redirect_to.url";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    RequestServiceChangesNewValueRepositoryUrlErrorComponent: {
      /**
       * @description * `new_value.repository_url` - new_value.repository_url
       * @enum {string}
       */
      attr: "new_value.repository_url";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    RequestServiceChangesNewValueStripPrefixErrorComponent: {
      /**
       * @description * `new_value.strip_prefix` - new_value.strip_prefix
       * @enum {string}
       */
      attr: "new_value.strip_prefix";
      /**
       * @description * `invalid` - invalid
       * * `null` - null
       * @enum {string}
       */
      code: "invalid" | "null";
      detail: string;
    };
    RequestServiceChangesNewValueTimeoutSecondsErrorComponent: {
      /**
       * @description * `new_value.timeout_seconds` - new_value.timeout_seconds
       * @enum {string}
       */
      attr: "new_value.timeout_seconds";
      /**
       * @description * `invalid` - invalid
       * * `max_string_length` - max_string_length
       * * `min_value` - min_value
       * * `null` - null
       * @enum {string}
       */
      code: "invalid" | "max_string_length" | "min_value" | "null";
      detail: string;
    };
    RequestServiceChangesNewValueTypeErrorComponent: {
      /**
       * @description * `new_value.type` - new_value.type
       * @enum {string}
       */
      attr: "new_value.type";
      /**
       * @description * `invalid_choice` - invalid_choice
       * * `null` - null
       * * `required` - required
       * @enum {string}
       */
      code: "invalid_choice" | "null" | "required";
      detail: string;
    };
    RequestServiceChangesNewValueValueErrorComponent: {
      /**
       * @description * `new_value.value` - new_value.value
       * @enum {string}
       */
      attr: "new_value.value";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `max_length` - max_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "max_length" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    RequestServiceChangesNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors
       * @enum {string}
       */
      attr: "non_field_errors";
      /**
       * @description * `invalid` - invalid
       * @enum {string}
       */
      code: "invalid";
      detail: string;
    };
    RequestServiceChangesTypeErrorComponent: {
      /**
       * @description * `type` - type
       * @enum {string}
       */
      attr: "type";
      /**
       * @description * `invalid_choice` - invalid_choice
       * * `null` - null
       * * `required` - required
       * @enum {string}
       */
      code: "invalid_choice" | "null" | "required";
      detail: string;
    };
    RequestServiceChangesValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["RequestServiceChangesError"][];
    };
    ResourceLimit: {
      no_of_cpus: number;
      max_memory_in_bytes: number;
    };
    /**
     * @description * `resource_limits` - resource_limits
     * @enum {string}
     */
    ResourceLimitChangeFieldEnum: "resource_limits";
    ResourceLimitChangeRequest: {
      /** @default UPDATE */
      type?: components["schemas"]["FieldChangeTypeEnum"];
      new_value: components["schemas"]["ResourceLimitsRequestRequest"] | null;
      field: components["schemas"]["ResourceLimitChangeFieldEnum"];
    };
    ResourceLimits: {
      /** Format: double */
      cpus: number | null;
      memory: components["schemas"]["MemoryLimit"] | null;
    };
    ResourceLimitsRequest: {
      /** Format: double */
      cpus: number | null;
      memory: components["schemas"]["MemoryLimitRequest"] | null;
    };
    ResourceLimitsRequestRequest: {
      /** Format: double */
      cpus?: number;
      memory?: components["schemas"]["MemoryLimitRequestRequest"];
    };
    ResourceResponse: components["schemas"]["EnvironmentSearchResponse"] | components["schemas"]["ServiceSearchResponse"] | components["schemas"]["ProjectSearchResponse"];
    ReviewPreviewEnvDeployDecisionErrorComponent: {
      /**
       * @description * `decision` - decision
       * @enum {string}
       */
      attr: "decision";
      /**
       * @description * `invalid_choice` - invalid_choice
       * * `null` - null
       * * `required` - required
       * @enum {string}
       */
      code: "invalid_choice" | "null" | "required";
      detail: string;
    };
    ReviewPreviewEnvDeployError: components["schemas"]["ReviewPreviewEnvDeployNonFieldErrorsErrorComponent"] | components["schemas"]["ReviewPreviewEnvDeployDecisionErrorComponent"];
    ReviewPreviewEnvDeployErrorResponse400: components["schemas"]["ReviewPreviewEnvDeployValidationError"] | components["schemas"]["ParseErrorResponse"];
    ReviewPreviewEnvDeployNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors
       * @enum {string}
       */
      attr: "non_field_errors";
      /**
       * @description * `invalid` - invalid
       * @enum {string}
       */
      code: "invalid";
      detail: string;
    };
    ReviewPreviewEnvDeployValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["ReviewPreviewEnvDeployError"][];
    };
    ReviewPreviewEnvDeploymentRequestRequest: {
      decision: components["schemas"]["DecisionEnum"];
    };
    RuntimeLog: {
      id: string;
      service_id: string | null;
      deployment_id: string | null;
      /** Format: date-time */
      time: string;
      timestamp: number;
      content: unknown;
      content_text: string | null;
      level: components["schemas"]["LevelEnum"];
      source: components["schemas"]["SourceEnum"];
    };
    RuntimeLogsSearch: {
      previous: string | null;
      next: string | null;
      results: components["schemas"]["RuntimeLog"][];
      /** Format: double */
      query_time_ms: number;
    };
    SSHKey: {
      id: number;
      user: string;
      public_key: string;
      slug: string;
      fingerprint: string | null;
      /** Format: date-time */
      updated_at: string;
      /** Format: date-time */
      created_at: string;
    };
    SearchDockerRegistryErrorResponse400: components["schemas"]["ParseErrorResponse"];
    SearchResourcesErrorResponse400: components["schemas"]["ParseErrorResponse"];
    Service: {
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      id: string;
      slug: string;
      type: components["schemas"]["ServiceTypeEnum"];
      image: string | null;
      command: string | null;
      builder: components["schemas"]["GitServiceBuilderEnum"] | components["schemas"]["NullEnum"] | null;
      /** Format: uri */
      repository_url: string | null;
      branch_name: string | null;
      commit_sha: string | null;
      dockerfile_builder_options: components["schemas"]["DockerfileBuilderOptions"] | null;
      static_dir_builder_options: components["schemas"]["StaticDirectoryBuilderOptions"] | null;
      nixpacks_builder_options: components["schemas"]["NixpacksBuilderOptions"] | null;
      railpack_builder_options: components["schemas"]["RailpackBuilderOptions"] | null;
      healthcheck: components["schemas"]["HealthCheck"] | null;
      project_id: string;
      environment: components["schemas"]["Environment"];
      credentials: components["schemas"]["DockerCredential"] | null;
      urls: readonly components["schemas"]["URLModel"][];
      volumes: readonly components["schemas"]["Volume"][];
      deploy_token: string | null;
      ports: readonly components["schemas"]["PortConfiguration"][];
      env_variables: readonly components["schemas"]["EnvVariable"][];
      network_aliases: readonly string[];
      network_alias: string | null;
      global_network_alias: string;
      unapplied_changes: readonly components["schemas"]["DeploymentChange"][];
      resource_limits: components["schemas"]["ResourceLimits"] | null;
      /** @default [] */
      system_env_variables: readonly components["schemas"]["SystemEnvVariables"][];
      configs: readonly components["schemas"]["Config"][];
      git_app: components["schemas"]["GitApp"] | null;
      git_repository: components["schemas"]["GitRepository"] | null;
      next_git_repository: components["schemas"]["GitRepository"] | null;
      auto_deploy_enabled: boolean;
      watch_paths: string | null;
      cleanup_queue_on_auto_deploy: boolean;
      pr_preview_envs_enabled: boolean;
    };
    ServiceCardResponse: components["schemas"]["DockerServiceCard"] | components["schemas"]["GitServiceCard"];
    ServiceDeployment: {
      is_current_production: boolean;
      slot: components["schemas"]["SlotEnum"];
      /** Format: date-time */
      queued_at: string;
      ignore_build_cache: boolean;
      /** Format: date-time */
      started_at: string | null;
      /** Format: date-time */
      finished_at: string | null;
      redeploy_hash: string | null;
      trigger_method: components["schemas"]["TriggerMethodEnum"];
      hash: string;
      status: components["schemas"]["DeploymentStatusEnum"];
      status_reason: string | null;
      urls: readonly components["schemas"]["ServiceDeploymentURL"][];
      network_aliases: readonly string[];
      unprefixed_hash: string;
      service_snapshot: components["schemas"]["DeploymentDocker"];
      changes: readonly components["schemas"]["DeploymentChange"][];
      commit_message: string;
      commit_author_name: string | null;
      commit_sha: string | null;
      /** Format: date-time */
      build_started_at: string | null;
      /** Format: date-time */
      build_finished_at: string | null;
    };
    ServiceDeploymentURL: {
      /** Format: uri */
      domain: string;
      port: number;
    };
    ServiceMetrics: {
      /** Format: date-time */
      bucket_epoch: string;
      /** Format: double */
      avg_cpu: number;
      /** Format: double */
      avg_memory: number;
      total_net_tx: number;
      total_net_rx: number;
      total_disk_read: number;
      total_disk_write: number;
    };
    ServicePortsRequestRequest: {
      host: number;
      forwarded: number;
    };
    ServiceSearchResponse: {
      id: string;
      project_slug: string;
      slug: string;
      git_provider: components["schemas"]["ServiceSearchResponseGitProviderEnum"] | components["schemas"]["NullEnum"] | null;
      /** Format: date-time */
      created_at: string;
      kind: components["schemas"]["ServiceTypeEnum"];
      /** @default service */
      type: components["schemas"]["ServiceSearchResponseTypeEnum"];
      environment: string;
    };
    /**
     * @description * `github` - github
     * * `gitlab` - gitlab
     * @enum {string}
     */
    ServiceSearchResponseGitProviderEnum: "github" | "gitlab";
    /**
     * @description * `service` - service
     * @enum {string}
     */
    ServiceSearchResponseTypeEnum: "service";
    /**
     * @description * `HEALTHY` - Healthy
     * * `UNHEALTHY` - Unhealthy
     * * `FAILED` - Failed
     * * `SLEEPING` - Sleeping
     * * `NOT_DEPLOYED_YET` - Not deployed yet
     * * `DEPLOYING` - Deploying
     * @enum {string}
     */
    ServiceStatusEnum: "HEALTHY" | "UNHEALTHY" | "FAILED" | "SLEEPING" | "NOT_DEPLOYED_YET" | "DEPLOYING";
    /**
     * @description * `DOCKER_REGISTRY` - Docker repository
     * * `GIT_REPOSITORY` - Git repository
     * @enum {string}
     */
    ServiceTypeEnum: "DOCKER_REGISTRY" | "GIT_REPOSITORY";
    Settings: {
      root_domain: string;
      app_domain: string;
      image_version: string;
      commit_sha: string;
    };
    SetupGithubAppErrorResponse400: components["schemas"]["ParseErrorResponse"];
    SetupGitlabAppErrorResponse400: components["schemas"]["ParseErrorResponse"];
    SharedEnvTemplate: {
      id: string;
      key: string;
      value: string;
    };
    SharedEnvTemplateRequest: {
      key: string;
      value?: string;
    };
    SharedEnvVariable: {
      id: string;
      key: string;
      value: string;
    };
    SharedEnvVariableRequest: {
      key: string;
      value?: string;
    };
    ShellSshKeysDestroyErrorResponse400: components["schemas"]["ParseErrorResponse"];
    ShellSshKeysRetrieveErrorResponse400: components["schemas"]["ParseErrorResponse"];
    SimpleDeployment: {
      is_current_production: boolean;
      /** Format: date-time */
      queued_at: string;
      /** Format: date-time */
      started_at: string | null;
      /** Format: date-time */
      finished_at: string | null;
      hash: string;
      status: components["schemas"]["DeploymentStatusEnum"];
      unprefixed_hash: string;
      commit_message: string;
      service: components["schemas"]["SimpleService"];
    };
    SimpleEnvironment: {
      id: string;
      name: string;
      is_preview: boolean;
      /** Format: date-time */
      created_at: string;
    };
    SimplePreviewMetadata: {
      id: number;
      auth_enabled: boolean;
      auth_user: string | null;
      auth_password: string | null;
      pr_number: number | null;
      /** Format: int64 */
      pr_comment_id: number | null;
      source_trigger: components["schemas"]["SourceTriggerEnum"];
      service: components["schemas"]["PreviewService"];
    };
    SimplePreviewMetadataRequest: {
      auth_enabled?: boolean;
      auth_user?: string | null;
      auth_password?: string | null;
      pr_number?: number | null;
      /** Format: int64 */
      pr_comment_id?: number | null;
      source_trigger: components["schemas"]["SourceTriggerEnum"];
      service: components["schemas"]["PreviewServiceRequest"];
    };
    SimpleProject: {
      id: string;
      slug: string;
    };
    SimpleService: {
      id: string;
      slug: string;
      project: components["schemas"]["SimpleProject"];
      environment: components["schemas"]["SimpleEnvironment"];
    };
    SimpleTemplateService: {
      id: string;
      slug: string;
    };
    SimpleTemplateServiceRequest: {
      id?: string;
    };
    /**
     * @description * `BLUE` - Blue
     * * `GREEN` - Green
     * @enum {string}
     */
    SlotEnum: "BLUE" | "GREEN";
    /**
     * @description * `SYSTEM` - System Logs
     * * `SERVICE` - Service Logs
     * @enum {string}
     */
    SourceEnum: "SYSTEM" | "SERVICE";
    /**
     * @description * `API` - Api
     * * `PULL_REQUEST` - Pull request
     * @enum {string}
     */
    SourceTriggerEnum: "API" | "PULL_REQUEST";
    StaticDirectoryBuilderOptions: {
      publish_directory: string;
      is_spa: boolean;
      not_found_page: string | null;
      index_page: string;
      generated_caddyfile: string | null;
    };
    StaticDirectoryBuilderOptionsRequest: {
      publish_directory: string;
      is_spa: boolean;
      not_found_page: string | null;
      index_page: string;
    };
    SyncGitlabReposErrorResponse400: components["schemas"]["ParseErrorResponse"];
    SyncGitlabRepositoriesResponse: {
      repositories_count: number;
    };
    SystemEnvVariables: {
      key: string;
      value: string;
      comment: string;
    };
    SystemEnvVariablesRequest: {
      key: string;
      value: string;
      comment: string;
    };
    TestGithubAppErrorResponse400: components["schemas"]["ParseErrorResponse"];
    TestGithubAppResponse: {
      repositories_count: number;
    };
    TestGitlabAppErrorResponse400: components["schemas"]["ParseErrorResponse"];
    TestGitlabAppResponse: {
      repositories_count: number;
    };
    ToggleServiceDesiredStateErrorComponent: {
      /**
       * @description * `desired_state` - desired_state
       * @enum {string}
       */
      attr: "desired_state";
      /**
       * @description * `invalid_choice` - invalid_choice
       * * `null` - null
       * * `required` - required
       * @enum {string}
       */
      code: "invalid_choice" | "null" | "required";
      detail: string;
    };
    ToggleServiceError: components["schemas"]["ToggleServiceNonFieldErrorsErrorComponent"] | components["schemas"]["ToggleServiceDesiredStateErrorComponent"];
    ToggleServiceErrorResponse400: components["schemas"]["ToggleServiceValidationError"] | components["schemas"]["ParseErrorResponse"];
    ToggleServiceNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors
       * @enum {string}
       */
      attr: "non_field_errors";
      /**
       * @description * `invalid` - invalid
       * @enum {string}
       */
      code: "invalid";
      detail: string;
    };
    ToggleServiceStateRequestRequest: {
      desired_state: components["schemas"]["DesiredStateEnum"];
    };
    ToggleServiceValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["ToggleServiceError"][];
    };
    /**
     * @description * `MANUAL` - Manual
     * * `AUTO` - Automatic
     * * `API` - API
     * @enum {string}
     */
    TriggerMethodEnum: "MANUAL" | "AUTO" | "API";
    TriggerPreviewEnvRequestRequest: {
      branch_name?: string;
      pr_number?: number;
      /** @default HEAD */
      commit_sha?: string;
      template?: string;
      /** @default [] */
      env_variables?: components["schemas"]["EnvRequestRequest"][];
    };
    TriggerUpdateCreateDesiredVersionErrorComponent: {
      /**
       * @description * `desired_version` - desired_version
       * @enum {string}
       */
      attr: "desired_version";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `max_length` - max_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "max_length" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    TriggerUpdateCreateError: components["schemas"]["TriggerUpdateCreateNonFieldErrorsErrorComponent"] | components["schemas"]["TriggerUpdateCreateDesiredVersionErrorComponent"];
    TriggerUpdateCreateErrorResponse400: components["schemas"]["TriggerUpdateCreateValidationError"] | components["schemas"]["ParseErrorResponse"];
    TriggerUpdateCreateNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors
       * @enum {string}
       */
      attr: "non_field_errors";
      /**
       * @description * `invalid` - invalid
       * @enum {string}
       */
      code: "invalid";
      detail: string;
    };
    TriggerUpdateCreateValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["TriggerUpdateCreateError"][];
    };
    /**
     * @description * `urls` - urls
     * @enum {string}
     */
    URLItemChangeFieldEnum: "urls";
    URLItemChangeRequest: {
      type: components["schemas"]["ItemChangeTypeEnum"];
      item_id?: string;
      new_value?: components["schemas"]["URLRequestRequest"];
      field: components["schemas"]["URLItemChangeFieldEnum"];
    };
    URLModel: {
      id: string;
      domain: string;
      /** @default / */
      base_path: string;
      strip_prefix: boolean;
      redirect_to: components["schemas"]["URLRedirectModel"] | null;
      associated_port: number | null;
    };
    URLModelRequest: {
      id?: string;
      domain: string;
      /** @default / */
      base_path?: string;
      strip_prefix?: boolean;
      redirect_to: components["schemas"]["URLRedirectModelRequest"] | null;
      associated_port?: number | null;
    };
    URLRedirectModel: {
      /** Format: uri */
      url: string;
      /** @default false */
      permanent: boolean;
    };
    URLRedirectModelRequest: {
      /** Format: uri */
      url: string;
      /** @default false */
      permanent?: boolean;
    };
    URLRedirectRequest: {
      /** Format: uri */
      url: string;
      /** @default false */
      permanent?: boolean;
    };
    URLRequestRequest: {
      domain?: string;
      /** @default / */
      base_path?: string;
      /** @default true */
      strip_prefix?: boolean;
      redirect_to?: components["schemas"]["URLRedirectRequest"];
      associated_port?: number;
    };
    /**
     * @description * `BYTES` - bytes
     * * `KILOBYTES` - kilobytes
     * * `MEGABYTES` - megabytes
     * * `GIGABYTES` - gigabytes
     * @enum {string}
     */
    UnitEnum: "BYTES" | "KILOBYTES" | "MEGABYTES" | "GIGABYTES";
    UpdateEnvironmentError: components["schemas"]["UpdateEnvironmentNonFieldErrorsErrorComponent"] | components["schemas"]["UpdateEnvironmentNameErrorComponent"];
    UpdateEnvironmentErrorResponse400: components["schemas"]["UpdateEnvironmentValidationError"] | components["schemas"]["ParseErrorResponse"];
    UpdateEnvironmentNameErrorComponent: {
      /**
       * @description * `name` - name
       * @enum {string}
       */
      attr: "name";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `max_length` - max_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "max_length" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    UpdateEnvironmentNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors
       * @enum {string}
       */
      attr: "non_field_errors";
      /**
       * @description * `invalid` - invalid
       * @enum {string}
       */
      code: "invalid";
      detail: string;
    };
    UpdateEnvironmentValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["UpdateEnvironmentError"][];
    };
    UpdateProfile: {
      username: string;
      first_name: string;
      last_name: string;
    };
    UpdateProfileError: components["schemas"]["UpdateProfileNonFieldErrorsErrorComponent"] | components["schemas"]["UpdateProfileUsernameErrorComponent"] | components["schemas"]["UpdateProfileFirstNameErrorComponent"] | components["schemas"]["UpdateProfileLastNameErrorComponent"];
    UpdateProfileErrorResponse400: components["schemas"]["UpdateProfileValidationError"] | components["schemas"]["ParseErrorResponse"];
    UpdateProfileFirstNameErrorComponent: {
      /**
       * @description * `first_name` - first_name
       * @enum {string}
       */
      attr: "first_name";
      /**
       * @description * `invalid` - invalid
       * * `max_length` - max_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "invalid" | "max_length" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    UpdateProfileLastNameErrorComponent: {
      /**
       * @description * `last_name` - last_name
       * @enum {string}
       */
      attr: "last_name";
      /**
       * @description * `invalid` - invalid
       * * `max_length` - max_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "invalid" | "max_length" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    UpdateProfileNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors
       * @enum {string}
       */
      attr: "non_field_errors";
      /**
       * @description * `invalid` - invalid
       * @enum {string}
       */
      code: "invalid";
      detail: string;
    };
    UpdateProfileUsernameErrorComponent: {
      /**
       * @description * `username` - username
       * @enum {string}
       */
      attr: "username";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `max_length` - max_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "max_length" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    UpdateProfileValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["UpdateProfileError"][];
    };
    UpdateProjectDescriptionErrorComponent: {
      /**
       * @description * `description` - description
       * @enum {string}
       */
      attr: "description";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    UpdateProjectError: components["schemas"]["UpdateProjectNonFieldErrorsErrorComponent"] | components["schemas"]["UpdateProjectSlugErrorComponent"] | components["schemas"]["UpdateProjectDescriptionErrorComponent"];
    UpdateProjectErrorResponse400: components["schemas"]["UpdateProjectValidationError"] | components["schemas"]["ParseErrorResponse"];
    UpdateProjectNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors
       * @enum {string}
       */
      attr: "non_field_errors";
      /**
       * @description * `invalid` - invalid
       * @enum {string}
       */
      code: "invalid";
      detail: string;
    };
    UpdateProjectSlugErrorComponent: {
      /**
       * @description * `slug` - slug
       * @enum {string}
       */
      attr: "slug";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `max_length` - max_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "max_length" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    UpdateProjectValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["UpdateProjectError"][];
    };
    UpdateServiceAutoDeployEnabledErrorComponent: {
      /**
       * @description * `auto_deploy_enabled` - auto_deploy_enabled
       * @enum {string}
       */
      attr: "auto_deploy_enabled";
      /**
       * @description * `invalid` - invalid
       * * `null` - null
       * @enum {string}
       */
      code: "invalid" | "null";
      detail: string;
    };
    UpdateServiceCleanupQueueOnAutoDeployErrorComponent: {
      /**
       * @description * `cleanup_queue_on_auto_deploy` - cleanup_queue_on_auto_deploy
       * @enum {string}
       */
      attr: "cleanup_queue_on_auto_deploy";
      /**
       * @description * `invalid` - invalid
       * * `null` - null
       * @enum {string}
       */
      code: "invalid" | "null";
      detail: string;
    };
    UpdateServiceError: components["schemas"]["UpdateServiceNonFieldErrorsErrorComponent"] | components["schemas"]["UpdateServiceSlugErrorComponent"] | components["schemas"]["UpdateServiceAutoDeployEnabledErrorComponent"] | components["schemas"]["UpdateServiceWatchPathsErrorComponent"] | components["schemas"]["UpdateServiceCleanupQueueOnAutoDeployErrorComponent"] | components["schemas"]["UpdateServicePrPreviewEnvsEnabledErrorComponent"];
    UpdateServiceErrorResponse400: components["schemas"]["UpdateServiceValidationError"] | components["schemas"]["ParseErrorResponse"];
    UpdateServiceNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors
       * @enum {string}
       */
      attr: "non_field_errors";
      /**
       * @description * `invalid` - invalid
       * @enum {string}
       */
      code: "invalid";
      detail: string;
    };
    UpdateServicePrPreviewEnvsEnabledErrorComponent: {
      /**
       * @description * `pr_preview_envs_enabled` - pr_preview_envs_enabled
       * @enum {string}
       */
      attr: "pr_preview_envs_enabled";
      /**
       * @description * `invalid` - invalid
       * * `null` - null
       * @enum {string}
       */
      code: "invalid" | "null";
      detail: string;
    };
    UpdateServiceSlugErrorComponent: {
      /**
       * @description * `slug` - slug
       * @enum {string}
       */
      attr: "slug";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `max_length` - max_length
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "max_length" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    UpdateServiceValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["UpdateServiceError"][];
    };
    UpdateServiceWatchPathsErrorComponent: {
      /**
       * @description * `watch_paths` - watch_paths
       * @enum {string}
       */
      attr: "watch_paths";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `max_length` - max_length
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "max_length" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    User: {
      /** @description Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. */
      username: string;
      first_name: string;
      last_name: string;
    };
    UserCreatedResponse: {
      detail: string;
    };
    UserCreationRequestRequest: {
      username: string;
      password: string;
    };
    UserExistenceResponse: {
      exists: boolean;
    };
    /**
     * @description * `validation_error` - Validation Error
     * @enum {string}
     */
    ValidationErrorEnum: "validation_error";
    Volume: {
      id: string;
      name: string;
      container_path: string;
      host_path: string | null;
      mode: components["schemas"]["VolumeModeEnum"];
    };
    /**
     * @description * `volumes` - volumes
     * @enum {string}
     */
    VolumeItemChangeFieldEnum: "volumes";
    VolumeItemChangeRequest: {
      type: components["schemas"]["ItemChangeTypeEnum"];
      item_id?: string;
      new_value?: components["schemas"]["VolumeRequestRequest"];
      field: components["schemas"]["VolumeItemChangeFieldEnum"];
    };
    /**
     * @description * `READ_ONLY` - Read-Only
     * * `READ_WRITE` - Read-Write
     * @enum {string}
     */
    VolumeModeEnum: "READ_ONLY" | "READ_WRITE";
    VolumeRequest: {
      id?: string;
      name: string;
      container_path: string;
      host_path?: string | null;
      mode?: components["schemas"]["VolumeModeEnum"];
    };
    /**
     * @description * `READ_ONLY` - READ_ONLY
     * * `READ_WRITE` - READ_WRITE
     * @enum {string}
     */
    VolumeRequestModeEnum: "READ_ONLY" | "READ_WRITE";
    VolumeRequestRequest: {
      name?: string;
      container_path: string;
      host_path?: string;
      mode?: components["schemas"]["VolumeRequestModeEnum"];
    };
    WebhookDockerDeployServiceCleanupQueueErrorComponent: {
      /**
       * @description * `cleanup_queue` - cleanup_queue
       * @enum {string}
       */
      attr: "cleanup_queue";
      /**
       * @description * `invalid` - invalid
       * * `null` - null
       * @enum {string}
       */
      code: "invalid" | "null";
      detail: string;
    };
    WebhookDockerDeployServiceCommitMessageErrorComponent: {
      /**
       * @description * `commit_message` - commit_message
       * @enum {string}
       */
      attr: "commit_message";
      /**
       * @description * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "invalid" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    WebhookDockerDeployServiceError: components["schemas"]["WebhookDockerDeployServiceNonFieldErrorsErrorComponent"] | components["schemas"]["WebhookDockerDeployServiceCommitMessageErrorComponent"] | components["schemas"]["WebhookDockerDeployServiceNewImageErrorComponent"] | components["schemas"]["WebhookDockerDeployServiceCleanupQueueErrorComponent"];
    WebhookDockerDeployServiceErrorResponse400: components["schemas"]["WebhookDockerDeployServiceValidationError"] | components["schemas"]["ParseErrorResponse"];
    WebhookDockerDeployServiceNewImageErrorComponent: {
      /**
       * @description * `new_image` - new_image
       * @enum {string}
       */
      attr: "new_image";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    WebhookDockerDeployServiceNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors
       * @enum {string}
       */
      attr: "non_field_errors";
      /**
       * @description * `invalid` - invalid
       * @enum {string}
       */
      code: "invalid";
      detail: string;
    };
    WebhookDockerDeployServiceValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["WebhookDockerDeployServiceError"][];
    };
    WebhookGitDeployServiceCleanupQueueErrorComponent: {
      /**
       * @description * `cleanup_queue` - cleanup_queue
       * @enum {string}
       */
      attr: "cleanup_queue";
      /**
       * @description * `invalid` - invalid
       * * `null` - null
       * @enum {string}
       */
      code: "invalid" | "null";
      detail: string;
    };
    WebhookGitDeployServiceCommitShaErrorComponent: {
      /**
       * @description * `commit_sha` - commit_sha
       * @enum {string}
       */
      attr: "commit_sha";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    WebhookGitDeployServiceError: components["schemas"]["WebhookGitDeployServiceNonFieldErrorsErrorComponent"] | components["schemas"]["WebhookGitDeployServiceIgnoreBuildCacheErrorComponent"] | components["schemas"]["WebhookGitDeployServiceCommitShaErrorComponent"] | components["schemas"]["WebhookGitDeployServiceCleanupQueueErrorComponent"];
    WebhookGitDeployServiceErrorResponse400: components["schemas"]["WebhookGitDeployServiceValidationError"] | components["schemas"]["ParseErrorResponse"];
    WebhookGitDeployServiceIgnoreBuildCacheErrorComponent: {
      /**
       * @description * `ignore_build_cache` - ignore_build_cache
       * @enum {string}
       */
      attr: "ignore_build_cache";
      /**
       * @description * `invalid` - invalid
       * * `null` - null
       * @enum {string}
       */
      code: "invalid" | "null";
      detail: string;
    };
    WebhookGitDeployServiceNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors
       * @enum {string}
       */
      attr: "non_field_errors";
      /**
       * @description * `invalid` - invalid
       * @enum {string}
       */
      code: "invalid";
      detail: string;
    };
    WebhookGitDeployServiceValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["WebhookGitDeployServiceError"][];
    };
    WebhookTriggerPreviewEnvBranchNameErrorComponent: {
      /**
       * @description * `branch_name` - branch_name
       * @enum {string}
       */
      attr: "branch_name";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    WebhookTriggerPreviewEnvCommitShaErrorComponent: {
      /**
       * @description * `commit_sha` - commit_sha
       * @enum {string}
       */
      attr: "commit_sha";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    WebhookTriggerPreviewEnvEnvVariablesINDEXKeyErrorComponent: {
      /**
       * @description * `env_variables.INDEX.key` - env_variables.INDEX.key
       * @enum {string}
       */
      attr: "env_variables.INDEX.key";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    WebhookTriggerPreviewEnvEnvVariablesINDEXNonFieldErrorsErrorComponent: {
      /**
       * @description * `env_variables.INDEX.non_field_errors` - env_variables.INDEX.non_field_errors
       * @enum {string}
       */
      attr: "env_variables.INDEX.non_field_errors";
      /**
       * @description * `invalid` - invalid
       * * `null` - null
       * * `required` - required
       * @enum {string}
       */
      code: "invalid" | "null" | "required";
      detail: string;
    };
    WebhookTriggerPreviewEnvEnvVariablesINDEXValueErrorComponent: {
      /**
       * @description * `env_variables.INDEX.value` - env_variables.INDEX.value
       * @enum {string}
       */
      attr: "env_variables.INDEX.value";
      /**
       * @description * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `required` - required
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "invalid" | "null" | "null_characters_not_allowed" | "required" | "surrogate_characters_not_allowed";
      detail: string;
    };
    WebhookTriggerPreviewEnvEnvVariablesNonFieldErrorsErrorComponent: {
      /**
       * @description * `env_variables.non_field_errors` - env_variables.non_field_errors
       * @enum {string}
       */
      attr: "env_variables.non_field_errors";
      /**
       * @description * `not_a_list` - not_a_list
       * * `null` - null
       * @enum {string}
       */
      code: "not_a_list" | "null";
      detail: string;
    };
    WebhookTriggerPreviewEnvError: components["schemas"]["WebhookTriggerPreviewEnvNonFieldErrorsErrorComponent"] | components["schemas"]["WebhookTriggerPreviewEnvBranchNameErrorComponent"] | components["schemas"]["WebhookTriggerPreviewEnvPrNumberErrorComponent"] | components["schemas"]["WebhookTriggerPreviewEnvCommitShaErrorComponent"] | components["schemas"]["WebhookTriggerPreviewEnvTemplateErrorComponent"] | components["schemas"]["WebhookTriggerPreviewEnvEnvVariablesNonFieldErrorsErrorComponent"] | components["schemas"]["WebhookTriggerPreviewEnvEnvVariablesINDEXNonFieldErrorsErrorComponent"] | components["schemas"]["WebhookTriggerPreviewEnvEnvVariablesINDEXKeyErrorComponent"] | components["schemas"]["WebhookTriggerPreviewEnvEnvVariablesINDEXValueErrorComponent"];
    WebhookTriggerPreviewEnvErrorResponse400: components["schemas"]["WebhookTriggerPreviewEnvValidationError"] | components["schemas"]["ParseErrorResponse"];
    WebhookTriggerPreviewEnvNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors
       * @enum {string}
       */
      attr: "non_field_errors";
      /**
       * @description * `invalid` - invalid
       * @enum {string}
       */
      code: "invalid";
      detail: string;
    };
    WebhookTriggerPreviewEnvPrNumberErrorComponent: {
      /**
       * @description * `pr_number` - pr_number
       * @enum {string}
       */
      attr: "pr_number";
      /**
       * @description * `invalid` - invalid
       * * `max_string_length` - max_string_length
       * * `null` - null
       * @enum {string}
       */
      code: "invalid" | "max_string_length" | "null";
      detail: string;
    };
    WebhookTriggerPreviewEnvTemplateErrorComponent: {
      /**
       * @description * `template` - template
       * @enum {string}
       */
      attr: "template";
      /**
       * @description * `blank` - blank
       * * `invalid` - invalid
       * * `null` - null
       * * `null_characters_not_allowed` - null_characters_not_allowed
       * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: "blank" | "invalid" | "null" | "null_characters_not_allowed" | "surrogate_characters_not_allowed";
      detail: string;
    };
    WebhookTriggerPreviewEnvValidationError: {
      type: components["schemas"]["ValidationErrorEnum"];
      errors: components["schemas"]["WebhookTriggerPreviewEnvError"][];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Change user password
   * @description Change the authenticated user's password. Requires current password verification and validates new password strength.
   */
  changePassword: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChangePasswordRequestRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["ChangePasswordRequestRequest"];
        "multipart/form-data": components["schemas"]["ChangePasswordRequestRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ChangePasswordResponse"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ChangePasswordErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /**
   * Check if a user exists
   * @description Returns whether a single user already exists in the system.
   */
  auth_check_user_existence_retrieve: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserExistenceResponse"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["AuthCheckUserExistenceRetrieveErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /**
   * Create a user
   * @description Creates a new user if no user exists.
   */
  auth_create_initial_user_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserCreationRequestRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["UserCreationRequestRequest"];
        "multipart/form-data": components["schemas"]["UserCreationRequestRequest"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["UserCreatedResponse"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["AuthCreateInitialUserCreateErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /**
   * Login
   * @description Authenticate User, what is returned is a cookie named `sessionid` that will be used for authentication of the next requests.
   */
  login: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["LoginRequestRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["LoginRequestRequest"];
        "multipart/form-data": components["schemas"]["LoginRequestRequest"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["LoginSuccessResponse"];
        };
      };
      /** @description No response body */
      302: {
        content: never;
      };
      400: {
        content: {
          "application/json": components["schemas"]["LoginErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /** Logout */
  logout: {
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
      400: {
        content: {
          "application/json": components["schemas"]["LogoutErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /**
   * Get current user
   * @description Get current authenticated user.
   */
  getAuthedUser: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["AuthedSuccessResponse"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["GetAuthedUserErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /**
   * Update user profile
   * @description Update the authenticated user's profile information including username, first name, and last name.
   */
  updateProfile: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedUpdateProfileRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedUpdateProfileRequest"];
        "multipart/form-data": components["schemas"]["PatchedUpdateProfileRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UpdateProfile"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["UpdateProfileErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  connectors_retrieve: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["GitApp"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ConnectorsRetrieveErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  connectors_destroy: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
      400: {
        content: {
          "application/json": components["schemas"]["ConnectorsDestroyErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /** List all repositories for a git app (paginated) */
  listGitAppRepositoriesPaginated: {
    parameters: {
      query?: {
        /** @description A page number within the paginated result set. */
        page?: number;
        /** @description Number of results to return per page. */
        per_page?: number;
        query?: string;
      };
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedGitRepositoryList"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ListGitAppRepositoriesPaginatedErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /** List all repositories for a git app */
  listGitAppRepositories: {
    parameters: {
      query?: {
        query?: string;
      };
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["GitRepository"][];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ListGitAppRepositoriesErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  connectors_github_retrieve: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["GithubApp"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ConnectorsGithubRetrieveErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  connectors_github_partial_update: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedGithubAppRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedGithubAppRequest"];
        "multipart/form-data": components["schemas"]["PatchedGithubAppRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["GithubApp"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ConnectorsGithubPartialUpdateErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  testGithubApp: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TestGithubAppResponse"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["TestGithubAppErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /** setup github app */
  setupGithubApp: {
    parameters: {
      query: {
        code: string;
        installation_id?: number;
        state: string;
      };
    };
    responses: {
      /** @description No response body */
      303: {
        content: never;
      };
      400: {
        content: {
          "application/json": components["schemas"]["SetupGithubAppErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  connectors_gitlab_retrieve: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["GitlabApp"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ConnectorsGitlabRetrieveErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /** Sync GitLab repositories for a GitLab application */
  syncGitlabRepos: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SyncGitlabRepositoriesResponse"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["SyncGitlabReposErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  testGitlabApp: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TestGitlabAppResponse"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["TestGitlabAppErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  connectors_gitlab_update_update: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GitlabAppUpdateRequestRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["GitlabAppUpdateRequestRequest"];
        "multipart/form-data": components["schemas"]["GitlabAppUpdateRequestRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["GitlabAppUpdateResponse"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ConnectorsGitlabUpdateUpdateErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /** create a gitlab app */
  createGitlabApp: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateGitlabAppRequestRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["CreateGitlabAppRequestRequest"];
        "multipart/form-data": components["schemas"]["CreateGitlabAppRequestRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["CreateGitlabAppResponse"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["CreateGitlabAppErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /** Set a gitlab app */
  setupGitlabApp: {
    parameters: {
      query: {
        code: string;
        state: string;
      };
    };
    responses: {
      /** @description No response body */
      303: {
        content: never;
      };
      400: {
        content: {
          "application/json": components["schemas"]["SetupGitlabAppErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /** List all git apps */
  listGitApps: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["GitApp"][];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ListGitAppsErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /** List all the branches of a repository */
  listGitRepoBranches: {
    parameters: {
      query: {
        git_app_id?: string;
        repository_url: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": string[];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ListGitRepoBranchesErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /**
   * Get CSRF cookie
   * @description CSRF cookie endpoint for retrieving a CSRF token before doing mutative requests (`DELETE`, `POST`, `PUT`, `PATCH`).You need to pass the cookie named `csrftoken` to all requests alongside a `X-CSRFToken` with the value of the token.
   */
  getCSRF: {
    responses: {
      400: {
        content: {
          "application/json": components["schemas"]["GetCSRFErrorResponse400"];
        };
      };
      /** @description No response body */
      401: {
        content: never;
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /**
   * Webhook to deploy a docker service
   * @description trigger a new deployment.
   */
  webhookDockerDeployService: {
    parameters: {
      path: {
        deploy_token: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["DockerServiceWebhookDeployRequestRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["DockerServiceWebhookDeployRequestRequest"];
        "multipart/form-data": components["schemas"]["DockerServiceWebhookDeployRequestRequest"];
      };
    };
    responses: {
      /** @description No response body */
      202: {
        content: never;
      };
      400: {
        content: {
          "application/json": components["schemas"]["WebhookDockerDeployServiceErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /**
   * Webhook to deploy a git service
   * @description trigger a new deployment.
   */
  webhookGitDeployService: {
    parameters: {
      path: {
        deploy_token: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["GitServiceWebhookDeployRequestRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["GitServiceWebhookDeployRequestRequest"];
        "multipart/form-data": components["schemas"]["GitServiceWebhookDeployRequestRequest"];
      };
    };
    responses: {
      /** @description No response body */
      202: {
        content: never;
      };
      400: {
        content: {
          "application/json": components["schemas"]["WebhookGitDeployServiceErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /**
   * Search docker hub
   * @description Search a docker Image in docker hub Registry
   */
  searchDockerRegistry: {
    parameters: {
      query: {
        q: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DockerImageSearchResponse"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["SearchDockerRegistryErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /**
   * Ping
   * @description simple healthcheck endpoint.
   */
  ping: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PING"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["PingErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /** List all active projects */
  getProjectList: {
    parameters: {
      query?: {
        slug?: string;
        /**
         * @description Ordering
         *
         * * `slug` - name
         * * `-slug` - name (descending)
         * * `updated_at` - Updated at
         * * `-updated_at` - Updated at (descending)
         */
        sort_by?: ("-slug" | "-updated_at" | "slug" | "updated_at")[];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Project"][];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["GetProjectListErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /** Create a new project */
  createProject: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ProjectCreateRequestRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["ProjectCreateRequestRequest"];
        "multipart/form-data": components["schemas"]["ProjectCreateRequestRequest"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Project"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["CreateProjectErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponse409"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /**
   * Archive a service
   * @description Archive a service.
   */
  archiveService: {
    parameters: {
      path: {
        env_slug: string;
        project_slug: string;
        service_slug: string;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
      400: {
        content: {
          "application/json": components["schemas"]["ArchiveServiceErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /**
   * Archive a git service
   * @description Archive a git service.
   */
  archiveGitService: {
    parameters: {
      path: {
        env_slug: string;
        project_slug: string;
        service_slug: string;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
      400: {
        content: {
          "application/json": components["schemas"]["ArchiveGitServiceErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /**
   * Bulk deploy services
   * @description Deploy all selected services in an environment
   */
  bulkDeployServices: {
    parameters: {
      path: {
        env_slug: string;
        project_slug: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BulkDeployServiceRequestRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["BulkDeployServiceRequestRequest"];
        "multipart/form-data": components["schemas"]["BulkDeployServiceRequestRequest"];
      };
    };
    responses: {
      /** @description No response body */
      202: {
        content: never;
      };
      400: {
        content: {
          "application/json": components["schemas"]["BulkDeployServicesErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /**
   * Stop/Restart multiple services
   * @description Stops a running docker service and restart it if it was stopped.
   */
  bulkToggleServices: {
    parameters: {
      path: {
        env_slug: string;
        project_slug: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BulkToggleServiceStateRequestRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["BulkToggleServiceStateRequestRequest"];
        "multipart/form-data": components["schemas"]["BulkToggleServiceStateRequestRequest"];
      };
    };
    responses: {
      /** @description No response body */
      202: {
        content: never;
      };
      400: {
        content: {
          "application/json": components["schemas"]["BulkToggleServicesErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /**
   * Cancel deployment
   * @description Cancel a deployment in progress.
   */
  cancelServiceDeployment: {
    parameters: {
      path: {
        deployment_hash: string;
        env_slug: string;
        project_slug: string;
        service_slug: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Service"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["CancelServiceDeploymentErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponse409"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /**
   * Cancel a config change
   * @description Cancel a config change that was requested.
   */
  cancelServiceChanges: {
    parameters: {
      path: {
        change_id: string;
        env_slug: string;
        project_slug: string;
        service_slug: string;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
      400: {
        content: {
          "application/json": components["schemas"]["CancelServiceChangesErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponse409"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /**
   * Create a docker service
   * @description Create a service from a docker image.
   */
  createDockerService: {
    parameters: {
      path: {
        env_slug: string;
        project_slug: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DockerServiceCreateRequestRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["DockerServiceCreateRequestRequest"];
        "multipart/form-data": components["schemas"]["DockerServiceCreateRequestRequest"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Service"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["CreateDockerServiceErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponse409"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /**
   * Create a docker service
   * @description Create a service from a docker image.
   */
  createGitService: {
    parameters: {
      path: {
        env_slug: string;
        project_slug: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CreateGitServiceRequestRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["CreateGitServiceRequestRequest"];
        "multipart/form-data": components["schemas"]["CreateGitServiceRequestRequest"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Service"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["CreateGitServiceErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponse409"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /**
   * Deploy a docker service
   * @description Apply all pending changes for the service and trigger a new deployment.
   */
  deployDockerService: {
    parameters: {
      path: {
        env_slug: string;
        project_slug: string;
        service_slug: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["DockerServiceDeployRequestRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["DockerServiceDeployRequestRequest"];
        "multipart/form-data": components["schemas"]["DockerServiceDeployRequestRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ServiceDeployment"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["DeployDockerServiceErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /**
   * Deploy a git service
   * @description Apply all pending changes for the service and trigger a new deployment.
   */
  deployGitService: {
    parameters: {
      path: {
        env_slug: string;
        project_slug: string;
        service_slug: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["GitServiceDeployRequestRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["GitServiceDeployRequestRequest"];
        "multipart/form-data": components["schemas"]["GitServiceDeployRequestRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ServiceDeployment"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["DeployGitServiceErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /**
   * Redeploy a docker service
   * @description Revert the service to the state of a previous deployment.
   */
  redeployDockerService: {
    parameters: {
      path: {
        deployment_hash: string;
        env_slug: string;
        project_slug: string;
        service_slug: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ServiceDeployment"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["RedeployDockerServiceErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /**
   * Redeploy a git service
   * @description Revert the service to the state of a previous deployment.
   */
  reDeployGitService: {
    parameters: {
      path: {
        deployment_hash: string;
        env_slug: string;
        project_slug: string;
        service_slug: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["GitServiceReDeployRequestRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["GitServiceReDeployRequestRequest"];
        "multipart/form-data": components["schemas"]["GitServiceReDeployRequestRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ServiceDeployment"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ReDeployGitServiceErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /**
   * Request env changes
   * @description Request a change to the environments variables of a service.
   */
  requestEnvChanges: {
    parameters: {
      path: {
        env_slug: string;
        project_slug: string;
        service_slug: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["EnvStringChangeRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["EnvStringChangeRequest"];
        "multipart/form-data": components["schemas"]["EnvStringChangeRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Service"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["RequestEnvChangesErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /**
   * Request config changes
   * @description Request a change to the configuration of a service.
   */
  requestServiceChanges: {
    parameters: {
      path: {
        env_slug: string;
        project_slug: string;
        service_slug: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["DeploymentChangeRequestRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["DeploymentChangeRequestRequest"];
        "multipart/form-data": components["schemas"]["DeploymentChangeRequestRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Service"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["RequestServiceChangesErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /**
   * Cleanup Deployment queue
   * @description Cleanup the current running deployment queue
   */
  cleanupDeploymentQueue: {
    parameters: {
      path: {
        env_slug: string;
        project_slug: string;
        service_slug: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["DeploymentCleanupQueueRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["DeploymentCleanupQueueRequest"];
        "multipart/form-data": components["schemas"]["DeploymentCleanupQueueRequest"];
      };
    };
    responses: {
      /** @description No response body */
      202: {
        content: never;
      };
      400: {
        content: {
          "application/json": components["schemas"]["CleanupDeploymentQueueErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /**
   * List all deployments
   * @description List all deployments for a service, the default order is last created descendant.
   */
  projects_service_details_deployments_list: {
    parameters: {
      query?: {
        /** @description A page number within the paginated result set. */
        page?: number;
        /** @description Number of results to return per page. */
        per_page?: number;
        queued_at_after?: string;
        queued_at_before?: string;
        /**
         * @description * `QUEUED` - Queued
         * * `CANCELLED` - Cancelled
         * * `CANCELLING` - Cancelling
         * * `FAILED` - Failed
         * * `PREPARING` - Preparing
         * * `BUILDING` - Building
         * * `STARTING` - Starting
         * * `RESTARTING` - Restarting
         * * `HEALTHY` - Healthy
         * * `UNHEALTHY` - Unhealthy
         * * `REMOVED` - Removed
         * * `SLEEPING` - Sleeping
         */
        status?: ("BUILDING" | "CANCELLED" | "CANCELLING" | "FAILED" | "HEALTHY" | "PREPARING" | "QUEUED" | "REMOVED" | "RESTARTING" | "SLEEPING" | "STARTING" | "UNHEALTHY")[];
      };
      path: {
        env_slug: string;
        project_slug: string;
        service_slug: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedServiceDeploymentList"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ProjectsServiceDetailsDeploymentsListErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /** Get single deployment */
  projects_service_details_deployments_retrieve: {
    parameters: {
      path: {
        deployment_hash: string;
        env_slug: string;
        project_slug: string;
        service_slug: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ServiceDeployment"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ProjectsServiceDetailsDeploymentsRetrieveErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /** Get deployment build logs */
  projects_service_details_deployments_build_logs_retrieve: {
    parameters: {
      query?: {
        cursor?: string;
        per_page?: number;
      };
      path: {
        deployment_hash: string;
        env_slug: string;
        project_slug: string;
        service_slug: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["RuntimeLogsSearch"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ProjectsServiceDetailsDeploymentsBuildLogsRetrieveErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /** Get deployment HTTP logs */
  projects_service_details_deployments_http_logs_list: {
    parameters: {
      query?: {
        /** @description The pagination cursor value. */
        cursor?: string;
        /** @description Number of results to return per page. */
        per_page?: number;
        /** @description Multiple values may be separated by commas. */
        request_host?: string[];
        request_id?: string;
        /** @description Multiple values may be separated by commas. */
        request_ip?: string[];
        /**
         * @description * `GET` - GET
         * * `POST` - POST
         * * `PUT` - PUT
         * * `DELETE` - DELETE
         * * `PATCH` - PATCH
         * * `OPTIONS` - OPTIONS
         * * `HEAD` - HEAD
         */
        request_method?: ("DELETE" | "GET" | "HEAD" | "OPTIONS" | "PATCH" | "POST" | "PUT")[];
        /** @description Multiple values may be separated by commas. */
        request_path?: string[];
        request_query?: string;
        /** @description Multiple values may be separated by commas. */
        request_user_agent?: string[];
        /**
         * @description Ordering
         *
         * * `time` - Time
         * * `-time` - Time (descending)
         * * `request_duration_ns` - Request duration ns
         * * `-request_duration_ns` - Request duration ns (descending)
         */
        sort_by?: ("-request_duration_ns" | "-time" | "request_duration_ns" | "time")[];
        /** @description Multiple values may be separated by commas. */
        status?: string[];
        time_after?: string;
        time_before?: string;
      };
      path: {
        deployment_hash: string;
        env_slug: string;
        project_slug: string;
        service_slug: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedHttpLogList"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ProjectsServiceDetailsDeploymentsHttpLogsListErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /** Get single deployment http log */
  projects_service_details_deployments_http_logs_retrieve: {
    parameters: {
      path: {
        deployment_hash: string;
        env_slug: string;
        project_slug: string;
        request_uuid: string;
        service_slug: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["HttpLog"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ProjectsServiceDetailsDeploymentsHttpLogsRetrieveErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /** Get deployment http logs fields values */
  projects_service_details_deployments_http_logs_fields_list: {
    parameters: {
      query: {
        /**
         * @description * `request_host` - request_host
         * * `request_path` - request_path
         * * `request_user_agent` - request_user_agent
         * * `request_ip` - request_ip
         */
        field: "request_host" | "request_path" | "request_user_agent" | "request_ip";
        value: string;
      };
      path: {
        deployment_hash: string;
        env_slug: string;
        project_slug: string;
        service_slug: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": string[];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ProjectsServiceDetailsDeploymentsHttpLogsFieldsListErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /** Get service or deployment metrics */
  projects_service_details_deployments_metrics_list: {
    parameters: {
      query?: {
        /**
         * @description * `LAST_HOUR` - LAST_HOUR
         * * `LAST_6HOURS` - LAST_6HOURS
         * * `LAST_DAY` - LAST_DAY
         * * `LAST_WEEK` - LAST_WEEK
         * * `LAST_MONTH` - LAST_MONTH
         */
        time_range?: "LAST_HOUR" | "LAST_6HOURS" | "LAST_DAY" | "LAST_WEEK" | "LAST_MONTH";
      };
      path: {
        deployment_hash: string;
        env_slug: string;
        project_slug: string;
        service_slug: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ServiceMetrics"][];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ProjectsServiceDetailsDeploymentsMetricsListErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /** Get deployment logs */
  projects_service_details_deployments_runtime_logs_retrieve: {
    parameters: {
      query?: {
        cursor?: string;
        level?: ("INFO" | "ERROR")[];
        per_page?: number;
        query?: string;
        time_after?: string;
        time_before?: string;
      };
      path: {
        deployment_hash: string;
        env_slug: string;
        project_slug: string;
        service_slug: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["RuntimeLogsSearch"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ProjectsServiceDetailsDeploymentsRuntimeLogsRetrieveErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /** Get service HTTP logs */
  projects_service_details_http_logs_list: {
    parameters: {
      query?: {
        /** @description The pagination cursor value. */
        cursor?: string;
        /** @description Number of results to return per page. */
        per_page?: number;
        /** @description Multiple values may be separated by commas. */
        request_host?: string[];
        request_id?: string;
        /** @description Multiple values may be separated by commas. */
        request_ip?: string[];
        /**
         * @description * `GET` - GET
         * * `POST` - POST
         * * `PUT` - PUT
         * * `DELETE` - DELETE
         * * `PATCH` - PATCH
         * * `OPTIONS` - OPTIONS
         * * `HEAD` - HEAD
         */
        request_method?: ("DELETE" | "GET" | "HEAD" | "OPTIONS" | "PATCH" | "POST" | "PUT")[];
        /** @description Multiple values may be separated by commas. */
        request_path?: string[];
        request_query?: string;
        /** @description Multiple values may be separated by commas. */
        request_user_agent?: string[];
        /**
         * @description Ordering
         *
         * * `time` - Time
         * * `-time` - Time (descending)
         * * `request_duration_ns` - Request duration ns
         * * `-request_duration_ns` - Request duration ns (descending)
         */
        sort_by?: ("-request_duration_ns" | "-time" | "request_duration_ns" | "time")[];
        /** @description Multiple values may be separated by commas. */
        status?: string[];
        time_after?: string;
        time_before?: string;
      };
      path: {
        env_slug: string;
        project_slug: string;
        service_slug: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedHttpLogList"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ProjectsServiceDetailsHttpLogsListErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /** Get single service http log */
  projects_service_details_http_logs_retrieve: {
    parameters: {
      path: {
        env_slug: string;
        project_slug: string;
        request_uuid: string;
        service_slug: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["HttpLog"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ProjectsServiceDetailsHttpLogsRetrieveErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /** Get service http logs fields values */
  projects_service_details_http_logs_fields_list: {
    parameters: {
      query: {
        /**
         * @description * `request_host` - request_host
         * * `request_path` - request_path
         * * `request_user_agent` - request_user_agent
         * * `request_ip` - request_ip
         */
        field: "request_host" | "request_path" | "request_user_agent" | "request_ip";
        value: string;
      };
      path: {
        env_slug: string;
        project_slug: string;
        service_slug: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": string[];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ProjectsServiceDetailsHttpLogsFieldsListErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /** Get service or deployment metrics */
  projects_service_details_metrics_list: {
    parameters: {
      query?: {
        /**
         * @description * `LAST_HOUR` - LAST_HOUR
         * * `LAST_6HOURS` - LAST_6HOURS
         * * `LAST_DAY` - LAST_DAY
         * * `LAST_WEEK` - LAST_WEEK
         * * `LAST_MONTH` - LAST_MONTH
         */
        time_range?: "LAST_HOUR" | "LAST_6HOURS" | "LAST_DAY" | "LAST_WEEK" | "LAST_MONTH";
      };
      path: {
        env_slug: string;
        project_slug: string;
        service_slug: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ServiceMetrics"][];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ProjectsServiceDetailsMetricsListErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /** Regenerate service deploy token */
  regenerateServiceDeployToken: {
    parameters: {
      path: {
        env_slug: string;
        project_slug: string;
        service_slug: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedServiceRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedServiceRequest"];
        "multipart/form-data": components["schemas"]["PatchedServiceRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Service"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["RegenerateServiceDeployTokenErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /**
   * Get single service
   * @description See all the details of a service.
   */
  getSingleService: {
    parameters: {
      path: {
        env_slug: string;
        project_slug: string;
        slug: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Service"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["GetSingleServiceErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /** Update a service */
  updateService: {
    parameters: {
      path: {
        env_slug: string;
        project_slug: string;
        slug: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedServiceRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedServiceRequest"];
        "multipart/form-data": components["schemas"]["PatchedServiceRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Service"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["UpdateServiceErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /**
   * Stop/Restart a docker service
   * @description Stops a running docker service and restart it if it was stopped.
   */
  toggleService: {
    parameters: {
      path: {
        env_slug: string;
        project_slug: string;
        service_slug: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ToggleServiceStateRequestRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["ToggleServiceStateRequestRequest"];
        "multipart/form-data": components["schemas"]["ToggleServiceStateRequestRequest"];
      };
    };
    responses: {
      /** @description No response body */
      202: {
        content: never;
      };
      400: {
        content: {
          "application/json": components["schemas"]["ToggleServiceErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponse409"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  projects_variables_list: {
    parameters: {
      path: {
        env_slug: string;
        project_slug: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SharedEnvVariable"][];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ProjectsVariablesListErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  projects_variables_create: {
    parameters: {
      path: {
        env_slug: string;
        project_slug: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SharedEnvVariableRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["SharedEnvVariableRequest"];
        "multipart/form-data": components["schemas"]["SharedEnvVariableRequest"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["SharedEnvVariable"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ProjectsVariablesCreateErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  projects_variables_retrieve: {
    parameters: {
      path: {
        env_slug: string;
        /** @description A unique value identifying this shared env variable. */
        id: string;
        project_slug: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SharedEnvVariable"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ProjectsVariablesRetrieveErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  projects_variables_update: {
    parameters: {
      path: {
        env_slug: string;
        /** @description A unique value identifying this shared env variable. */
        id: string;
        project_slug: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SharedEnvVariableRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["SharedEnvVariableRequest"];
        "multipart/form-data": components["schemas"]["SharedEnvVariableRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SharedEnvVariable"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ProjectsVariablesUpdateErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  projects_variables_destroy: {
    parameters: {
      path: {
        env_slug: string;
        /** @description A unique value identifying this shared env variable. */
        id: string;
        project_slug: string;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
      400: {
        content: {
          "application/json": components["schemas"]["ProjectsVariablesDestroyErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  projects_variables_partial_update: {
    parameters: {
      path: {
        env_slug: string;
        /** @description A unique value identifying this shared env variable. */
        id: string;
        project_slug: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedSharedEnvVariableRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedSharedEnvVariableRequest"];
        "multipart/form-data": components["schemas"]["PatchedSharedEnvVariableRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SharedEnvVariable"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ProjectsVariablesPartialUpdateErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  projects_preview_templates_retrieve: {
    parameters: {
      path: {
        project_slug: string;
        template_slug: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PreviewEnvTemplate"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ProjectsPreviewTemplatesRetrieveErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  projects_preview_templates_destroy: {
    parameters: {
      path: {
        project_slug: string;
        template_slug: string;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
      400: {
        content: {
          "application/json": components["schemas"]["ProjectsPreviewTemplatesDestroyErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  projects_preview_templates_partial_update: {
    parameters: {
      path: {
        project_slug: string;
        template_slug: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedPreviewEnvTemplateRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedPreviewEnvTemplateRequest"];
        "multipart/form-data": components["schemas"]["PatchedPreviewEnvTemplateRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PreviewEnvTemplate"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ProjectsPreviewTemplatesPartialUpdateErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /** Get single project */
  getSingleProject: {
    parameters: {
      path: {
        slug: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Project"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["GetSingleProjectErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /** Archive a Project */
  archiveSingleProject: {
    parameters: {
      path: {
        slug: string;
      };
    };
    responses: {
      /** @description No response body */
      200: {
        content: never;
      };
      400: {
        content: {
          "application/json": components["schemas"]["ArchiveSingleProjectErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /** Update a project */
  updateProject: {
    parameters: {
      path: {
        slug: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedProjectUpdateRequestRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedProjectUpdateRequestRequest"];
        "multipart/form-data": components["schemas"]["PatchedProjectUpdateRequestRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Project"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["UpdateProjectErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /**
   * Get service list
   * @description Get all services in a project
   */
  projects_service_list_list: {
    parameters: {
      query?: {
        query?: string;
      };
      path: {
        env_slug: string;
        slug: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ServiceCardResponse"][];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ProjectsServiceListListErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /**
   * Clone environment
   * @description Create new environment from another
   */
  cloneEnvironment: {
    parameters: {
      path: {
        env_slug: string;
        slug: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CloneEnvironmentRequestRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["CloneEnvironmentRequestRequest"];
        "multipart/form-data": components["schemas"]["CloneEnvironmentRequestRequest"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["EnvironmentWithVariables"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["CloneEnvironmentErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponse409"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /**
   * Create new environment
   * @description Create empty environment with no services in it
   */
  createNewEnvironment: {
    parameters: {
      path: {
        slug: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateEnvironmentRequestRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["CreateEnvironmentRequestRequest"];
        "multipart/form-data": components["schemas"]["CreateEnvironmentRequestRequest"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Environment"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["CreateNewEnvironmentErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponse409"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /** Get a single environment */
  getEnvironment: {
    parameters: {
      path: {
        env_slug: string;
        slug: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["EnvironmentWithVariables"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["GetEnvironmentErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /**
   * Archive environment
   * @description Archive environment with the services inside of it
   */
  archiveEnvironment: {
    parameters: {
      path: {
        env_slug: string;
        slug: string;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
      400: {
        content: {
          "application/json": components["schemas"]["ArchiveEnvironmentErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /** Update an environment */
  updateEnvironment: {
    parameters: {
      path: {
        env_slug: string;
        slug: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedUpdateEnvironmentRequestRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedUpdateEnvironmentRequestRequest"];
        "multipart/form-data": components["schemas"]["PatchedUpdateEnvironmentRequestRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Environment"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["UpdateEnvironmentErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /** Get the preview deployment */
  getPreviewEnvToReview: {
    parameters: {
      path: {
        env_slug: string;
        slug: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["EnvironmentWithVariables"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["GetPreviewEnvToReviewErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /** Approve or Decline the execution of the deployment of a preview environment */
  reviewPreviewEnvDeploy: {
    parameters: {
      path: {
        env_slug: string;
        slug: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ReviewPreviewEnvDeploymentRequestRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["ReviewPreviewEnvDeploymentRequestRequest"];
        "multipart/form-data": components["schemas"]["ReviewPreviewEnvDeploymentRequestRequest"];
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
      400: {
        content: {
          "application/json": components["schemas"]["ReviewPreviewEnvDeployErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  projects_preview_templates_list: {
    parameters: {
      path: {
        slug: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PreviewEnvTemplate"][];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ProjectsPreviewTemplatesListErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  projects_preview_templates_create: {
    parameters: {
      path: {
        slug: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PreviewEnvTemplateRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["PreviewEnvTemplateRequest"];
        "multipart/form-data": components["schemas"]["PreviewEnvTemplateRequest"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["PreviewEnvTemplate"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ProjectsPreviewTemplatesCreateErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /**
   * List recent deployments
   * @description List the 10 most recent deployments made on this instance.
   */
  recent_deployments_list: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SimpleDeployment"][];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["RecentDeploymentsListErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /** search for resources (project, service, environment ...) */
  searchResources: {
    parameters: {
      query?: {
        query?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ResourceResponse"][];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["SearchResourcesErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /**
   * Get server resource limits
   * @description Get the number of CPUS & memory of the server.
   */
  getServerResouceLimits: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ResourceLimit"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["GetServerResouceLimitsErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /**
   * Get API settings
   * @description Get the settings of the API.
   */
  getAPISettings: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Settings"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["GetAPISettingsErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /** List all ssh keys */
  getSSHKeyList: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SSHKey"][];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["GetSSHKeyListErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /** Create a new SSH key */
  createSSHKey: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateSSHKeyRequestRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["CreateSSHKeyRequestRequest"];
        "multipart/form-data": components["schemas"]["CreateSSHKeyRequestRequest"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["SSHKey"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["CreateSSHKeyErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponse409"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  shell_ssh_keys_retrieve: {
    parameters: {
      path: {
        slug: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SSHKey"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ShellSshKeysRetrieveErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  shell_ssh_keys_destroy: {
    parameters: {
      path: {
        slug: string;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
      400: {
        content: {
          "application/json": components["schemas"]["ShellSshKeysDestroyErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /** Webhook to trigger a new preview environment */
  webhookTriggerPreviewEnv: {
    parameters: {
      path: {
        deploy_token: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["TriggerPreviewEnvRequestRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["TriggerPreviewEnvRequestRequest"];
        "multipart/form-data": components["schemas"]["TriggerPreviewEnvRequestRequest"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["EnvironmentWithVariables"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["WebhookTriggerPreviewEnvErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
  /**
   * Trigger Auto-Update
   * @description Triggers the Docker auto-update workflow using Temporal.
   */
  trigger_update_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AutoUpdateRequestRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["AutoUpdateRequestRequest"];
        "multipart/form-data": components["schemas"]["AutoUpdateRequestRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["AutoUpdateResponse"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["TriggerUpdateCreateErrorResponse400"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse401"];
        };
      };
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse429"];
        };
      };
    };
  };
}
