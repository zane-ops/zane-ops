import createClient from "openapi-fetch";
import type { paths } from "./v1"; // generated by openapi-typescript
import { ApiError } from "openapi-fetch";

export const apiClient = createClient<paths>({
  baseUrl: "/",
});

type RequestMethod = "post" | "put" | "get" | "delete" | "patch";

// Utility type to extract the request body type for a given path and method
export type ExtractRequestBody<
  TPaths,
  TPath extends keyof TPaths,
  TMethod extends RequestMethod
> = TPaths[TPath] extends { [M in TMethod]: { requestBody?: { content: { "application/json": infer TRequestBody } } } }
  ? TRequestBody
  : never;

// Utility type to extract the request parameters type for a given path and method
export type ExtractRequestParams<
  TPaths,
  TPath extends keyof TPaths,
  TMethod extends RequestMethod
> = TPaths[TPath] extends { [M in TMethod]: { parameters?: { query: infer TRequestParams } } }
  ? TRequestParams
  : never;

// Utility type to extract the response body type for a given path, method, and status code
export type ExtractResponseBody<
  TPaths,
  TPath extends keyof TPaths,
  TMethod extends RequestMethod,
  TStatusCode extends number
> = TPaths[TPath] extends { [M in TMethod]: { responses: { [S in TStatusCode]: { content: { "application/json": infer TResponseBody } } } } }
  ? TResponseBody
  : never;

// Helper type to filter paths that contain either POST, PUT, GET, DELETE, or PATCH operations
export type PathsForMethod<TPaths, TMethod extends RequestMethod> = {
  [K in keyof TPaths]: TPaths[K] extends { [M in TMethod]: any } ? K : never;
}[keyof TPaths];

// Consolidated request input type
export type RequestInput<
  TMethod extends RequestMethod,
  TPath extends PathsForMethod<paths, TMethod>
> =
  | (ExtractRequestBody<paths, TPath, TMethod> extends never
      ? {}
      : { body: ExtractRequestBody<paths, TPath, TMethod> })
  | (ExtractRequestParams<paths, TPath, TMethod> extends never
      ? {}
      : { params: ExtractRequestParams<paths, TPath, TMethod> });

// Consolidated response type
export type ApiResponse<
  TMethod extends RequestMethod,
  TPath extends PathsForMethod<paths, TMethod>,
  TStatusCode extends number = 200 // Default to HTTP_SUCCESS, customize as needed
> =
  | {
      data: ExtractResponseBody<paths, TPath, TMethod, TStatusCode>;
      error: null;
    }
  | {
      data: null;
      error: ApiError<ExtractResponseBody<paths, TPath, TMethod, TStatusCode>>;
    };

export const HTTP_SUCCESS = 200;
